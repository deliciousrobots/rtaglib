/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a funtion in C.  For C, fallback to rb_eRuntimeError.*/

VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_TagLib__APE__Footer swig_types[0]
#define SWIGTYPE_p_TagLib__APE__Item swig_types[1]
#define SWIGTYPE_p_TagLib__APE__Tag swig_types[2]
#define SWIGTYPE_p_TagLib__AudioProperties swig_types[3]
#define SWIGTYPE_p_TagLib__ByteVector swig_types[4]
#define SWIGTYPE_p_TagLib__FLAC__File swig_types[5]
#define SWIGTYPE_p_TagLib__FLAC__Properties swig_types[6]
#define SWIGTYPE_p_TagLib__File swig_types[7]
#define SWIGTYPE_p_TagLib__FileRef swig_types[8]
#define SWIGTYPE_p_TagLib__ID3v1__Tag swig_types[9]
#define SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame swig_types[10]
#define SWIGTYPE_p_TagLib__ID3v2__CommentsFrame swig_types[11]
#define SWIGTYPE_p_TagLib__ID3v2__Frame swig_types[12]
#define SWIGTYPE_p_TagLib__ID3v2__FrameFactory swig_types[13]
#define SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame swig_types[14]
#define SWIGTYPE_p_TagLib__ID3v2__Header swig_types[15]
#define SWIGTYPE_p_TagLib__ID3v2__Tag swig_types[16]
#define SWIGTYPE_p_TagLib__ListT_Frame_p_t swig_types[17]
#define SWIGTYPE_p_TagLib__ListT_TagLib__ByteVector_t swig_types[18]
#define SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t swig_types[19]
#define SWIGTYPE_p_TagLib__ListT_TagLib__String_t swig_types[20]
#define SWIGTYPE_p_TagLib__ListT_int_t swig_types[21]
#define SWIGTYPE_p_TagLib__MPC__File swig_types[22]
#define SWIGTYPE_p_TagLib__MPC__Properties swig_types[23]
#define SWIGTYPE_p_TagLib__MPEG__File swig_types[24]
#define SWIGTYPE_p_TagLib__MPEG__Header swig_types[25]
#define SWIGTYPE_p_TagLib__MPEG__Properties swig_types[26]
#define SWIGTYPE_p_TagLib__MPEG__XingHeader swig_types[27]
#define SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t swig_types[28]
#define SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t swig_types[29]
#define SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t swig_types[30]
#define SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t swig_types[31]
#define SWIGTYPE_p_TagLib__Ogg__FLAC__File swig_types[32]
#define SWIGTYPE_p_TagLib__Ogg__File swig_types[33]
#define SWIGTYPE_p_TagLib__Ogg__Page swig_types[34]
#define SWIGTYPE_p_TagLib__Ogg__PageHeader swig_types[35]
#define SWIGTYPE_p_TagLib__Ogg__Speex__File swig_types[36]
#define SWIGTYPE_p_TagLib__Ogg__Speex__Properties swig_types[37]
#define SWIGTYPE_p_TagLib__Ogg__XiphComment swig_types[38]
#define SWIGTYPE_p_TagLib__String swig_types[39]
#define SWIGTYPE_p_TagLib__Tag swig_types[40]
#define SWIGTYPE_p_TagLib__TrueAudio__File swig_types[41]
#define SWIGTYPE_p_TagLib__TrueAudio__Properties swig_types[42]
#define SWIGTYPE_p_TagLib__Vorbis__File swig_types[43]
#define SWIGTYPE_p_TagLib__Vorbis__Properties swig_types[44]
#define SWIGTYPE_p_TagLib__WavPack__File swig_types[45]
#define SWIGTYPE_p_TagLib__WavPack__Properties swig_types[46]
#define SWIGTYPE_p_char swig_types[47]
#define SWIGTYPE_p_p_TagLib__ID3v2__AttachedPictureFrame swig_types[48]
#define SWIGTYPE_p_p_TagLib__ID3v2__CommentsFrame swig_types[49]
#define SWIGTYPE_p_p_TagLib__ID3v2__Frame swig_types[50]
#define SWIGTYPE_p_std__basic_stringT_wchar_t_t swig_types[51]
#define SWIGTYPE_p_unsigned_char swig_types[52]
#define SWIGTYPE_p_unsigned_int swig_types[53]
#define SWIGTYPE_p_unsigned_long swig_types[54]
#define SWIGTYPE_p_wchar_t swig_types[55]
static swig_type_info *swig_types[57];
static swig_module_info swig_module = {swig_types, 56, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_TagLib
#define SWIG_name    "TagLib"

static VALUE mTagLib;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x010335 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include "taglib/tlist.h"
#include "taglib/fileref.h"
#include "taglib/id3v1tag.h"
#include "taglib/id3v1genres.h"


#include "taglib/id3v2tag.h"
#include "taglib/attachedpictureframe.h"
#include "taglib/commentsframe.h"
#include <taglib/xingheader.h>

#include "taglib/apefooter.h"
#include "taglib/apetag.h"
#include "taglib/apeitem.h"

#include "taglib/mpcfile.h"
#include "taglib/mpcproperties.h"



#include "taglib/flacfile.h"
#include "taglib/flacproperties.h"

#include <taglib/oggpage.h>
#include <taglib/oggpageheader.h>
#include <taglib/oggflacfile.h>
#include <taglib/speexfile.h>
#include <taglib/speexproperties.h>



#include "taglib/vorbisfile.h"
#include "taglib/vorbisproperties.h"

#include "taglib/xiphcomment.h"
#include "taglib/mpegfile.h"


#include "taglib/trueaudiofile.h"
#include "taglib/trueaudioproperties.h"


#include "taglib/wavpackfile.h"
#include "taglib/wavpackproperties.h"



typedef wchar_t 	wchar;
typedef unsigned char 	uchar;
typedef unsigned int 	uint;
typedef unsigned long 	ulong;
typedef std::basic_string< wchar > 	wstring;
typedef const char * 	FileName;


    VALUE ByteVector2Ruby(const TagLib::ByteVector *bv) {
        return rb_tainted_str_new(bv->data(),bv->size());;
    }
    VALUE String2Ruby(const TagLib::String *st) {
        return rb_tainted_str_new2(st->toCString(!st->isLatin1()));
    }
    
    VALUE StringList2Ruby(const TagLib::StringList *st) {
        VALUE ary=Qnil;
        if(st->size()>0) {
            ary=rb_ary_new2(st->size());
            for(uint i=0;i<(st->size());i++) {
                const TagLib::String *val=&(st->operator[](i));
                rb_ary_push(ary, String2Ruby(val));
            }
        }
        return ary;
    }
    VALUE FrameList2Ruby(const TagLib::ID3v2::FrameList *st) {
        VALUE ary=Qnil;
        if(st->size()>0) {
            ary=rb_ary_new2(st->size());
            for(uint i=0;i<(st->size());i++) {
            rb_ary_push(ary, SWIG_NewPointerObj(st->operator[](i), SWIGTYPE_p_TagLib__ID3v2__Frame, 0));
            }
        }
        return ary;
    }
    


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    #if defined(StringValuePtr)
    char *cstr = StringValuePtr(obj); 
    #else
    char *cstr = STR2CSTR(obj);
    #endif
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}





VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig1.3/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


/*@SWIG:/usr/share/swig1.3/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}

SWIGINTERN char const *TagLib_ByteVector___str__(TagLib::ByteVector *self){
            return self->data();
        }
SWIGINTERN bool TagLib_File_isWritable(TagLib::File *self){
            return !self->readOnly();
        }
SWIGINTERN uint TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____len__(TagLib::Map< TagLib::String,TagLib::StringList > *self){
                 return self->size();
             }
VALUE TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____getitem__(TagLib::Map< TagLib::String,TagLib::StringList > *self,TagLib::String &item){
        if(self->contains(item)) {
            TagLib::StringList val=self->operator[](item);
            return StringList2Ruby(&val);
        } else {
            return Qnil;
        }
    }
VALUE TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____hash__(TagLib::Map< TagLib::String,TagLib::StringList > *self){
        uint i;
        VALUE hash=rb_hash_new();
        for(std::map<TagLib::String,TagLib::StringList>::const_iterator it=self->begin(); it!=self->end();it++) {
            VALUE key=String2Ruby(&it->first);
            VALUE ary=StringList2Ruby(&it->second);
            rb_hash_aset(hash,key,ary);
        }
        return hash;
    }
SWIGINTERN uint TagLib_Map_Sl_TagLib_String_Sc_TagLib_APE_Item_Sg____len__(TagLib::Map< TagLib::String,TagLib::APE::Item > *self){
                 return self->size();
             }
SWIGINTERN uint TagLib_Map_Sl_TagLib_String_Sc_int_Sg____len__(TagLib::Map< TagLib::String,int > *self){
                 return self->size();
             }
VALUE TagLib_Map_Sl_TagLib_String_Sc_int_Sg____getitem__(TagLib::Map< TagLib::String,int > *self,TagLib::String &item){
        if(self->contains(item)) {
            int val=self->operator[](item);
            return INT2FIX(&val);
        } else {
            return Qnil;
        }
    }
VALUE TagLib_Map_Sl_TagLib_String_Sc_int_Sg____hash__(TagLib::Map< TagLib::String,int > *self){
        uint i;
        VALUE hash=rb_hash_new();
        for(std::map<TagLib::String,int>::const_iterator it=self->begin(); it!=self->end();it++) {
            VALUE key=String2Ruby(&it->first);
            VALUE ary=INT2FIX(&it->second);
            rb_hash_aset(hash,key,ary);
        }
        return hash;
    }
SWIGINTERN uint TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____len__(TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *self){
                 return self->size();
             }
VALUE TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____getitem__(TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *self,TagLib::ByteVector &item){
        if(self->contains(item)) {
            TagLib::ID3v2::FrameList val=self->operator[](item);
            return FrameList2Ruby(&val);
        } else {
            return Qnil;
        }
    }
VALUE TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____hash__(TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *self){
        uint i;
        VALUE hash=rb_hash_new();
        for(std::map<TagLib::ByteVector,TagLib::ID3v2::FrameList>::const_iterator it=self->begin(); it!=self->end();it++) {
            VALUE key=ByteVector2Ruby(&it->first);
            VALUE ary=FrameList2Ruby(&it->second);
            rb_hash_aset(hash,key,ary);
        }
        return hash;
    }

SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERNINLINE VALUE 
SWIG_From_long_SS_long  (long long value)
{
  return LL2NUM(value);
}


/*@SWIG:/usr/share/swig1.3/ruby/rubyprimtypes.swg,23,%ruby_aux_method@*/
VALUE SWIG_AUX_NUM2LL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long long *res = (long long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LL(obj) : rb_big2ll(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long_SS_long (VALUE obj, long long *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}

VALUE TagLib_ID3v2_Frame___str__(TagLib::ID3v2::Frame *self){
                    return rb_tainted_str_new2(self->toString().toCString(false));
                }
SWIGINTERN TagLib::ID3v2::AttachedPictureFrame *TagLib_ID3v2_AttachedPictureFrame_new2(TagLib::ByteVector const &data){
                 return new TagLib::ID3v2::AttachedPictureFrame(data);
                }

/*
  Document-class: TagLib::AudioProperties

  Proxy of C++ TagLib::AudioProperties class


*/
swig_class cAudioProperties;


/*
  Document-method: TagLib::ReadStyle.Fast

  call-seq:
    Fast -> int

A class method.

*/

/*
  Document-method: TagLib::ReadStyle.Average

  call-seq:
    Average -> int

A class method.

*/

/*
  Document-method: TagLib::ReadStyle.Accurate

  call-seq:
    Accurate -> int

A class method.

*/

/*
  Document-method: TagLib::AudioProperties.length

  call-seq:
    length -> int

An instance method.

*/
VALUE
_wrap_AudioProperties_length(int argc, VALUE *argv, VALUE self) {
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__AudioProperties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::AudioProperties const *","length", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::AudioProperties * >(argp1);
  result = (int)((TagLib::AudioProperties const *)arg1)->length();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::AudioProperties.bitrate

  call-seq:
    bitrate -> int

An instance method.

*/
VALUE
_wrap_AudioProperties_bitrate(int argc, VALUE *argv, VALUE self) {
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__AudioProperties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::AudioProperties const *","bitrate", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::AudioProperties * >(argp1);
  result = (int)((TagLib::AudioProperties const *)arg1)->bitrate();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::AudioProperties.sampleRate

  call-seq:
    sampleRate -> int

An instance method.

*/
VALUE
_wrap_AudioProperties_sampleRate(int argc, VALUE *argv, VALUE self) {
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__AudioProperties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::AudioProperties const *","sampleRate", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::AudioProperties * >(argp1);
  result = (int)((TagLib::AudioProperties const *)arg1)->sampleRate();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::AudioProperties.channels

  call-seq:
    channels -> int

An instance method.

*/
VALUE
_wrap_AudioProperties_channels(int argc, VALUE *argv, VALUE self) {
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__AudioProperties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::AudioProperties const *","channels", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::AudioProperties * >(argp1);
  result = (int)((TagLib::AudioProperties const *)arg1)->channels();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::String

  Proxy of C++ TagLib::String class


*/
swig_class cString;


/*
  Document-method: TagLib::Type.Latin1

  call-seq:
    Latin1 -> int

A class method.

*/

/*
  Document-method: TagLib::Type.UTF16

  call-seq:
    UTF16 -> int

A class method.

*/

/*
  Document-method: TagLib::Type.UTF16BE

  call-seq:
    UTF16BE -> int

A class method.

*/

/*
  Document-method: TagLib::Type.UTF8

  call-seq:
    UTF8 -> int

A class method.

*/

/*
  Document-method: TagLib::Type.UTF16LE

  call-seq:
    UTF16LE -> int

A class method.

*/

/*
  Document-method: TagLib::String.new

  call-seq:
    String.new
    String.new(char s, Type t=Latin1)
    String.new(char s)

Class constructor.

*/
VALUE
_wrap_new_String__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::String *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::String *)new TagLib::String();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE
_wrap_new_String__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  TagLib::String::Type arg2 ;
  TagLib::String *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","TagLib::String", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","TagLib::String", 2, argv[1] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  result = (TagLib::String *)new TagLib::String((char const *)arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_String_allocate(VALUE self) {
#else
  VALUE
  _wrap_String_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__String);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_String__SWIG_2(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  TagLib::String *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","TagLib::String", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (TagLib::String *)new TagLib::String((char const *)arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_String(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_String__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_String__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_String__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "String.new", 
    "    String.new()\n"
    "    String.new(char const *s, TagLib::String::Type t)\n"
    "    String.new(char const *s)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_String(TagLib::String *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::String.toCString

  call-seq:
    toCString -> char

An instance method.

*/
VALUE
_wrap_String_toCString(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = (TagLib::String *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::String *","toCString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::String * >(argp1);
  result = (char *)(arg1)->toCString();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::Tag

  Proxy of C++ TagLib::Tag class


*/
swig_class cTag;

SWIGINTERN void
free_TagLib_Tag(TagLib::Tag *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::Tag.title

  call-seq:
    title -> String

An instance method.

*/
VALUE
_wrap_Tag_title(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag const *","title", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  result = ((TagLib::Tag const *)arg1)->title();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.artist

  call-seq:
    artist -> String

An instance method.

*/
VALUE
_wrap_Tag_artist(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag const *","artist", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  result = ((TagLib::Tag const *)arg1)->artist();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.album

  call-seq:
    album -> String

An instance method.

*/
VALUE
_wrap_Tag_album(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag const *","album", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  result = ((TagLib::Tag const *)arg1)->album();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.comment

  call-seq:
    comment -> String

An instance method.

*/
VALUE
_wrap_Tag_comment(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag const *","comment", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  result = ((TagLib::Tag const *)arg1)->comment();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.genre

  call-seq:
    genre -> String

An instance method.

*/
VALUE
_wrap_Tag_genre(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag const *","genre", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  result = ((TagLib::Tag const *)arg1)->genre();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.year

  call-seq:
    year -> uint

An instance method.

*/
VALUE
_wrap_Tag_year(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag const *","year", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  result = (uint)((TagLib::Tag const *)arg1)->year();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.track

  call-seq:
    track -> uint

An instance method.

*/
VALUE
_wrap_Tag_track(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag *","track", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  result = (uint)(arg1)->track();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.setTitle

  call-seq:
    setTitle(String s)

An instance method.

*/
VALUE
_wrap_Tag_setTitle(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag *","setTitle", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setTitle", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setTitle", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setTitle((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.setArtist

  call-seq:
    setArtist(String s)

An instance method.

*/
VALUE
_wrap_Tag_setArtist(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag *","setArtist", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setArtist", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setArtist", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setArtist((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.setAlbum

  call-seq:
    setAlbum(String s)

An instance method.

*/
VALUE
_wrap_Tag_setAlbum(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag *","setAlbum", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setAlbum", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setAlbum", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setAlbum((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.setComment

  call-seq:
    setComment(String s)

An instance method.

*/
VALUE
_wrap_Tag_setComment(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag *","setComment", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setComment", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setComment", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setComment((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.setGenre

  call-seq:
    setGenre(String s)

An instance method.

*/
VALUE
_wrap_Tag_setGenre(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag *","setGenre", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setGenre", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setGenre", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setGenre((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.setYear

  call-seq:
    setYear(uint i)

An instance method.

*/
VALUE
_wrap_Tag_setYear(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag *","setYear", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint","setYear", 2, argv[0] ));
  } 
  arg2 = static_cast< uint >(val2);
  (arg1)->setYear(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.setTrack

  call-seq:
    setTrack(uint i)

An instance method.

*/
VALUE
_wrap_Tag_setTrack(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag *","setTrack", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint","setTrack", 2, argv[0] ));
  } 
  arg2 = static_cast< uint >(val2);
  (arg1)->setTrack(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Tag.isEmpty

  call-seq:
    isEmpty -> bool

An instance method.

*/
VALUE
_wrap_Tag_isEmpty(int argc, VALUE *argv, VALUE self) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Tag *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Tag * >(argp1);
  result = (bool)(arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::ByteVector

  Proxy of C++ TagLib::ByteVector class


*/
swig_class cByteVector;


/*
  Document-method: TagLib::ByteVector.new

  call-seq:
    ByteVector.new(char data, uint length)
    ByteVector.new(char data)

Class constructor.

*/
VALUE
_wrap_new_ByteVector__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  uint arg2 ;
  TagLib::ByteVector *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","TagLib::ByteVector", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint","TagLib::ByteVector", 2, argv[1] ));
  } 
  arg2 = static_cast< uint >(val2);
  result = (TagLib::ByteVector *)new TagLib::ByteVector((char const *)arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_ByteVector_allocate(VALUE self) {
#else
  VALUE
  _wrap_ByteVector_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ByteVector);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_ByteVector__SWIG_1(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  TagLib::ByteVector *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","TagLib::ByteVector", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (TagLib::ByteVector *)new TagLib::ByteVector((char const *)arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_ByteVector(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ByteVector__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ByteVector__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ByteVector.new", 
    "    ByteVector.new(char const *data, uint length)\n"
    "    ByteVector.new(char const *data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ByteVector(TagLib::ByteVector *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::ByteVector.size

  call-seq:
    size -> uint

Size or Length of the ByteVector.
*/
VALUE
_wrap_ByteVector_size(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ByteVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ByteVector *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ByteVector * >(argp1);
  result = (uint)(arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ByteVector.data

  call-seq:
    data -> char

An instance method.

*/
VALUE
_wrap_ByteVector_data(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ByteVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ByteVector const *","data", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ByteVector * >(argp1);
  result = (char *)((TagLib::ByteVector const *)arg1)->data();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ByteVector.to_s

  call-seq:
    to_s -> char

An instance method.

*/
VALUE
_wrap_ByteVector___str__(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = (TagLib::ByteVector *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ByteVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ByteVector *","__str__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ByteVector * >(argp1);
  result = (char *)TagLib_ByteVector___str__(arg1);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::File

  Proxy of C++ TagLib::File class


*/
swig_class cFile;


/*
  Document-method: TagLib::Position.Beginning

  call-seq:
    Beginning -> int

A class method.

*/

/*
  Document-method: TagLib::Position.Current

  call-seq:
    Current -> int

A class method.

*/

/*
  Document-method: TagLib::Position.End

  call-seq:
    End -> int

A class method.

*/

/*
  Document-method: TagLib::File.name

  call-seq:
    name -> FileName

An instance method.

*/
VALUE
_wrap_File_name(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  FileName result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File const *","name", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  result = (FileName)((TagLib::File const *)arg1)->name();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_File(TagLib::File *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::File.tag

  call-seq:
    tag -> Tag

An instance method.

*/
VALUE
_wrap_File_tag(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File const *","tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  result = (TagLib::Tag *)((TagLib::File const *)arg1)->tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.audioProperties

  call-seq:
    audioProperties -> AudioProperties

An instance method.

*/
VALUE
_wrap_File_audioProperties(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::AudioProperties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File const *","audioProperties", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  result = (TagLib::AudioProperties *)((TagLib::File const *)arg1)->audioProperties();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__AudioProperties, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.save

  call-seq:
    save -> bool

An instance method.

*/
VALUE
_wrap_File_save(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","save", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  result = (bool)(arg1)->save();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.readBlock

  call-seq:
    readBlock(ulong length) -> ByteVector

An instance method.

*/
VALUE
_wrap_File_readBlock(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  ulong arg2 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","readBlock", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ulong","readBlock", 2, argv[0] ));
  } 
  arg2 = static_cast< ulong >(val2);
  result = (arg1)->readBlock(arg2);
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.writeBlock

  call-seq:
    writeBlock(ByteVector data)

An instance method.

*/
VALUE
_wrap_File_writeBlock(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","writeBlock", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  (arg1)->writeBlock((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.find1

  call-seq:
    find1(pattern) -> long

Find an element in the class.
*/
VALUE
_wrap_File_find1(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","find", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  result = (long)(arg1)->find((TagLib::ByteVector const &)*arg2);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.find2

  call-seq:
    find2(pattern, fromOffset=0) -> long

Find an element in the class.
*/
VALUE
_wrap_File_find2(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long arg3 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","find", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","find", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  result = (long)(arg1)->find((TagLib::ByteVector const &)*arg2,arg3);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.find3

  call-seq:
    find3(pattern, fromOffset=0, before=ByteVector::null) -> long

Find an element in the class.
*/
VALUE
_wrap_File_find3(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long arg3 ;
  TagLib::ByteVector *arg4 = 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","find", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","find", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  {
    Check_Type(argv[2], T_STRING);
    arg4=new TagLib::ByteVector(StringValuePtr(argv[2]), RSTRING_LEN(argv[2]));
  }
  result = (long)(arg1)->find((TagLib::ByteVector const &)*arg2,arg3,(TagLib::ByteVector const &)*arg4);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.rfind

  call-seq:
    rfind(ByteVector pattern, long fromOffset=0, ByteVector before=ByteVector::null) -> long
    rfind(ByteVector pattern, long fromOffset=0) -> long
    rfind(ByteVector pattern) -> long

An instance method.

*/
VALUE
_wrap_File_rfind__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long arg3 ;
  TagLib::ByteVector *arg4 = 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","rfind", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","rfind", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  {
    Check_Type(argv[2], T_STRING);
    arg4=new TagLib::ByteVector(StringValuePtr(argv[2]), RSTRING_LEN(argv[2]));
  }
  result = (long)(arg1)->rfind((TagLib::ByteVector const &)*arg2,arg3,(TagLib::ByteVector const &)*arg4);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_File_rfind__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long arg3 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","rfind", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode3 = SWIG_AsVal_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "long","rfind", 3, argv[1] ));
  } 
  arg3 = static_cast< long >(val3);
  result = (long)(arg1)->rfind((TagLib::ByteVector const &)*arg2,arg3);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_File_rfind__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","rfind", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  result = (long)(arg1)->rfind((TagLib::ByteVector const &)*arg2);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_File_rfind(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File_rfind__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_File_rfind__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_File_rfind__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "File.rfind", 
    "    long File.rfind(TagLib::ByteVector const &pattern, long fromOffset, TagLib::ByteVector const &before)\n"
    "    long File.rfind(TagLib::ByteVector const &pattern, long fromOffset)\n"
    "    long File.rfind(TagLib::ByteVector const &pattern)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::File.insert

  call-seq:
    insert(data, start=0, replace=0)
    insert(data, start=0)
    insert(data)

Insert one or more new elements in the File.
*/
VALUE
_wrap_File_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  ulong arg3 ;
  ulong arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "ulong","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< ulong >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "ulong","insert", 4, argv[2] ));
  } 
  arg4 = static_cast< ulong >(val4);
  (arg1)->insert((TagLib::ByteVector const &)*arg2,arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_File_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  ulong arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "ulong","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< ulong >(val3);
  (arg1)->insert((TagLib::ByteVector const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_File_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  (arg1)->insert((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


VALUE _wrap_File_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File_insert__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_File_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_File_insert__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "File.insert", 
    "    void File.insert(TagLib::ByteVector const &data, ulong start, ulong replace)\n"
    "    void File.insert(TagLib::ByteVector const &data, ulong start)\n"
    "    void File.insert(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::File.removeBlock

  call-seq:
    removeBlock(ulong start=0, ulong length=0)
    removeBlock(ulong start=0)
    removeBlock

An instance method.

*/
VALUE
_wrap_File_removeBlock__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  ulong arg2 ;
  ulong arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","removeBlock", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ulong","removeBlock", 2, argv[0] ));
  } 
  arg2 = static_cast< ulong >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "ulong","removeBlock", 3, argv[1] ));
  } 
  arg3 = static_cast< ulong >(val3);
  (arg1)->removeBlock(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_File_removeBlock__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  ulong arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","removeBlock", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ulong","removeBlock", 2, argv[0] ));
  } 
  arg2 = static_cast< ulong >(val2);
  (arg1)->removeBlock(arg2);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_File_removeBlock__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","removeBlock", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  (arg1)->removeBlock();
  return Qnil;
fail:
  return Qnil;
}


VALUE _wrap_File_removeBlock(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_File_removeBlock__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_File_removeBlock__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_File_removeBlock__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "File.removeBlock", 
    "    void File.removeBlock(ulong start, ulong length)\n"
    "    void File.removeBlock(ulong start)\n"
    "    void File.removeBlock()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::File.readOnly

  call-seq:
    readOnly -> bool

An instance method.

*/
VALUE
_wrap_File_readOnly(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File const *","readOnly", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  result = (bool)((TagLib::File const *)arg1)->readOnly();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.isOpen

  call-seq:
    isOpen -> bool

An instance method.

*/
VALUE
_wrap_File_isOpen(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File const *","isOpen", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  result = (bool)((TagLib::File const *)arg1)->isOpen();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.isValid

  call-seq:
    isValid -> bool

An instance method.

*/
VALUE
_wrap_File_isValid(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File const *","isValid", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  result = (bool)((TagLib::File const *)arg1)->isValid();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.seek

  call-seq:
    seek(long offset, Position p=Beginning)
    seek(long offset)

An instance method.

*/
VALUE
_wrap_File_seek__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  TagLib::File::Position arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","seek", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","seek", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::File::Position","seek", 3, argv[1] ));
  } 
  arg3 = static_cast< TagLib::File::Position >(val3);
  (arg1)->seek(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_File_seek__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","seek", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","seek", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->seek(arg2);
  return Qnil;
fail:
  return Qnil;
}


VALUE _wrap_File_seek(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_File_seek__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_File_seek__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "File.seek", 
    "    void File.seek(long offset, TagLib::File::Position p)\n"
    "    void File.seek(long offset)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::File.clear

  call-seq:
    clear

An instance method.

*/
VALUE
_wrap_File_clear(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.tell

  call-seq:
    tell -> long

An instance method.

*/
VALUE
_wrap_File_tell(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File const *","tell", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  result = (long)((TagLib::File const *)arg1)->tell();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.length

  call-seq:
    length -> long

An instance method.

*/
VALUE
_wrap_File_length(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","length", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  result = (long)(arg1)->length();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::File.isWritable

  call-seq:
    isWritable -> bool

An instance method.

*/
VALUE
_wrap_File_isWritable(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","isWritable", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  result = (bool)TagLib_File_isWritable(arg1);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::FieldListMap

  Proxy of C++ TagLib::FieldListMap class


*/
swig_class cFieldListMap;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_FieldListMap_allocate(VALUE self) {
#else
  VALUE
  _wrap_FieldListMap_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::FieldListMap.new

  call-seq:
    FieldListMap.new

Class constructor.

*/
VALUE
_wrap_new_FieldListMap(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::StringList > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::Map< TagLib::String,TagLib::StringList > *)new TagLib::Map< TagLib::String,TagLib::StringList >();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg_(TagLib::Map< TagLib::String,TagLib::StringList > *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::FieldListMap.insert

  call-seq:
    insert(?, ?) -> FieldListMap

Insert one or more new elements in the FieldListMap.
*/
VALUE
_wrap_FieldListMap_insert(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map< TagLib::String,TagLib::StringList > *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::StringList *arg3 = 0 ;
  TagLib::Map< TagLib::String,TagLib::StringList > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::StringList > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::StringList > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","insert", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","insert", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  {
    TagLib::StringList *sl=new TagLib::StringList();
    for(long i=0;i<RARRAY_LEN(argv[1]);i++) {
      SafeStringValue(RARRAY_PTR(argv[1])[i]);
      TagLib::String ntl=TagLib::String(StringValuePtr(RARRAY_PTR(argv[1])[i]));
      sl->append(ntl);
    }
    arg3=sl;
  }
  {
    TagLib::Map< TagLib::String,TagLib::StringList > &_result_ref = (arg1)->insert((TagLib::String const &)*arg2,(TagLib::StringList const &)*arg3);
    result = (TagLib::Map< TagLib::String,TagLib::StringList > *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FieldListMap.clear

  call-seq:
    clear -> FieldListMap

An instance method.

*/
VALUE
_wrap_FieldListMap_clear(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map< TagLib::String,TagLib::StringList > *) 0 ;
  TagLib::Map< TagLib::String,TagLib::StringList > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::StringList > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::StringList > * >(argp1);
  {
    TagLib::Map< TagLib::String,TagLib::StringList > &_result_ref = (arg1)->clear();
    result = (TagLib::Map< TagLib::String,TagLib::StringList > *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FieldListMap.size

  call-seq:
    size -> uint

Size or Length of the FieldListMap.
*/
VALUE
_wrap_FieldListMap_size(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map< TagLib::String,TagLib::StringList > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::StringList > *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::StringList > * >(argp1);
  result = (uint)(arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FieldListMap.isEmpty

  call-seq:
    isEmpty -> bool

An instance method.

*/
VALUE
_wrap_FieldListMap_isEmpty(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map< TagLib::String,TagLib::StringList > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::StringList > *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::StringList > * >(argp1);
  result = (bool)(arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FieldListMap.contains

  call-seq:
    contains(String key) -> bool

An instance method.

*/
VALUE
_wrap_FieldListMap_contains(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map< TagLib::String,TagLib::StringList > *) 0 ;
  TagLib::String *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::StringList > *","contains", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::StringList > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","contains", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","contains", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  result = (bool)(arg1)->contains((TagLib::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FieldListMap.length

  call-seq:
    length -> uint

An instance method.

*/
VALUE
_wrap_FieldListMap___len__(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map< TagLib::String,TagLib::StringList > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::StringList > *","__len__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::StringList > * >(argp1);
  result = (uint)TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____len__(arg1);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FieldListMap.[]

  call-seq:
    [](item) -> VALUE

Element accessor/slicing.
*/
VALUE
_wrap_FieldListMap___getitem__(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map< TagLib::String,TagLib::StringList > *) 0 ;
  TagLib::String *arg2 = 0 ;
  VALUE result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::StringList > *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::StringList > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String &","__getitem__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String &","__getitem__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  result = (VALUE)TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____getitem__(arg1,*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FieldListMap.hash

  call-seq:
    hash -> VALUE

An instance method.

*/
VALUE
_wrap_FieldListMap___hash__(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::StringList > *arg1 = (TagLib::Map< TagLib::String,TagLib::StringList > *) 0 ;
  VALUE result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::StringList > *","__hash__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::StringList > * >(argp1);
  result = (VALUE)TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg____hash__(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::ItemListMap

  Proxy of C++ TagLib::ItemListMap class


*/
swig_class cItemListMap;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_ItemListMap_allocate(VALUE self) {
#else
  VALUE
  _wrap_ItemListMap_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::ItemListMap.new

  call-seq:
    ItemListMap.new

Class constructor.

*/
VALUE
_wrap_new_ItemListMap(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::APE::Item > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::Map< TagLib::String,TagLib::APE::Item > *)new TagLib::Map< TagLib::String,TagLib::APE::Item >();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_Map_Sl_TagLib_String_Sc_TagLib_APE_Item_Sg_(TagLib::Map< TagLib::String,TagLib::APE::Item > *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::ItemListMap.insert

  call-seq:
    insert(?, ?) -> ItemListMap

Insert one or more new elements in the ItemListMap.
*/
VALUE
_wrap_ItemListMap_insert(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::APE::Item > *arg1 = (TagLib::Map< TagLib::String,TagLib::APE::Item > *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::APE::Item *arg3 = 0 ;
  TagLib::Map< TagLib::String,TagLib::APE::Item > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::APE::Item > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::APE::Item > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","insert", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","insert", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TagLib__APE__Item,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "TagLib::APE::Item const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::APE::Item const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< TagLib::APE::Item * >(argp3);
  {
    TagLib::Map< TagLib::String,TagLib::APE::Item > &_result_ref = (arg1)->insert((TagLib::String const &)*arg2,(TagLib::APE::Item const &)*arg3);
    result = (TagLib::Map< TagLib::String,TagLib::APE::Item > *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ItemListMap.clear

  call-seq:
    clear -> ItemListMap

An instance method.

*/
VALUE
_wrap_ItemListMap_clear(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::APE::Item > *arg1 = (TagLib::Map< TagLib::String,TagLib::APE::Item > *) 0 ;
  TagLib::Map< TagLib::String,TagLib::APE::Item > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::APE::Item > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::APE::Item > * >(argp1);
  {
    TagLib::Map< TagLib::String,TagLib::APE::Item > &_result_ref = (arg1)->clear();
    result = (TagLib::Map< TagLib::String,TagLib::APE::Item > *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ItemListMap.size

  call-seq:
    size -> uint

Size or Length of the ItemListMap.
*/
VALUE
_wrap_ItemListMap_size(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::APE::Item > *arg1 = (TagLib::Map< TagLib::String,TagLib::APE::Item > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::APE::Item > *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::APE::Item > * >(argp1);
  result = (uint)(arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ItemListMap.isEmpty

  call-seq:
    isEmpty -> bool

An instance method.

*/
VALUE
_wrap_ItemListMap_isEmpty(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::APE::Item > *arg1 = (TagLib::Map< TagLib::String,TagLib::APE::Item > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::APE::Item > *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::APE::Item > * >(argp1);
  result = (bool)(arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ItemListMap.contains

  call-seq:
    contains(String key) -> bool

An instance method.

*/
VALUE
_wrap_ItemListMap_contains(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::APE::Item > *arg1 = (TagLib::Map< TagLib::String,TagLib::APE::Item > *) 0 ;
  TagLib::String *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::APE::Item > *","contains", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::APE::Item > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","contains", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","contains", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  result = (bool)(arg1)->contains((TagLib::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ItemListMap.length

  call-seq:
    length -> uint

An instance method.

*/
VALUE
_wrap_ItemListMap___len__(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,TagLib::APE::Item > *arg1 = (TagLib::Map< TagLib::String,TagLib::APE::Item > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,TagLib::APE::Item > *","__len__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,TagLib::APE::Item > * >(argp1);
  result = (uint)TagLib_Map_Sl_TagLib_String_Sc_TagLib_APE_Item_Sg____len__(arg1);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::GenreMap

  Proxy of C++ TagLib::GenreMap class


*/
swig_class cGenreMap;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_GenreMap_allocate(VALUE self) {
#else
  VALUE
  _wrap_GenreMap_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::GenreMap.new

  call-seq:
    GenreMap.new

Class constructor.

*/
VALUE
_wrap_new_GenreMap(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,int > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::Map< TagLib::String,int > *)new TagLib::Map< TagLib::String,int >();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_Map_Sl_TagLib_String_Sc_int_Sg_(TagLib::Map< TagLib::String,int > *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::GenreMap.insert

  call-seq:
    insert(?, ?) -> GenreMap

Insert one or more new elements in the GenreMap.
*/
VALUE
_wrap_GenreMap_insert(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::String *arg2 = 0 ;
  int *arg3 = 0 ;
  TagLib::Map< TagLib::String,int > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,int > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","insert", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","insert", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","insert", 3, argv[1] ));
  } 
  temp3 = static_cast< int >(val3);
  arg3 = &temp3;
  {
    TagLib::Map< TagLib::String,int > &_result_ref = (arg1)->insert((TagLib::String const &)*arg2,(int const &)*arg3);
    result = (TagLib::Map< TagLib::String,int > *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::GenreMap.clear

  call-seq:
    clear -> GenreMap

An instance method.

*/
VALUE
_wrap_GenreMap_clear(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::Map< TagLib::String,int > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,int > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,int > * >(argp1);
  {
    TagLib::Map< TagLib::String,int > &_result_ref = (arg1)->clear();
    result = (TagLib::Map< TagLib::String,int > *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::GenreMap.size

  call-seq:
    size -> uint

Size or Length of the GenreMap.
*/
VALUE
_wrap_GenreMap_size(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,int > *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,int > * >(argp1);
  result = (uint)(arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::GenreMap.isEmpty

  call-seq:
    isEmpty -> bool

An instance method.

*/
VALUE
_wrap_GenreMap_isEmpty(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,int > *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,int > * >(argp1);
  result = (bool)(arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::GenreMap.contains

  call-seq:
    contains(String key) -> bool

An instance method.

*/
VALUE
_wrap_GenreMap_contains(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::String *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,int > *","contains", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","contains", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","contains", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  result = (bool)(arg1)->contains((TagLib::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::GenreMap.length

  call-seq:
    length -> uint

An instance method.

*/
VALUE
_wrap_GenreMap___len__(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,int > *","__len__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,int > * >(argp1);
  result = (uint)TagLib_Map_Sl_TagLib_String_Sc_int_Sg____len__(arg1);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::GenreMap.[]

  call-seq:
    [](item) -> VALUE

Element accessor/slicing.
*/
VALUE
_wrap_GenreMap___getitem__(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  TagLib::String *arg2 = 0 ;
  VALUE result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,int > *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,int > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String &","__getitem__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String &","__getitem__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  result = (VALUE)TagLib_Map_Sl_TagLib_String_Sc_int_Sg____getitem__(arg1,*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::GenreMap.hash

  call-seq:
    hash -> VALUE

An instance method.

*/
VALUE
_wrap_GenreMap___hash__(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::String,int > *arg1 = (TagLib::Map< TagLib::String,int > *) 0 ;
  VALUE result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::String,int > *","__hash__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::String,int > * >(argp1);
  result = (VALUE)TagLib_Map_Sl_TagLib_String_Sc_int_Sg____hash__(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::FrameListMap

  Proxy of C++ TagLib::FrameListMap class


*/
swig_class cFrameListMap;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_FrameListMap_allocate(VALUE self) {
#else
  VALUE
  _wrap_FrameListMap_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::FrameListMap.new

  call-seq:
    FrameListMap.new

Class constructor.

*/
VALUE
_wrap_new_FrameListMap(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *)new TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList >();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg_(TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::FrameListMap.insert

  call-seq:
    insert(?, ?) -> FrameListMap

Insert one or more new elements in the FrameListMap.
*/
VALUE
_wrap_FrameListMap_insert(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  TagLib::ID3v2::FrameList *arg3 = 0 ;
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TagLib__ListT_Frame_p_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameList const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::ID3v2::FrameList const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< TagLib::ID3v2::FrameList * >(argp3);
  {
    TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > &_result_ref = (arg1)->insert((TagLib::ByteVector const &)*arg2,(TagLib::ID3v2::FrameList const &)*arg3);
    result = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FrameListMap.clear

  call-seq:
    clear -> FrameListMap

An instance method.

*/
VALUE
_wrap_FrameListMap_clear(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > * >(argp1);
  {
    TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > &_result_ref = (arg1)->clear();
    result = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FrameListMap.size

  call-seq:
    size -> uint

Size or Length of the FrameListMap.
*/
VALUE
_wrap_FrameListMap_size(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > * >(argp1);
  result = (uint)(arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FrameListMap.isEmpty

  call-seq:
    isEmpty -> bool

An instance method.

*/
VALUE
_wrap_FrameListMap_isEmpty(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > * >(argp1);
  result = (bool)(arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FrameListMap.contains

  call-seq:
    contains(ByteVector key) -> bool

An instance method.

*/
VALUE
_wrap_FrameListMap_contains(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *","contains", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  result = (bool)(arg1)->contains((TagLib::ByteVector const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FrameListMap.length

  call-seq:
    length -> uint

An instance method.

*/
VALUE
_wrap_FrameListMap___len__(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *","__len__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > * >(argp1);
  result = (uint)TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____len__(arg1);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FrameListMap.[]

  call-seq:
    [](item) -> VALUE

Element accessor/slicing.
*/
VALUE
_wrap_FrameListMap___getitem__(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  VALUE result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  result = (VALUE)TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____getitem__(arg1,*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FrameListMap.hash

  call-seq:
    hash -> VALUE

An instance method.

*/
VALUE
_wrap_FrameListMap___hash__(int argc, VALUE *argv, VALUE self) {
  TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *arg1 = (TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *) 0 ;
  VALUE result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *","__hash__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > * >(argp1);
  result = (VALUE)TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg____hash__(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::StringList

  Proxy of C++ TagLib::StringList class


*/
swig_class cStringList;


/*
  Document-method: TagLib::StringList.new

  call-seq:
    StringList.new
    StringList.new(StringList l)

Class constructor.

*/
VALUE
_wrap_new_StringList__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::String > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::List< TagLib::String > *)new TagLib::List< TagLib::String >();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_StringList_allocate(VALUE self) {
#else
  VALUE
  _wrap_StringList_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ListT_TagLib__String_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_StringList__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::String > *arg1 = 0 ;
  TagLib::List< TagLib::String > *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_TagLib__ListT_TagLib__String_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::String > const &","TagLib::List<(TagLib::String)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::List< TagLib::String > const &","TagLib::List<(TagLib::String)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::String > * >(argp1);
  result = (TagLib::List< TagLib::String > *)new TagLib::List< TagLib::String >((TagLib::List< TagLib::String > const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_StringList(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_StringList__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ListT_TagLib__String_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringList__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "StringList.new", 
    "    StringList.new()\n"
    "    StringList.new(TagLib::List< TagLib::String > const &l)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_List_Sl_TagLib_String_Sg_(TagLib::List< TagLib::String > *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::StringList.size

  call-seq:
    size -> uint

Size or Length of the StringList.
*/
VALUE
_wrap_StringList_size(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ListT_TagLib__String_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::String > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::String > * >(argp1);
  result = (uint)((TagLib::List< TagLib::String > const *)arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::StringList.isEmpty

  call-seq:
    isEmpty -> bool

An instance method.

*/
VALUE
_wrap_StringList_isEmpty(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ListT_TagLib__String_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::String > const *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::String > * >(argp1);
  result = (bool)((TagLib::List< TagLib::String > const *)arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::StringList.contains

  call-seq:
    contains(String value) -> bool

An instance method.

*/
VALUE
_wrap_StringList_contains(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::String > *arg1 = (TagLib::List< TagLib::String > *) 0 ;
  TagLib::String *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ListT_TagLib__String_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::String > const *","contains", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::String > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","contains", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","contains", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  result = (bool)((TagLib::List< TagLib::String > const *)arg1)->contains((TagLib::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::ByteVectorList

  Proxy of C++ TagLib::ByteVectorList class


*/
swig_class cByteVectorList;


/*
  Document-method: TagLib::ByteVectorList.new

  call-seq:
    ByteVectorList.new
    ByteVectorList.new(ByteVectorList l)

Class constructor.

*/
VALUE
_wrap_new_ByteVectorList__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::List< TagLib::ByteVector > *)new TagLib::List< TagLib::ByteVector >();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_ByteVectorList_allocate(VALUE self) {
#else
  VALUE
  _wrap_ByteVectorList_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ListT_TagLib__ByteVector_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_ByteVectorList__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::ByteVector > *arg1 = 0 ;
  TagLib::List< TagLib::ByteVector > *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_TagLib__ListT_TagLib__ByteVector_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::ByteVector > const &","TagLib::List<(TagLib::ByteVector)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::List< TagLib::ByteVector > const &","TagLib::List<(TagLib::ByteVector)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::ByteVector > * >(argp1);
  result = (TagLib::List< TagLib::ByteVector > *)new TagLib::List< TagLib::ByteVector >((TagLib::List< TagLib::ByteVector > const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_ByteVectorList(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ByteVectorList__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ListT_TagLib__ByteVector_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ByteVectorList__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "ByteVectorList.new", 
    "    ByteVectorList.new()\n"
    "    ByteVectorList.new(TagLib::List< TagLib::ByteVector > const &l)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_List_Sl_TagLib_ByteVector_Sg_(TagLib::List< TagLib::ByteVector > *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::ByteVectorList.size

  call-seq:
    size -> uint

Size or Length of the ByteVectorList.
*/
VALUE
_wrap_ByteVectorList_size(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ListT_TagLib__ByteVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::ByteVector > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::ByteVector > * >(argp1);
  result = (uint)((TagLib::List< TagLib::ByteVector > const *)arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ByteVectorList.isEmpty

  call-seq:
    isEmpty -> bool

An instance method.

*/
VALUE
_wrap_ByteVectorList_isEmpty(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ListT_TagLib__ByteVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::ByteVector > const *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::ByteVector > * >(argp1);
  result = (bool)((TagLib::List< TagLib::ByteVector > const *)arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ByteVectorList.contains

  call-seq:
    contains(ByteVector value) -> bool

An instance method.

*/
VALUE
_wrap_ByteVectorList_contains(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::ByteVector > *arg1 = (TagLib::List< TagLib::ByteVector > *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ListT_TagLib__ByteVector_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::ByteVector > const *","contains", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::ByteVector > * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  result = (bool)((TagLib::List< TagLib::ByteVector > const *)arg1)->contains((TagLib::ByteVector const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::FrameList

  Proxy of C++ TagLib::FrameList class


*/
swig_class cFrameList;


/*
  Document-method: TagLib::FrameList.new

  call-seq:
    FrameList.new
    FrameList.new(FrameList l)

Class constructor.

*/
VALUE
_wrap_new_FrameList__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::List< TagLib::ID3v2::Frame * > *)new TagLib::List< TagLib::ID3v2::Frame * >();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_FrameList_allocate(VALUE self) {
#else
  VALUE
  _wrap_FrameList_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_FrameList__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = 0 ;
  TagLib::List< TagLib::ID3v2::Frame * > *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::ID3v2::Frame * > const &","TagLib::List<(p.TagLib::ID3v2::Frame)>", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::List< TagLib::ID3v2::Frame * > const &","TagLib::List<(p.TagLib::ID3v2::Frame)>", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::ID3v2::Frame * > * >(argp1);
  result = (TagLib::List< TagLib::ID3v2::Frame * > *)new TagLib::List< TagLib::ID3v2::Frame * >((TagLib::List< TagLib::ID3v2::Frame * > const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_FrameList(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_FrameList__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FrameList__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "FrameList.new", 
    "    FrameList.new()\n"
    "    FrameList.new(TagLib::List< TagLib::ID3v2::Frame * > const &l)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg_(TagLib::List< TagLib::ID3v2::Frame * > *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::FrameList.size

  call-seq:
    size -> uint

Size or Length of the FrameList.
*/
VALUE
_wrap_FrameList_size(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::ID3v2::Frame * > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::ID3v2::Frame * > * >(argp1);
  result = (uint)((TagLib::List< TagLib::ID3v2::Frame * > const *)arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FrameList.isEmpty

  call-seq:
    isEmpty -> bool

An instance method.

*/
VALUE
_wrap_FrameList_isEmpty(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::ID3v2::Frame * > const *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::ID3v2::Frame * > * >(argp1);
  result = (bool)((TagLib::List< TagLib::ID3v2::Frame * > const *)arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FrameList.contains

  call-seq:
    contains(ID3v2_Frame value) -> bool

An instance method.

*/
VALUE
_wrap_FrameList_contains(int argc, VALUE *argv, VALUE self) {
  TagLib::List< TagLib::ID3v2::Frame * > *arg1 = (TagLib::List< TagLib::ID3v2::Frame * > *) 0 ;
  TagLib::ID3v2::Frame **arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  TagLib::ID3v2::Frame *temp2 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::List< TagLib::ID3v2::Frame * > const *","contains", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::List< TagLib::ID3v2::Frame * > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","contains", 2, argv[0] )); 
  }
  temp2 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp2);
  arg2 = &temp2;
  result = (bool)((TagLib::List< TagLib::ID3v2::Frame * > const *)arg1)->contains((TagLib::ID3v2::Frame *const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::FileRef

  Proxy of C++ TagLib::FileRef class


*/
swig_class cFileRef;


/*
  Document-method: TagLib::FileRef.defaultFileExtensions

  call-seq:
    defaultFileExtensions

A class method.

*/
VALUE
_wrap_FileRef_defaultFileExtensions(int argc, VALUE *argv, VALUE self) {
  TagLib::StringList result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = TagLib::FileRef::defaultFileExtensions();
  {
    vresult=StringList2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FileRef.new

  call-seq:
    FileRef.new(FileName fileName, bool readAudioProperties=true, ReadStyle audioPropertiesStyle=Average)
    FileRef.new(FileName fileName, bool readAudioProperties=true)
    FileRef.new(FileName fileName)

Class constructor.

*/
VALUE
_wrap_new_FileRef__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::FileRef *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::FileRef", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::FileRef", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::AudioProperties::ReadStyle","TagLib::FileRef", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::AudioProperties::ReadStyle >(val3);
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE
_wrap_new_FileRef__SWIG_1(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::FileRef *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::FileRef", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::FileRef", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_FileRef_allocate(VALUE self) {
#else
  VALUE
  _wrap_FileRef_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__FileRef);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_FileRef__SWIG_2(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::FileRef *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::FileRef", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_FileRef(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileRef__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FileRef__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FileRef__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "FileRef.new", 
    "    FileRef.new(FileName fileName, bool readAudioProperties, TagLib::AudioProperties::ReadStyle audioPropertiesStyle)\n"
    "    FileRef.new(FileName fileName, bool readAudioProperties)\n"
    "    FileRef.new(FileName fileName)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_FileRef(TagLib::FileRef *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::FileRef.tag

  call-seq:
    tag -> Tag

An instance method.

*/
VALUE
_wrap_FileRef_tag(int argc, VALUE *argv, VALUE self) {
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  TagLib::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FileRef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FileRef *","tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FileRef * >(argp1);
  result = (TagLib::Tag *)(arg1)->tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FileRef.audioProperties

  call-seq:
    audioProperties -> AudioProperties

An instance method.

*/
VALUE
_wrap_FileRef_audioProperties(int argc, VALUE *argv, VALUE self) {
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  TagLib::AudioProperties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FileRef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FileRef *","audioProperties", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FileRef * >(argp1);
  result = (TagLib::AudioProperties *)(arg1)->audioProperties();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__AudioProperties, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FileRef.file

  call-seq:
    file -> File

An instance method.

*/
VALUE
_wrap_FileRef_file(int argc, VALUE *argv, VALUE self) {
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  TagLib::File *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FileRef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FileRef *","file", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FileRef * >(argp1);
  result = (TagLib::File *)(arg1)->file();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__File, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FileRef.save

  call-seq:
    save -> bool

An instance method.

*/
VALUE
_wrap_FileRef_save(int argc, VALUE *argv, VALUE self) {
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FileRef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FileRef *","save", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FileRef * >(argp1);
  result = (bool)(arg1)->save();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FileRef.isNull

  call-seq:
    isNull -> bool

An instance method.

*/
VALUE
_wrap_FileRef_isNull(int argc, VALUE *argv, VALUE self) {
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FileRef, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FileRef *","isNull", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FileRef * >(argp1);
  result = (bool)(arg1)->isNull();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::APE_Footer

  Proxy of C++ TagLib::APE_Footer class


*/
swig_class cAPE_Footer;


/*
  Document-method: TagLib::APE_Footer.new

  call-seq:
    APE_Footer.new
    APE_Footer.new(ByteVector data)

Class constructor.

*/
VALUE
_wrap_new_APE_Footer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::APE::Footer *)new TagLib::APE::Footer();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_APE_Footer_allocate(VALUE self) {
#else
  VALUE
  _wrap_APE_Footer_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__APE__Footer);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::APE_Footer.new

  call-seq:
    APE_Footer.new()
    APE_Footer.new(ByteVector data)

Class constructor.

*/
VALUE
_wrap_new_APE_Footer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::APE::Footer *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  result = (TagLib::APE::Footer *)new TagLib::APE::Footer((TagLib::ByteVector const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_APE_Footer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_APE_Footer__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_APE_Footer__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Footer.new", 
    "    Footer.new()\n"
    "    Footer.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_APE_Footer(TagLib::APE::Footer *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::APE_Footer.version

  call-seq:
    version -> uint

An instance method.

*/
VALUE
_wrap_APE_Footer_version(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer const *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  result = (uint)((TagLib::APE::Footer const *)arg1)->version();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.headerPresent

  call-seq:
    headerPresent -> bool

An instance method.

*/
VALUE
_wrap_APE_Footer_headerPresent(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer const *","headerPresent", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  result = (bool)((TagLib::APE::Footer const *)arg1)->headerPresent();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.footerPresent

  call-seq:
    footerPresent -> bool

An instance method.

*/
VALUE
_wrap_APE_Footer_footerPresent(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer const *","footerPresent", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  result = (bool)((TagLib::APE::Footer const *)arg1)->footerPresent();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.isHeader

  call-seq:
    isHeader -> bool

An instance method.

*/
VALUE
_wrap_APE_Footer_isHeader(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer const *","isHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  result = (bool)((TagLib::APE::Footer const *)arg1)->isHeader();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.setHeaderPresent

  call-seq:
    setHeaderPresent(bool b)

An instance method.

*/
VALUE
_wrap_APE_Footer_setHeaderPresent(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer const *","setHeaderPresent", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","setHeaderPresent", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  ((TagLib::APE::Footer const *)arg1)->setHeaderPresent(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.itemCount

  call-seq:
    itemCount -> uint

An instance method.

*/
VALUE
_wrap_APE_Footer_itemCount(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer const *","itemCount", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  result = (uint)((TagLib::APE::Footer const *)arg1)->itemCount();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.setItemCount

  call-seq:
    setItemCount(uint s)

An instance method.

*/
VALUE
_wrap_APE_Footer_setItemCount(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer *","setItemCount", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint","setItemCount", 2, argv[0] ));
  } 
  arg2 = static_cast< uint >(val2);
  (arg1)->setItemCount(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.tagSize

  call-seq:
    tagSize -> uint

An instance method.

*/
VALUE
_wrap_APE_Footer_tagSize(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer const *","tagSize", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  result = (uint)((TagLib::APE::Footer const *)arg1)->tagSize();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.completeTagSize

  call-seq:
    completeTagSize -> uint

An instance method.

*/
VALUE
_wrap_APE_Footer_completeTagSize(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer const *","completeTagSize", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  result = (uint)((TagLib::APE::Footer const *)arg1)->completeTagSize();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.setTagSize

  call-seq:
    setTagSize(uint s)

An instance method.

*/
VALUE
_wrap_APE_Footer_setTagSize(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer *","setTagSize", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint","setTagSize", 2, argv[0] ));
  } 
  arg2 = static_cast< uint >(val2);
  (arg1)->setTagSize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.setData

  call-seq:
    setData(ByteVector data)

An instance method.

*/
VALUE
_wrap_APE_Footer_setData(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer *","setData", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  (arg1)->setData((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.renderFooter

  call-seq:
    renderFooter -> ByteVector

An instance method.

*/
VALUE
_wrap_APE_Footer_renderFooter(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer const *","renderFooter", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  result = ((TagLib::APE::Footer const *)arg1)->renderFooter();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Footer.renderHeader

  call-seq:
    renderHeader -> ByteVector

An instance method.

*/
VALUE
_wrap_APE_Footer_renderHeader(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Footer *arg1 = (TagLib::APE::Footer *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Footer const *","renderHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Footer * >(argp1);
  result = ((TagLib::APE::Footer const *)arg1)->renderHeader();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::APE_Item

  Proxy of C++ TagLib::APE_Item class


*/
swig_class cAPE_Item;


/*
  Document-method: TagLib::ItemTypes.Text

  call-seq:
    Text -> int

A class method.

*/

/*
  Document-method: TagLib::ItemTypes.Binary

  call-seq:
    Binary -> int

A class method.

*/

/*
  Document-method: TagLib::ItemTypes.Locator

  call-seq:
    Locator -> int

A class method.

*/

/*
  Document-method: TagLib::APE_Item.new

  call-seq:
    APE_Item.new
    APE_Item.new(String key, String value)
    APE_Item.new(String key,  values)
    APE_Item.new(APE_Item item)

Class constructor.

*/
VALUE
_wrap_new_APE_Item__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::APE::Item *)new TagLib::APE::Item();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.new

  call-seq:
    APE_Item.new()
    APE_Item.new(String key, String value)
    APE_Item.new(String key,  values)
    APE_Item.new(APE_Item item)

Class constructor.

*/
VALUE
_wrap_new_APE_Item__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::APE::Item *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::String const &","TagLib::APE::Item", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","TagLib::APE::Item", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< TagLib::String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","TagLib::APE::Item", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","TagLib::APE::Item", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  result = (TagLib::APE::Item *)new TagLib::APE::Item((TagLib::String const &)*arg1,(TagLib::String const &)*arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE
_wrap_new_APE_Item__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  TagLib::StringList *arg2 = 0 ;
  TagLib::APE::Item *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::String const &","TagLib::APE::Item", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","TagLib::APE::Item", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< TagLib::String * >(argp1);
  {
    TagLib::StringList *sl=new TagLib::StringList();
    for(long i=0;i<RARRAY_LEN(argv[1]);i++) {
      SafeStringValue(RARRAY_PTR(argv[1])[i]);
      TagLib::String ntl=TagLib::String(StringValuePtr(RARRAY_PTR(argv[1])[i]));
      sl->append(ntl);
    }
    arg2=sl;
  }
  result = (TagLib::APE::Item *)new TagLib::APE::Item((TagLib::String const &)*arg1,(TagLib::StringList const &)*arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_APE_Item_allocate(VALUE self) {
#else
  VALUE
  _wrap_APE_Item_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__APE__Item);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_APE_Item__SWIG_3(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = 0 ;
  TagLib::APE::Item *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_TagLib__APE__Item,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const &","TagLib::APE::Item", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::APE::Item const &","TagLib::APE::Item", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = (TagLib::APE::Item *)new TagLib::APE::Item((TagLib::APE::Item const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_APE_Item(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_APE_Item__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__APE__Item, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_APE_Item__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ListT_TagLib__String_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_APE_Item__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_APE_Item__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Item.new", 
    "    Item.new()\n"
    "    Item.new(TagLib::String const &key, TagLib::String const &value)\n"
    "    Item.new(TagLib::String const &key, TagLib::StringList const &values)\n"
    "    Item.new(TagLib::APE::Item const &item)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_APE_Item(TagLib::APE::Item *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::APE_Item.key

  call-seq:
    key -> String

An instance method.

*/
VALUE
_wrap_APE_Item_key(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const *","key", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = ((TagLib::APE::Item const *)arg1)->key();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.value

  call-seq:
    value -> ByteVector

An instance method.

*/
VALUE
_wrap_APE_Item_value(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = ((TagLib::APE::Item const *)arg1)->value();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.setKey

  call-seq:
    setKey(String key)

An instance method.

*/
VALUE
_wrap_APE_Item_setKey(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item *","setKey", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setKey", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setKey", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setKey((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.setValue

  call-seq:
    setValue(String value)

An instance method.

*/
VALUE
_wrap_APE_Item_setValue(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setValue", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setValue", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setValue((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.setValues

  call-seq:
    setValues( values)

An instance method.

*/
VALUE
_wrap_APE_Item_setValues(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item *","setValues", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  {
    TagLib::StringList *sl=new TagLib::StringList();
    for(long i=0;i<RARRAY_LEN(argv[0]);i++) {
      SafeStringValue(RARRAY_PTR(argv[0])[i]);
      TagLib::String ntl=TagLib::String(StringValuePtr(RARRAY_PTR(argv[0])[i]));
      sl->append(ntl);
    }
    arg2=sl;
  }
  (arg1)->setValues((TagLib::StringList const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.appendValue

  call-seq:
    appendValue(String value)

An instance method.

*/
VALUE
_wrap_APE_Item_appendValue(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item *","appendValue", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","appendValue", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","appendValue", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->appendValue((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.appendValues

  call-seq:
    appendValues( values)

An instance method.

*/
VALUE
_wrap_APE_Item_appendValues(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item *","appendValues", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  {
    TagLib::StringList *sl=new TagLib::StringList();
    for(long i=0;i<RARRAY_LEN(argv[0]);i++) {
      SafeStringValue(RARRAY_PTR(argv[0])[i]);
      TagLib::String ntl=TagLib::String(StringValuePtr(RARRAY_PTR(argv[0])[i]));
      sl->append(ntl);
    }
    arg2=sl;
  }
  (arg1)->appendValues((TagLib::StringList const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.size

  call-seq:
    size -> int

Size or Length of the APE_Item.
*/
VALUE
_wrap_APE_Item_size(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = (int)((TagLib::APE::Item const *)arg1)->size();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.toString

  call-seq:
    toString -> String

An instance method.

*/
VALUE
_wrap_APE_Item_toString(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = ((TagLib::APE::Item const *)arg1)->toString();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.toStringList

  call-seq:
    toStringList

An instance method.

*/
VALUE
_wrap_APE_Item_toStringList(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::StringList result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const *","toStringList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = ((TagLib::APE::Item const *)arg1)->toStringList();
  {
    vresult=StringList2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.values

  call-seq:
    values

Return an Array of value elements.
*/
VALUE
_wrap_APE_Item_values(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::StringList result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const *","values", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = ((TagLib::APE::Item const *)arg1)->values();
  {
    vresult=StringList2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.render

  call-seq:
    render -> ByteVector

An instance method.

*/
VALUE
_wrap_APE_Item_render(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const *","render", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = ((TagLib::APE::Item const *)arg1)->render();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.parse

  call-seq:
    parse(ByteVector data)

An instance method.

*/
VALUE
_wrap_APE_Item_parse(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item *","parse", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  (arg1)->parse((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.setReadOnly

  call-seq:
    setReadOnly(bool readOnly)

An instance method.

*/
VALUE
_wrap_APE_Item_setReadOnly(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item *","setReadOnly", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","setReadOnly", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setReadOnly(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.isReadOnly

  call-seq:
    isReadOnly -> bool

An instance method.

*/
VALUE
_wrap_APE_Item_isReadOnly(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const *","isReadOnly", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = (bool)((TagLib::APE::Item const *)arg1)->isReadOnly();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.setType

  call-seq:
    setType(ItemTypes type)

An instance method.

*/
VALUE
_wrap_APE_Item_setType(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::APE::Item::ItemTypes arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item *","setType", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::APE::Item::ItemTypes","setType", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::APE::Item::ItemTypes >(val2);
  (arg1)->setType(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.type

  call-seq:
    type -> int

An instance method.

*/
VALUE
_wrap_APE_Item_type(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  TagLib::APE::Item::ItemTypes result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = (TagLib::APE::Item::ItemTypes)((TagLib::APE::Item const *)arg1)->type();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Item.isEmpty

  call-seq:
    isEmpty -> bool

An instance method.

*/
VALUE
_wrap_APE_Item_isEmpty(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Item *arg1 = (TagLib::APE::Item *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Item, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Item const *","isEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Item * >(argp1);
  result = (bool)((TagLib::APE::Item const *)arg1)->isEmpty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::APE_Tag < TagLib::TagLib::Tag

  Proxy of C++ TagLib::APE_Tag class


*/
swig_class cAPE_Tag;


/*
  Document-method: TagLib::APE_Tag.new

  call-seq:
    APE_Tag.new
    APE_Tag.new(File file, long footerLocation)

Class constructor.

*/
VALUE
_wrap_new_APE_Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Tag *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::APE::Tag *)new TagLib::APE::Tag();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_APE_Tag_allocate(VALUE self) {
#else
  VALUE
  _wrap_APE_Tag_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__APE__Tag);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::APE_Tag.new

  call-seq:
    APE_Tag.new()
    APE_Tag.new(File file, long footerLocation)

Class constructor.

*/
VALUE
_wrap_new_APE_Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  TagLib::APE::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","TagLib::APE::Tag", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::APE::Tag", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (TagLib::APE::Tag *)new TagLib::APE::Tag(arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_APE_Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_APE_Tag__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_APE_Tag__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Tag.new", 
    "    Tag.new()\n"
    "    Tag.new(TagLib::File *file, long footerLocation)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::APE_Tag.render

  call-seq:
    render -> ByteVector

An instance method.

*/
VALUE
_wrap_APE_Tag_render(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Tag *","render", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Tag * >(argp1);
  result = (arg1)->render();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_APE_Tag(TagLib::APE::Tag *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::APE_Tag.footer

  call-seq:
    footer -> APE_Footer

An instance method.

*/
VALUE
_wrap_APE_Tag_footer(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::APE::Footer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Tag const *","footer", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Tag * >(argp1);
  result = (TagLib::APE::Footer *)((TagLib::APE::Tag const *)arg1)->footer();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__APE__Footer, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Tag.itemListMap

  call-seq:
    itemListMap -> ItemListMap

An instance method.

*/
VALUE
_wrap_APE_Tag_itemListMap(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::APE::ItemListMap *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Tag const *","itemListMap", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Tag * >(argp1);
  {
    TagLib::APE::ItemListMap const &_result_ref = ((TagLib::APE::Tag const *)arg1)->itemListMap();
    result = (TagLib::APE::ItemListMap *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Tag.removeItem

  call-seq:
    removeItem(String key)

An instance method.

*/
VALUE
_wrap_APE_Tag_removeItem(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Tag *","removeItem", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","removeItem", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","removeItem", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->removeItem((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::APE_Tag.addValue

  call-seq:
    addValue(String key, String value, bool replace=true)
    addValue(String key, String value)

An instance method.

*/
VALUE
_wrap_APE_Tag_addValue__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::String *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Tag *","addValue", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","addValue", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","addValue", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "TagLib::String const &","addValue", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","addValue", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< TagLib::String * >(argp3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","addValue", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->addValue((TagLib::String const &)*arg2,(TagLib::String const &)*arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_APE_Tag_addValue__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Tag *","addValue", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","addValue", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","addValue", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "TagLib::String const &","addValue", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","addValue", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< TagLib::String * >(argp3);
  (arg1)->addValue((TagLib::String const &)*arg2,(TagLib::String const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


VALUE _wrap_APE_Tag_addValue(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__APE__Tag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TagLib__String, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_APE_Tag_addValue__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__APE__Tag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TagLib__String, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_APE_Tag_addValue__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "APE_Tag.addValue", 
    "    void APE_Tag.addValue(TagLib::String const &key, TagLib::String const &value, bool replace)\n"
    "    void APE_Tag.addValue(TagLib::String const &key, TagLib::String const &value)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::APE_Tag.setItem

  call-seq:
    setItem(String key, APE_Item item)

An instance method.

*/
VALUE
_wrap_APE_Tag_setItem(int argc, VALUE *argv, VALUE self) {
  TagLib::APE::Tag *arg1 = (TagLib::APE::Tag *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::APE::Item *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::APE::Tag *","setItem", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::APE::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setItem", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setItem", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TagLib__APE__Item,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "TagLib::APE::Item const &","setItem", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::APE::Item const &","setItem", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< TagLib::APE::Item * >(argp3);
  (arg1)->setItem((TagLib::String const &)*arg2,(TagLib::APE::Item const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::Ogg_PageHeader

  Proxy of C++ TagLib::Ogg_PageHeader class


*/
swig_class cOgg_PageHeader;


/*
  Document-method: TagLib::Ogg_PageHeader.new

  call-seq:
    Ogg_PageHeader.new(Ogg_File file=0, long pageOffset=-1)
    Ogg_PageHeader.new(Ogg_File file=0)
    Ogg_PageHeader.new

Class constructor.

*/
VALUE
_wrap_new_Ogg_PageHeader__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  long arg2 ;
  TagLib::Ogg::PageHeader *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__Ogg__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::File *","TagLib::Ogg::PageHeader", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::File * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::Ogg::PageHeader", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (TagLib::Ogg::PageHeader *)new TagLib::Ogg::PageHeader(arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.new

  call-seq:
    Ogg_PageHeader.new(Ogg_File file=0, long pageOffset=-1)
    Ogg_PageHeader.new(Ogg_File file=0)
    Ogg_PageHeader.new()

Class constructor.

*/
VALUE
_wrap_new_Ogg_PageHeader__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  TagLib::Ogg::PageHeader *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__Ogg__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::File *","TagLib::Ogg::PageHeader", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::File * >(argp1);
  result = (TagLib::Ogg::PageHeader *)new TagLib::Ogg::PageHeader(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_Ogg_PageHeader_allocate(VALUE self) {
#else
  VALUE
  _wrap_Ogg_PageHeader_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__Ogg__PageHeader);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_Ogg_PageHeader__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::Ogg::PageHeader *)new TagLib::Ogg::PageHeader();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_Ogg_PageHeader(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Ogg_PageHeader__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__Ogg__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ogg_PageHeader__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__Ogg__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Ogg_PageHeader__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "PageHeader.new", 
    "    PageHeader.new(TagLib::Ogg::File *file, long pageOffset)\n"
    "    PageHeader.new(TagLib::Ogg::File *file)\n"
    "    PageHeader.new()\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_Ogg_PageHeader(TagLib::Ogg::PageHeader *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::Ogg_PageHeader.isValid

  call-seq:
    isValid -> bool

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_isValid(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","isValid", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = (bool)((TagLib::Ogg::PageHeader const *)arg1)->isValid();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.packetSizes

  call-seq:
    packetSizes -> TagLib::List<(int)>

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_packetSizes(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  SwigValueWrapper< TagLib::List< int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","packetSizes", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = ((TagLib::Ogg::PageHeader const *)arg1)->packetSizes();
  vresult = SWIG_NewPointerObj((new TagLib::List< int >(static_cast< const TagLib::List< int >& >(result))), SWIGTYPE_p_TagLib__ListT_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.setPacketSizes

  call-seq:
    setPacketSizes(TagLib::List<(int)> sizes)

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_setPacketSizes(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  TagLib::List< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader *","setPacketSizes", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__ListT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::List< int > const &","setPacketSizes", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::List< int > const &","setPacketSizes", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::List< int > * >(argp2);
  (arg1)->setPacketSizes((TagLib::List< int > const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.firstPacketContinued

  call-seq:
    firstPacketContinued -> bool

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_firstPacketContinued(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","firstPacketContinued", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = (bool)((TagLib::Ogg::PageHeader const *)arg1)->firstPacketContinued();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.setFirstPacketContinued

  call-seq:
    setFirstPacketContinued(bool continued)

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_setFirstPacketContinued(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader *","setFirstPacketContinued", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","setFirstPacketContinued", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setFirstPacketContinued(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.lastPacketCompleted

  call-seq:
    lastPacketCompleted -> bool

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_lastPacketCompleted(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","lastPacketCompleted", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = (bool)((TagLib::Ogg::PageHeader const *)arg1)->lastPacketCompleted();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.setLastPacketCompleted

  call-seq:
    setLastPacketCompleted(bool completed)

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_setLastPacketCompleted(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader *","setLastPacketCompleted", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","setLastPacketCompleted", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setLastPacketCompleted(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.firstPageOfStream

  call-seq:
    firstPageOfStream -> bool

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_firstPageOfStream(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","firstPageOfStream", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = (bool)((TagLib::Ogg::PageHeader const *)arg1)->firstPageOfStream();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.setFirstPageOfStream

  call-seq:
    setFirstPageOfStream(bool first)

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_setFirstPageOfStream(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader *","setFirstPageOfStream", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","setFirstPageOfStream", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setFirstPageOfStream(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.lastPageOfStream

  call-seq:
    lastPageOfStream -> bool

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_lastPageOfStream(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","lastPageOfStream", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = (bool)((TagLib::Ogg::PageHeader const *)arg1)->lastPageOfStream();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.setLastPageOfStream

  call-seq:
    setLastPageOfStream(bool last)

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_setLastPageOfStream(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader *","setLastPageOfStream", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","setLastPageOfStream", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setLastPageOfStream(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.absoluteGranularPosition

  call-seq:
    absoluteGranularPosition -> long long

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_absoluteGranularPosition(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  long long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","absoluteGranularPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = (long long)((TagLib::Ogg::PageHeader const *)arg1)->absoluteGranularPosition();
  vresult = SWIG_From_long_SS_long(static_cast< long long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.setAbsoluteGranularPosition

  call-seq:
    setAbsoluteGranularPosition(long long agp)

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_setAbsoluteGranularPosition(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader *","setAbsoluteGranularPosition", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long long","setAbsoluteGranularPosition", 2, argv[0] ));
  } 
  arg2 = static_cast< long long >(val2);
  (arg1)->setAbsoluteGranularPosition(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.streamSerialNumber

  call-seq:
    streamSerialNumber -> uint

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_streamSerialNumber(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","streamSerialNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = (uint)((TagLib::Ogg::PageHeader const *)arg1)->streamSerialNumber();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.setStreamSerialNumber

  call-seq:
    setStreamSerialNumber(uint n)

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_setStreamSerialNumber(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader *","setStreamSerialNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint","setStreamSerialNumber", 2, argv[0] ));
  } 
  arg2 = static_cast< uint >(val2);
  (arg1)->setStreamSerialNumber(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.pageSequenceNumber

  call-seq:
    pageSequenceNumber -> int

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_pageSequenceNumber(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","pageSequenceNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = (int)((TagLib::Ogg::PageHeader const *)arg1)->pageSequenceNumber();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.setPageSequenceNumber

  call-seq:
    setPageSequenceNumber(int sequenceNumber)

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_setPageSequenceNumber(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader *","setPageSequenceNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","setPageSequenceNumber", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setPageSequenceNumber(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.size

  call-seq:
    size -> int

Size or Length of the Ogg_PageHeader.
*/
VALUE
_wrap_Ogg_PageHeader_size(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = (int)((TagLib::Ogg::PageHeader const *)arg1)->size();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.dataSize

  call-seq:
    dataSize -> int

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_dataSize(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","dataSize", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = (int)((TagLib::Ogg::PageHeader const *)arg1)->dataSize();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_PageHeader.render

  call-seq:
    render -> ByteVector

An instance method.

*/
VALUE
_wrap_Ogg_PageHeader_render(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::PageHeader *arg1 = (TagLib::Ogg::PageHeader *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::PageHeader const *","render", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::PageHeader * >(argp1);
  result = ((TagLib::Ogg::PageHeader const *)arg1)->render();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::Ogg_Page

  Proxy of C++ TagLib::Ogg_Page class


*/
swig_class cOgg_Page;


/*
  Document-method: TagLib::ContainsPacketFlags.DoesNotContainPacket

  call-seq:
    DoesNotContainPacket -> int

A class method.

*/

/*
  Document-method: TagLib::ContainsPacketFlags.CompletePacket

  call-seq:
    CompletePacket -> int

A class method.

*/

/*
  Document-method: TagLib::ContainsPacketFlags.BeginsWithPacket

  call-seq:
    BeginsWithPacket -> int

A class method.

*/

/*
  Document-method: TagLib::ContainsPacketFlags.EndsWithPacket

  call-seq:
    EndsWithPacket -> int

A class method.

*/

/*
  Document-method: TagLib::PaginationStrategy.SinglePagePerGroup

  call-seq:
    SinglePagePerGroup -> int

A class method.

*/

/*
  Document-method: TagLib::PaginationStrategy.Repaginate

  call-seq:
    Repaginate -> int

A class method.

*/
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_Ogg_Page_allocate(VALUE self) {
#else
  VALUE
  _wrap_Ogg_Page_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__Ogg__Page);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::Ogg_Page.new

  call-seq:
    Ogg_Page.new(Ogg_File file, long pageOffset)

Class constructor.

*/
VALUE
_wrap_new_Ogg_Page(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  long arg2 ;
  TagLib::Ogg::Page *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__Ogg__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::File *","TagLib::Ogg::Page", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::File * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::Ogg::Page", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (TagLib::Ogg::Page *)new TagLib::Ogg::Page(arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_Ogg_Page(TagLib::Ogg::Page *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::Ogg_Page.fileOffset

  call-seq:
    fileOffset -> long

An instance method.

*/
VALUE
_wrap_Ogg_Page_fileOffset(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Page, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Page const *","fileOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Page * >(argp1);
  result = (long)((TagLib::Ogg::Page const *)arg1)->fileOffset();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Page.header

  call-seq:
    header -> Ogg_PageHeader

An instance method.

*/
VALUE
_wrap_Ogg_Page_header(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  TagLib::Ogg::PageHeader *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Page, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Page const *","header", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Page * >(argp1);
  result = (TagLib::Ogg::PageHeader *)((TagLib::Ogg::Page const *)arg1)->header();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Page.firstPacketIndex

  call-seq:
    firstPacketIndex -> int

An instance method.

*/
VALUE
_wrap_Ogg_Page_firstPacketIndex(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Page, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Page const *","firstPacketIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Page * >(argp1);
  result = (int)((TagLib::Ogg::Page const *)arg1)->firstPacketIndex();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Page.setFirstPacketIndex

  call-seq:
    setFirstPacketIndex(int index)

An instance method.

*/
VALUE
_wrap_Ogg_Page_setFirstPacketIndex(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Page, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Page *","setFirstPacketIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Page * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","setFirstPacketIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setFirstPacketIndex(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Page.containsPacket

  call-seq:
    containsPacket(int index) -> int

An instance method.

*/
VALUE
_wrap_Ogg_Page_containsPacket(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  int arg2 ;
  TagLib::Ogg::Page::ContainsPacketFlags result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Page, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Page const *","containsPacket", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Page * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","containsPacket", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (TagLib::Ogg::Page::ContainsPacketFlags)((TagLib::Ogg::Page const *)arg1)->containsPacket(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Page.packetCount

  call-seq:
    packetCount -> uint

An instance method.

*/
VALUE
_wrap_Ogg_Page_packetCount(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Page, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Page const *","packetCount", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Page * >(argp1);
  result = (uint)((TagLib::Ogg::Page const *)arg1)->packetCount();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Page.packets

  call-seq:
    packets

An instance method.

*/
VALUE
_wrap_Ogg_Page_packets(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  TagLib::ByteVectorList result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Page, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Page const *","packets", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Page * >(argp1);
  result = ((TagLib::Ogg::Page const *)arg1)->packets();
  vresult = SWIG_NewPointerObj((new TagLib::ByteVectorList(static_cast< const TagLib::ByteVectorList& >(result))), SWIGTYPE_p_TagLib__ListT_TagLib__ByteVector_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Page.size

  call-seq:
    size -> int

Size or Length of the Ogg_Page.
*/
VALUE
_wrap_Ogg_Page_size(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Page, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Page const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Page * >(argp1);
  result = (int)((TagLib::Ogg::Page const *)arg1)->size();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Page.render

  call-seq:
    render -> ByteVector

An instance method.

*/
VALUE
_wrap_Ogg_Page_render(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Page *arg1 = (TagLib::Ogg::Page *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Page, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Page const *","render", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Page * >(argp1);
  result = ((TagLib::Ogg::Page const *)arg1)->render();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::Ogg_File < TagLib::TagLib::File

  Proxy of C++ TagLib::Ogg_File class


*/
swig_class cOgg_File;

SWIGINTERN void
free_TagLib_Ogg_File(TagLib::Ogg::File *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::Ogg_File.packet

  call-seq:
    packet(uint i) -> ByteVector

An instance method.

*/
VALUE
_wrap_Ogg_File_packet(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  uint arg2 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::File *","packet", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::File * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint","packet", 2, argv[0] ));
  } 
  arg2 = static_cast< uint >(val2);
  result = (arg1)->packet(arg2);
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_File.setPacket

  call-seq:
    setPacket(uint i, ByteVector p)

An instance method.

*/
VALUE
_wrap_Ogg_File_setPacket(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  uint arg2 ;
  TagLib::ByteVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::File *","setPacket", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::File * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "uint","setPacket", 2, argv[0] ));
  } 
  arg2 = static_cast< uint >(val2);
  {
    Check_Type(argv[1], T_STRING);
    arg3=new TagLib::ByteVector(StringValuePtr(argv[1]), RSTRING_LEN(argv[1]));
  }
  (arg1)->setPacket(arg2,(TagLib::ByteVector const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_File.firstPageHeader

  call-seq:
    firstPageHeader -> Ogg_PageHeader

An instance method.

*/
VALUE
_wrap_Ogg_File_firstPageHeader(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  TagLib::Ogg::PageHeader *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::File *","firstPageHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::File * >(argp1);
  result = (TagLib::Ogg::PageHeader *)(arg1)->firstPageHeader();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_File.lastPageHeader

  call-seq:
    lastPageHeader -> Ogg_PageHeader

An instance method.

*/
VALUE
_wrap_Ogg_File_lastPageHeader(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::File *arg1 = (TagLib::Ogg::File *) 0 ;
  TagLib::Ogg::PageHeader *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::File *","lastPageHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::File * >(argp1);
  result = (TagLib::Ogg::PageHeader *)(arg1)->lastPageHeader();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Ogg__PageHeader, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::Ogg_XiphComment < TagLib::TagLib::Tag

  Proxy of C++ TagLib::Ogg_XiphComment class


*/
swig_class cOgg_XiphComment;


/*
  Document-method: TagLib::Ogg_XiphComment.new

  call-seq:
    Ogg_XiphComment.new
    Ogg_XiphComment.new(ByteVector data)

Class constructor.

*/
VALUE
_wrap_new_Ogg_XiphComment__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::XiphComment *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::Ogg::XiphComment *)new TagLib::Ogg::XiphComment();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_Ogg_XiphComment_allocate(VALUE self) {
#else
  VALUE
  _wrap_Ogg_XiphComment_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__Ogg__XiphComment);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::Ogg_XiphComment.new

  call-seq:
    Ogg_XiphComment.new()
    Ogg_XiphComment.new(ByteVector data)

Class constructor.

*/
VALUE
_wrap_new_Ogg_XiphComment__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  result = (TagLib::Ogg::XiphComment *)new TagLib::Ogg::XiphComment((TagLib::ByteVector const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_Ogg_XiphComment(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Ogg_XiphComment__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ogg_XiphComment__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "XiphComment.new", 
    "    XiphComment.new()\n"
    "    XiphComment.new(TagLib::ByteVector const &data)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_Ogg_XiphComment(TagLib::Ogg::XiphComment *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::Ogg_XiphComment.fieldCount

  call-seq:
    fieldCount -> uint

An instance method.

*/
VALUE
_wrap_Ogg_XiphComment_fieldCount(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::XiphComment *","fieldCount", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::XiphComment * >(argp1);
  result = (uint)(arg1)->fieldCount();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_XiphComment.fieldListMap

  call-seq:
    fieldListMap -> FieldListMap

An instance method.

*/
VALUE
_wrap_Ogg_XiphComment_fieldListMap(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::Ogg::FieldListMap *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::XiphComment *","fieldListMap", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::XiphComment * >(argp1);
  {
    TagLib::Ogg::FieldListMap const &_result_ref = (arg1)->fieldListMap();
    result = (TagLib::Ogg::FieldListMap *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_XiphComment.vendorID

  call-seq:
    vendorID -> String

An instance method.

*/
VALUE
_wrap_Ogg_XiphComment_vendorID(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::XiphComment *","vendorID", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::XiphComment * >(argp1);
  result = (arg1)->vendorID();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_XiphComment.addField

  call-seq:
    addField(String key, String value, bool replace=true)

An instance method.

*/
VALUE
_wrap_Ogg_XiphComment_addField(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  TagLib::String *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::XiphComment *","addField", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::XiphComment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","addField", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","addField", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "TagLib::String const &","addField", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","addField", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< TagLib::String * >(argp3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "bool","addField", 4, argv[2] ));
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->addField((TagLib::String const &)*arg2,(TagLib::String const &)*arg3,arg4);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_XiphComment.removeField

  call-seq:
    removeField(String key)

An instance method.

*/
VALUE
_wrap_Ogg_XiphComment_removeField(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::XiphComment *","removeField", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::XiphComment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","removeField", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","removeField", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->removeField((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_XiphComment.contains

  call-seq:
    contains(String key) -> bool

An instance method.

*/
VALUE
_wrap_Ogg_XiphComment_contains(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  TagLib::String *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::XiphComment *","contains", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::XiphComment * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","contains", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","contains", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  result = (bool)(arg1)->contains((TagLib::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_XiphComment.render

  call-seq:
    render -> ByteVector
    render(bool addFramingBit) -> ByteVector

An instance method.

*/
VALUE
_wrap_Ogg_XiphComment_render__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::XiphComment *","render", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::XiphComment * >(argp1);
  result = (arg1)->render();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_Ogg_XiphComment_render__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::XiphComment *arg1 = (TagLib::Ogg::XiphComment *) 0 ;
  bool arg2 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::XiphComment *","render", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::XiphComment * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","render", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (arg1)->render(arg2);
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_Ogg_XiphComment_render(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__Ogg__XiphComment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Ogg_XiphComment_render__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__Ogg__XiphComment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Ogg_XiphComment_render__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Ogg_XiphComment.render", 
    "    TagLib::ByteVector Ogg_XiphComment.render()\n"
    "    TagLib::ByteVector Ogg_XiphComment.render(bool addFramingBit)\n");
  
  return Qnil;
}



/*
  Document-class: TagLib::Ogg_Flac_File < TagLib::TagLib::Ogg::Ogg_File

  Proxy of C++ TagLib::Ogg_Flac_File class


*/
swig_class cOgg_Flac_File;


/*
  Document-method: TagLib::Ogg_Flac_File.new

  call-seq:
    Ogg_Flac_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Properties::Average)
    Ogg_Flac_File.new(FileName file, bool readProperties=true)
    Ogg_Flac_File.new(FileName file)

Class constructor.

*/
VALUE
_wrap_new_Ogg_Flac_File__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::Ogg::FLAC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::Ogg::FLAC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::Ogg::FLAC::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::AudioProperties::ReadStyle","TagLib::Ogg::FLAC::File", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::AudioProperties::ReadStyle >(val3);
  result = (TagLib::Ogg::FLAC::File *)new TagLib::Ogg::FLAC::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Flac_File.new

  call-seq:
    Ogg_Flac_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Properties::Average)
    Ogg_Flac_File.new(FileName file, bool readProperties=true)
    Ogg_Flac_File.new(FileName file)

Class constructor.

*/
VALUE
_wrap_new_Ogg_Flac_File__SWIG_1(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::Ogg::FLAC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::Ogg::FLAC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::Ogg::FLAC::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::Ogg::FLAC::File *)new TagLib::Ogg::FLAC::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_Ogg_Flac_File_allocate(VALUE self) {
#else
  VALUE
  _wrap_Ogg_Flac_File_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__Ogg__FLAC__File);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_Ogg_Flac_File__SWIG_2(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::Ogg::FLAC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::Ogg::FLAC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  result = (TagLib::Ogg::FLAC::File *)new TagLib::Ogg::FLAC::File(arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_Ogg_Flac_File(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ogg_Flac_File__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Ogg_Flac_File__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Ogg_Flac_File__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "File.new", 
    "    File.new(FileName file, bool readProperties, TagLib::AudioProperties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, bool readProperties)\n"
    "    File.new(FileName file)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_Ogg_FLAC_File(TagLib::Ogg::FLAC::File *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::Ogg_Flac_File.tag

  call-seq:
    tag -> Ogg_XiphComment

An instance method.

*/
VALUE
_wrap_Ogg_Flac_File_tag(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::FLAC::File *arg1 = (TagLib::Ogg::FLAC::File *) 0 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::FLAC::File const *","tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::FLAC::File * >(argp1);
  result = (TagLib::Ogg::XiphComment *)((TagLib::Ogg::FLAC::File const *)arg1)->tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Flac_File.audioProperties

  call-seq:
    audioProperties -> FLAC_Properties

An instance method.

*/
VALUE
_wrap_Ogg_Flac_File_audioProperties(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::FLAC::File *arg1 = (TagLib::Ogg::FLAC::File *) 0 ;
  TagLib::FLAC::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::FLAC::File const *","audioProperties", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::FLAC::File * >(argp1);
  result = (TagLib::FLAC::Properties *)((TagLib::Ogg::FLAC::File const *)arg1)->audioProperties();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__FLAC__Properties, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Flac_File.streamLength

  call-seq:
    streamLength -> long

An instance method.

*/
VALUE
_wrap_Ogg_Flac_File_streamLength(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::FLAC::File *arg1 = (TagLib::Ogg::FLAC::File *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::FLAC::File *","streamLength", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::FLAC::File * >(argp1);
  result = (long)(arg1)->streamLength();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::Ogg_Speex_Properties < TagLib::TagLib::AudioProperties

  Proxy of C++ TagLib::Ogg_Speex_Properties class


*/
swig_class cOgg_Speex_Properties;


/*
  Document-method: TagLib::Ogg_Speex_Properties.new

  call-seq:
    Ogg_Speex_Properties.new(Ogg_Speex_File file, ReadStyle style=Average)
    Ogg_Speex_Properties.new(Ogg_Speex_File file)

Class constructor.

*/
VALUE
_wrap_new_Ogg_Speex_Properties__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Speex::File *arg1 = (TagLib::Ogg::Speex::File *) 0 ;
  TagLib::AudioProperties::ReadStyle arg2 ;
  TagLib::Ogg::Speex::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__Ogg__Speex__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Speex::File *","TagLib::Ogg::Speex::Properties", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Speex::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::AudioProperties::ReadStyle","TagLib::Ogg::Speex::Properties", 2, argv[1] ));
  } 
  arg2 = static_cast< TagLib::AudioProperties::ReadStyle >(val2);
  result = (TagLib::Ogg::Speex::Properties *)new TagLib::Ogg::Speex::Properties(arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_Ogg_Speex_Properties_allocate(VALUE self) {
#else
  VALUE
  _wrap_Ogg_Speex_Properties_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__Ogg__Speex__Properties);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::Ogg_Speex_Properties.new

  call-seq:
    Ogg_Speex_Properties.new(Ogg_Speex_File file, ReadStyle style=Average)
    Ogg_Speex_Properties.new(Ogg_Speex_File file)

Class constructor.

*/
VALUE
_wrap_new_Ogg_Speex_Properties__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Speex::File *arg1 = (TagLib::Ogg::Speex::File *) 0 ;
  TagLib::Ogg::Speex::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__Ogg__Speex__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Speex::File *","TagLib::Ogg::Speex::Properties", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Speex::File * >(argp1);
  result = (TagLib::Ogg::Speex::Properties *)new TagLib::Ogg::Speex::Properties(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_Ogg_Speex_Properties(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__Ogg__Speex__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ogg_Speex_Properties__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__Ogg__Speex__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Ogg_Speex_Properties__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Properties.new", 
    "    Properties.new(TagLib::Ogg::Speex::File *file, TagLib::AudioProperties::ReadStyle style)\n"
    "    Properties.new(TagLib::Ogg::Speex::File *file)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Speex_Properties.speexVersion

  call-seq:
    speexVersion -> int

An instance method.

*/
VALUE
_wrap_Ogg_Speex_Properties_speexVersion(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Speex::Properties *arg1 = (TagLib::Ogg::Speex::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Speex__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Speex::Properties const *","speexVersion", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Speex::Properties * >(argp1);
  result = (int)((TagLib::Ogg::Speex::Properties const *)arg1)->speexVersion();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::Ogg_Speex_File < TagLib::TagLib::Ogg::Ogg_File

  Proxy of C++ TagLib::Ogg_Speex_File class


*/
swig_class cOgg_Speex_File;


/*
  Document-method: TagLib::Ogg_Speex_File.new

  call-seq:
    Ogg_Speex_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    Ogg_Speex_File.new(FileName file, bool readProperties=true)
    Ogg_Speex_File.new(FileName file)

Class constructor.

*/
VALUE
_wrap_new_Ogg_Speex_File__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::Ogg::Speex::Properties::ReadStyle arg3 ;
  TagLib::Ogg::Speex::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::Ogg::Speex::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::Ogg::Speex::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::Ogg::Speex::Properties::ReadStyle","TagLib::Ogg::Speex::File", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::Ogg::Speex::Properties::ReadStyle >(val3);
  result = (TagLib::Ogg::Speex::File *)new TagLib::Ogg::Speex::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Speex_File.new

  call-seq:
    Ogg_Speex_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    Ogg_Speex_File.new(FileName file, bool readProperties=true)
    Ogg_Speex_File.new(FileName file)

Class constructor.

*/
VALUE
_wrap_new_Ogg_Speex_File__SWIG_1(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::Ogg::Speex::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::Ogg::Speex::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::Ogg::Speex::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::Ogg::Speex::File *)new TagLib::Ogg::Speex::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_Ogg_Speex_File_allocate(VALUE self) {
#else
  VALUE
  _wrap_Ogg_Speex_File_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__Ogg__Speex__File);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_Ogg_Speex_File__SWIG_2(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::Ogg::Speex::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::Ogg::Speex::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  result = (TagLib::Ogg::Speex::File *)new TagLib::Ogg::Speex::File(arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_Ogg_Speex_File(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ogg_Speex_File__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Ogg_Speex_File__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Ogg_Speex_File__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "File.new", 
    "    File.new(FileName file, bool readProperties, TagLib::Ogg::Speex::Properties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, bool readProperties)\n"
    "    File.new(FileName file)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_Ogg_Speex_File(TagLib::Ogg::Speex::File *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::Ogg_Speex_File.tag

  call-seq:
    tag -> Ogg_XiphComment

An instance method.

*/
VALUE
_wrap_Ogg_Speex_File_tag(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Speex::File *arg1 = (TagLib::Ogg::Speex::File *) 0 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Speex__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Speex::File const *","tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Speex::File * >(argp1);
  result = (TagLib::Ogg::XiphComment *)((TagLib::Ogg::Speex::File const *)arg1)->tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Ogg_Speex_File.audioProperties

  call-seq:
    audioProperties -> Ogg_Speex_Properties

An instance method.

*/
VALUE
_wrap_Ogg_Speex_File_audioProperties(int argc, VALUE *argv, VALUE self) {
  TagLib::Ogg::Speex::File *arg1 = (TagLib::Ogg::Speex::File *) 0 ;
  TagLib::Ogg::Speex::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Ogg__Speex__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Ogg::Speex::File const *","audioProperties", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Ogg::Speex::File * >(argp1);
  result = (TagLib::Ogg::Speex::Properties *)((TagLib::Ogg::Speex::File const *)arg1)->audioProperties();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Ogg__Speex__Properties, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::Vorbis_Properties < TagLib::TagLib::AudioProperties

  Proxy of C++ TagLib::Vorbis_Properties class


*/
swig_class cVorbis_Properties;


/*
  Document-method: TagLib::Vorbis_Properties.new

  call-seq:
    Vorbis_Properties.new(Vorbis_File file, ReadStyle style=Average)
    Vorbis_Properties.new(Vorbis_File file)

Class constructor.

*/
VALUE
_wrap_new_Vorbis_Properties__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
  TagLib::AudioProperties::ReadStyle arg2 ;
  TagLib::Vorbis::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__Vorbis__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Vorbis::File *","TagLib::Vorbis::Properties", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::Vorbis::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::AudioProperties::ReadStyle","TagLib::Vorbis::Properties", 2, argv[1] ));
  } 
  arg2 = static_cast< TagLib::AudioProperties::ReadStyle >(val2);
  result = (TagLib::Vorbis::Properties *)new TagLib::Vorbis::Properties(arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_Vorbis_Properties_allocate(VALUE self) {
#else
  VALUE
  _wrap_Vorbis_Properties_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__Vorbis__Properties);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::Vorbis_Properties.new

  call-seq:
    Vorbis_Properties.new(Vorbis_File file, ReadStyle style=Average)
    Vorbis_Properties.new(Vorbis_File file)

Class constructor.

*/
VALUE
_wrap_new_Vorbis_Properties__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
  TagLib::Vorbis::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__Vorbis__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Vorbis::File *","TagLib::Vorbis::Properties", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::Vorbis::File * >(argp1);
  result = (TagLib::Vorbis::Properties *)new TagLib::Vorbis::Properties(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_Vorbis_Properties(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__Vorbis__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vorbis_Properties__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__Vorbis__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vorbis_Properties__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Properties.new", 
    "    Properties.new(TagLib::Vorbis::File *file, TagLib::AudioProperties::ReadStyle style)\n"
    "    Properties.new(TagLib::Vorbis::File *file)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::Vorbis_Properties.vorbisVersion

  call-seq:
    vorbisVersion -> int

An instance method.

*/
VALUE
_wrap_Vorbis_Properties_vorbisVersion(int argc, VALUE *argv, VALUE self) {
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Vorbis__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Vorbis::Properties const *","vorbisVersion", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Vorbis::Properties * >(argp1);
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->vorbisVersion();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Vorbis_Properties.bitrateMaximum

  call-seq:
    bitrateMaximum -> int

An instance method.

*/
VALUE
_wrap_Vorbis_Properties_bitrateMaximum(int argc, VALUE *argv, VALUE self) {
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Vorbis__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Vorbis::Properties const *","bitrateMaximum", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Vorbis::Properties * >(argp1);
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->bitrateMaximum();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Vorbis_Properties.bitrateNominal

  call-seq:
    bitrateNominal -> int

An instance method.

*/
VALUE
_wrap_Vorbis_Properties_bitrateNominal(int argc, VALUE *argv, VALUE self) {
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Vorbis__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Vorbis::Properties const *","bitrateNominal", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Vorbis::Properties * >(argp1);
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->bitrateNominal();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Vorbis_Properties.bitrateMinimum

  call-seq:
    bitrateMinimum -> int

An instance method.

*/
VALUE
_wrap_Vorbis_Properties_bitrateMinimum(int argc, VALUE *argv, VALUE self) {
  TagLib::Vorbis::Properties *arg1 = (TagLib::Vorbis::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Vorbis__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Vorbis::Properties const *","bitrateMinimum", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Vorbis::Properties * >(argp1);
  result = (int)((TagLib::Vorbis::Properties const *)arg1)->bitrateMinimum();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::Vorbis_File < TagLib::TagLib::Ogg::Ogg_File

  Proxy of C++ TagLib::Vorbis_File class


*/
swig_class cVorbis_File;


/*
  Document-method: TagLib::Vorbis_File.new

  call-seq:
    Vorbis_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    Vorbis_File.new(FileName file, bool readProperties=true)
    Vorbis_File.new(FileName file)

Class constructor.

*/
VALUE
_wrap_new_Vorbis_File__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::Vorbis::Properties::ReadStyle arg3 ;
  TagLib::Vorbis::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::Vorbis::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::Vorbis::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::Vorbis::Properties::ReadStyle","TagLib::Vorbis::File", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::Vorbis::Properties::ReadStyle >(val3);
  result = (TagLib::Vorbis::File *)new TagLib::Vorbis::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}



/*
  Document-method: TagLib::Vorbis_File.new

  call-seq:
    Vorbis_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    Vorbis_File.new(FileName file, bool readProperties=true)
    Vorbis_File.new(FileName file)

Class constructor.

*/
VALUE
_wrap_new_Vorbis_File__SWIG_1(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::Vorbis::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::Vorbis::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::Vorbis::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::Vorbis::File *)new TagLib::Vorbis::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_Vorbis_File_allocate(VALUE self) {
#else
  VALUE
  _wrap_Vorbis_File_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__Vorbis__File);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_Vorbis_File__SWIG_2(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::Vorbis::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::Vorbis::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  result = (TagLib::Vorbis::File *)new TagLib::Vorbis::File(arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_Vorbis_File(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vorbis_File__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vorbis_File__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vorbis_File__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "File.new", 
    "    File.new(FileName file, bool readProperties, TagLib::Vorbis::Properties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, bool readProperties)\n"
    "    File.new(FileName file)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_Vorbis_File(TagLib::Vorbis::File *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::Vorbis_File.tag

  call-seq:
    tag -> Ogg_XiphComment

An instance method.

*/
VALUE
_wrap_Vorbis_File_tag(int argc, VALUE *argv, VALUE self) {
  TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Vorbis__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Vorbis::File const *","tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Vorbis::File * >(argp1);
  result = (TagLib::Ogg::XiphComment *)((TagLib::Vorbis::File const *)arg1)->tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::Vorbis_File.audioProperties

  call-seq:
    audioProperties -> Vorbis_Properties

An instance method.

*/
VALUE
_wrap_Vorbis_File_audioProperties(int argc, VALUE *argv, VALUE self) {
  TagLib::Vorbis::File *arg1 = (TagLib::Vorbis::File *) 0 ;
  TagLib::Vorbis::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__Vorbis__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::Vorbis::File const *","audioProperties", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::Vorbis::File * >(argp1);
  result = (TagLib::Vorbis::Properties *)((TagLib::Vorbis::File const *)arg1)->audioProperties();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Vorbis__Properties, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v1.ID3v1_genre

  call-seq:
    ID3v1_genre(int index) -> String

A module function.

*/
VALUE
_wrap_ID3v1_genre(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  TagLib::String result;
  int val1 ;
  int ecode1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","TagLib::ID3v1::genre", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = TagLib::ID3v1::genre(arg1);
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v1.ID3v1_genreIndex

  call-seq:
    ID3v1_genreIndex(String name) -> int

A module function.

*/
VALUE
_wrap_ID3v1_genreIndex(int argc, VALUE *argv, VALUE self) {
  TagLib::String *arg1 = 0 ;
  int result;
  void *argp1 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::String const &","TagLib::ID3v1::genreIndex", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","TagLib::ID3v1::genreIndex", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< TagLib::String * >(argp1);
  result = (int)TagLib::ID3v1::genreIndex((TagLib::String const &)*arg1);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v1.ID3v1_genreList

  call-seq:
    ID3v1_genreList

A module function.

*/
VALUE
_wrap_ID3v1_genreList(int argc, VALUE *argv, VALUE self) {
  TagLib::StringList result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = TagLib::ID3v1::genreList();
  {
    vresult=StringList2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v1.ID3v1_genreMap

  call-seq:
    ID3v1_genreMap -> GenreMap

A module function.

*/
VALUE
_wrap_ID3v1_genreMap(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v1::GenreMap result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = TagLib::ID3v1::genreMap();
  vresult = SWIG_NewPointerObj((new TagLib::ID3v1::GenreMap(static_cast< const TagLib::ID3v1::GenreMap& >(result))), SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::ID3v1_Tag < TagLib::TagLib::Tag

  Proxy of C++ TagLib::ID3v1_Tag class


*/
swig_class cID3v1_Tag;


/*
  Document-method: TagLib::ID3v1_Tag.new

  call-seq:
    ID3v1_Tag.new
    ID3v1_Tag.new(File file, long tagOffset)

Class constructor.

*/
VALUE
_wrap_new_ID3v1_Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v1::Tag *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v1::Tag *)new TagLib::ID3v1::Tag();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_ID3v1_Tag_allocate(VALUE self) {
#else
  VALUE
  _wrap_ID3v1_Tag_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v1__Tag);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::ID3v1_Tag.new

  call-seq:
    ID3v1_Tag.new()
    ID3v1_Tag.new(File file, long tagOffset)

Class constructor.

*/
VALUE
_wrap_new_ID3v1_Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","TagLib::ID3v1::Tag", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::ID3v1::Tag", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (TagLib::ID3v1::Tag *)new TagLib::ID3v1::Tag(arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_ID3v1_Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ID3v1_Tag__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ID3v1_Tag__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Tag.new", 
    "    Tag.new()\n"
    "    Tag.new(TagLib::File *file, long tagOffset)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v1_Tag(TagLib::ID3v1::Tag *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::ID3v1_Tag.render

  call-seq:
    render -> ByteVector

An instance method.

*/
VALUE
_wrap_ID3v1_Tag_render(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v1::Tag *arg1 = (TagLib::ID3v1::Tag *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v1::Tag const *","render", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v1::Tag * >(argp1);
  result = ((TagLib::ID3v1::Tag const *)arg1)->render();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::ID3v2_Header

  Proxy of C++ TagLib::ID3v2_Header class


*/
swig_class cID3v2_Header;

SWIGINTERN void
free_TagLib_ID3v2_Header(TagLib::ID3v2::Header *arg1) {
    delete arg1;
}


/*
  Document-class: TagLib::ID3v2_Frame < TagLib::TagLib::ID3v2::ID3v2_Header

  Proxy of C++ TagLib::ID3v2_Frame class


*/
swig_class cID3v2_Frame;

SWIGINTERN void
free_TagLib_ID3v2_Frame(TagLib::ID3v2::Frame *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::ID3v2_Frame.frameID

  call-seq:
    frameID -> ByteVector

An instance method.

*/
VALUE
_wrap_ID3v2_Frame_frameID(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame const *","frameID", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  result = ((TagLib::ID3v2::Frame const *)arg1)->frameID();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_Frame.size

  call-seq:
    size -> uint

Size or Length of the ID3v2_Frame.
*/
VALUE
_wrap_ID3v2_Frame_size(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  result = (uint)((TagLib::ID3v2::Frame const *)arg1)->size();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_Frame.to_s

  call-seq:
    to_s -> VALUE

An instance method.

*/
VALUE
_wrap_ID3v2_Frame___str__(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Frame *arg1 = (TagLib::ID3v2::Frame *) 0 ;
  VALUE result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","__str__", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp1);
  result = (VALUE)TagLib_ID3v2_Frame___str__(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::ID3v2_AttachedPictureFrame < TagLib::TagLib::ID3v2::ID3v2_Frame

  Proxy of C++ TagLib::ID3v2_AttachedPictureFrame class


*/
swig_class cID3v2_AttachedPictureFrame;


/*
  Document-method: TagLib::Type.Other

  call-seq:
    Other -> int

A class method.

*/

/*
  Document-method: TagLib::Type.FileIcon

  call-seq:
    FileIcon -> int

A class method.

*/

/*
  Document-method: TagLib::Type.OtherFileIcon

  call-seq:
    OtherFileIcon -> int

A class method.

*/

/*
  Document-method: TagLib::Type.FrontCover

  call-seq:
    FrontCover -> int

A class method.

*/

/*
  Document-method: TagLib::Type.BackCover

  call-seq:
    BackCover -> int

A class method.

*/

/*
  Document-method: TagLib::Type.LeafletPage

  call-seq:
    LeafletPage -> int

A class method.

*/

/*
  Document-method: TagLib::Type.Media

  call-seq:
    Media -> int

A class method.

*/

/*
  Document-method: TagLib::Type.LeadArtist

  call-seq:
    LeadArtist -> int

A class method.

*/

/*
  Document-method: TagLib::Type.Artist

  call-seq:
    Artist -> int

A class method.

*/

/*
  Document-method: TagLib::Type.Conductor

  call-seq:
    Conductor -> int

A class method.

*/

/*
  Document-method: TagLib::Type.Band

  call-seq:
    Band -> int

A class method.

*/

/*
  Document-method: TagLib::Type.Composer

  call-seq:
    Composer -> int

A class method.

*/

/*
  Document-method: TagLib::Type.Lyricist

  call-seq:
    Lyricist -> int

A class method.

*/

/*
  Document-method: TagLib::Type.RecordingLocation

  call-seq:
    RecordingLocation -> int

A class method.

*/

/*
  Document-method: TagLib::Type.DuringRecording

  call-seq:
    DuringRecording -> int

A class method.

*/

/*
  Document-method: TagLib::Type.DuringPerformance

  call-seq:
    DuringPerformance -> int

A class method.

*/

/*
  Document-method: TagLib::Type.MovieScreenCapture

  call-seq:
    MovieScreenCapture -> int

A class method.

*/

/*
  Document-method: TagLib::Type.ColouredFish

  call-seq:
    ColouredFish -> int

A class method.

*/

/*
  Document-method: TagLib::Type.Illustration

  call-seq:
    Illustration -> int

A class method.

*/

/*
  Document-method: TagLib::Type.BandLogo

  call-seq:
    BandLogo -> int

A class method.

*/

/*
  Document-method: TagLib::Type.PublisherLogo

  call-seq:
    PublisherLogo -> int

A class method.

*/
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_ID3v2_AttachedPictureFrame_allocate(VALUE self) {
#else
  VALUE
  _wrap_ID3v2_AttachedPictureFrame_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.new

  call-seq:
    ID3v2_AttachedPictureFrame.new

Class constructor.

*/
VALUE
_wrap_new_ID3v2_AttachedPictureFrame(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::AttachedPictureFrame *)new TagLib::ID3v2::AttachedPictureFrame();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.new2

  call-seq:
    new2(ByteVector data) -> ID3v2_AttachedPictureFrame

A class method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_new2(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::ID3v2::AttachedPictureFrame *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  result = (TagLib::ID3v2::AttachedPictureFrame *)TagLib_ID3v2_AttachedPictureFrame_new2((TagLib::ByteVector const &)*arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_AttachedPictureFrame(TagLib::ID3v2::AttachedPictureFrame *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.toString

  call-seq:
    toString -> String

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_toString(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->toString();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.textEncoding

  call-seq:
    textEncoding -> int

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_textEncoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","textEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = (TagLib::String::Type)((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->textEncoding();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.setTextEncoding

  call-seq:
    setTextEncoding(Type t)

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_setTextEncoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame *","setTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","setTextEncoding", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  (arg1)->setTextEncoding(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.mimeType

  call-seq:
    mimeType -> String

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_mimeType(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","mimeType", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->mimeType();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.setMimeType

  call-seq:
    setMimeType(String m)

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_setMimeType(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame *","setMimeType", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setMimeType", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setMimeType", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setMimeType((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.type

  call-seq:
    type -> int

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_type(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::ID3v2::AttachedPictureFrame::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","type", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = (TagLib::ID3v2::AttachedPictureFrame::Type)((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->type();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.setType

  call-seq:
    setType(Type t)

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_setType(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::ID3v2::AttachedPictureFrame::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame *","setType", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame::Type","setType", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::ID3v2::AttachedPictureFrame::Type >(val2);
  (arg1)->setType(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.description

  call-seq:
    description -> String

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_description(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","description", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->description();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.setDescription

  call-seq:
    setDescription(String desc)

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_setDescription(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame *","setDescription", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setDescription", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setDescription", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setDescription((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.picture

  call-seq:
    picture -> ByteVector

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_picture(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame const *","picture", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  result = ((TagLib::ID3v2::AttachedPictureFrame const *)arg1)->picture();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_AttachedPictureFrame.setPicture

  call-seq:
    setPicture(ByteVector p)

An instance method.

*/
VALUE
_wrap_ID3v2_AttachedPictureFrame_setPicture(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::AttachedPictureFrame *arg1 = (TagLib::ID3v2::AttachedPictureFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::AttachedPictureFrame *","setPicture", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::AttachedPictureFrame * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  (arg1)->setPicture((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::ID3v2_CommentsFrame < TagLib::TagLib::ID3v2::ID3v2_Frame

  Proxy of C++ TagLib::ID3v2_CommentsFrame class


*/
swig_class cID3v2_CommentsFrame;


/*
  Document-method: TagLib::ID3v2_CommentsFrame.new

  call-seq:
    ID3v2_CommentsFrame.new(Type encoding=Latin1)
    ID3v2_CommentsFrame.new

Class constructor.

*/
VALUE
_wrap_new_ID3v2_CommentsFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::String::Type arg1 ;
  TagLib::ID3v2::CommentsFrame *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "TagLib::String::Type","TagLib::ID3v2::CommentsFrame", 1, argv[0] ));
  } 
  arg1 = static_cast< TagLib::String::Type >(val1);
  result = (TagLib::ID3v2::CommentsFrame *)new TagLib::ID3v2::CommentsFrame(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_ID3v2_CommentsFrame_allocate(VALUE self) {
#else
  VALUE
  _wrap_ID3v2_CommentsFrame_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__CommentsFrame);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::ID3v2_CommentsFrame.new

  call-seq:
    ID3v2_CommentsFrame.new(Type encoding=Latin1)
    ID3v2_CommentsFrame.new()

Class constructor.

*/
VALUE
_wrap_new_ID3v2_CommentsFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::CommentsFrame *)new TagLib::ID3v2::CommentsFrame();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_ID3v2_CommentsFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ID3v2_CommentsFrame__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ID3v2_CommentsFrame__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "CommentsFrame.new", 
    "    CommentsFrame.new(TagLib::String::Type encoding)\n"
    "    CommentsFrame.new()\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_CommentsFrame(TagLib::ID3v2::CommentsFrame *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::ID3v2_CommentsFrame.toString

  call-seq:
    toString -> String

An instance method.

*/
VALUE
_wrap_ID3v2_CommentsFrame_toString(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame const *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->toString();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_CommentsFrame.language

  call-seq:
    language -> ByteVector

An instance method.

*/
VALUE
_wrap_ID3v2_CommentsFrame_language(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame const *","language", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->language();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_CommentsFrame.description

  call-seq:
    description -> String

An instance method.

*/
VALUE
_wrap_ID3v2_CommentsFrame_description(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame const *","description", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->description();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_CommentsFrame.text

  call-seq:
    text -> String

An instance method.

*/
VALUE
_wrap_ID3v2_CommentsFrame_text(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame const *","text", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  result = ((TagLib::ID3v2::CommentsFrame const *)arg1)->text();
  {
    vresult = String2Ruby(&result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_CommentsFrame.setLanguage

  call-seq:
    setLanguage(ByteVector languageCode)

An instance method.

*/
VALUE
_wrap_ID3v2_CommentsFrame_setLanguage(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::ByteVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame *","setLanguage", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  {
    Check_Type(argv[0], T_STRING);
    arg2=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  (arg1)->setLanguage((TagLib::ByteVector const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_CommentsFrame.setDescription

  call-seq:
    setDescription(String s)

An instance method.

*/
VALUE
_wrap_ID3v2_CommentsFrame_setDescription(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame *","setDescription", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setDescription", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setDescription", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setDescription((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_CommentsFrame.setText

  call-seq:
    setText(String s)

An instance method.

*/
VALUE
_wrap_ID3v2_CommentsFrame_setText(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame *","setText", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_TagLib__String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::String const &","setText", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::String const &","setText", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< TagLib::String * >(argp2);
  (arg1)->setText((TagLib::String const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_CommentsFrame.textEncoding

  call-seq:
    textEncoding -> int

An instance method.

*/
VALUE
_wrap_ID3v2_CommentsFrame_textEncoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame const *","textEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  result = (TagLib::String::Type)((TagLib::ID3v2::CommentsFrame const *)arg1)->textEncoding();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_CommentsFrame.setTextEncoding

  call-seq:
    setTextEncoding(Type encoding)

An instance method.

*/
VALUE
_wrap_ID3v2_CommentsFrame_setTextEncoding(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::CommentsFrame *arg1 = (TagLib::ID3v2::CommentsFrame *) 0 ;
  TagLib::String::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::CommentsFrame *","setTextEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::CommentsFrame * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::String::Type","setTextEncoding", 2, argv[0] ));
  } 
  arg2 = static_cast< TagLib::String::Type >(val2);
  (arg1)->setTextEncoding(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::ID3v2_GeneralEncapsulatedObjectFrame

  Proxy of C++ TagLib::ID3v2_GeneralEncapsulatedObjectFrame class


*/
swig_class cID3v2_GeneralEncapsulatedObjectFrame;


/*
  Document-class: TagLib::ID3v2_FrameFactory

  Proxy of C++ TagLib::ID3v2_FrameFactory class


*/
swig_class cID3v2_FrameFactory;


/*
  Document-class: TagLib::ID3v2_Tag < TagLib::TagLib::Tag

  Proxy of C++ TagLib::ID3v2_Tag class


*/
swig_class cID3v2_Tag;


/*
  Document-method: TagLib::ID3v2_Tag.new

  call-seq:
    ID3v2_Tag.new
    ID3v2_Tag.new(File file, long tagOffset, ID3v2_FrameFactory factory)

Class constructor.

*/
VALUE
_wrap_new_ID3v2_Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag();DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_ID3v2_Tag_allocate(VALUE self) {
#else
  VALUE
  _wrap_ID3v2_Tag_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__ID3v2__Tag);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::ID3v2_Tag.new

  call-seq:
    ID3v2_Tag.new()
    ID3v2_Tag.new(File file, long tagOffset, ID3v2_FrameFactory factory)

Class constructor.

*/
VALUE
_wrap_new_ID3v2_Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::File *arg1 = (TagLib::File *) 0 ;
  long arg2 ;
  TagLib::ID3v2::FrameFactory *arg3 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::File *","TagLib::ID3v2::Tag", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::File * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::ID3v2::Tag", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory const *","TagLib::ID3v2::Tag", 3, argv[2] )); 
  }
  arg3 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp3);
  result = (TagLib::ID3v2::Tag *)new TagLib::ID3v2::Tag(arg1,arg2,(TagLib::ID3v2::FrameFactory const *)arg3);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_ID3v2_Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ID3v2_Tag__SWIG_0(nargs, args, self);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ID3v2_Tag__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Tag.new", 
    "    Tag.new()\n"
    "    Tag.new(TagLib::File *file, long tagOffset, TagLib::ID3v2::FrameFactory const *factory)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_ID3v2_Tag(TagLib::ID3v2::Tag *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::ID3v2_Tag.header

  call-seq:
    header -> ID3v2_Header

An instance method.

*/
VALUE
_wrap_ID3v2_Tag_header(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Header *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","header", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  result = (TagLib::ID3v2::Header *)(arg1)->header();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Header, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_Tag.addFrame

  call-seq:
    addFrame(ID3v2_Frame frame)

An instance method.

*/
VALUE
_wrap_ID3v2_Tag_addFrame(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","addFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&arg2), SWIGTYPE_p_TagLib__ID3v2__Frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","addFrame", 2, argv[0] ));
  }
  (arg1)->addFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_Tag.frameListMap

  call-seq:
    frameListMap -> FrameListMap

An instance method.

*/
VALUE
_wrap_ID3v2_Tag_frameListMap(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::FrameListMap *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","frameListMap", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    TagLib::ID3v2::FrameListMap const &_result_ref = ((TagLib::ID3v2::Tag const *)arg1)->frameListMap();
    result = (TagLib::ID3v2::FrameListMap *) &_result_ref;
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_Tag.frameList

  call-seq:
    frameList -> FrameList

An instance method.

*/
VALUE
_wrap_ID3v2_Tag_frameList(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::FrameList *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag const *","frameList", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  {
    TagLib::ID3v2::FrameList const &_result_ref = ((TagLib::ID3v2::Tag const *)arg1)->frameList();
    result = (TagLib::ID3v2::FrameList *) &_result_ref;
  }
  {
    vresult = FrameList2Ruby(result);
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::ID3v2_Tag.removeFrame

  call-seq:
    removeFrame(ID3v2_Frame frame, bool del=true)
    removeFrame(ID3v2_Frame frame)

An instance method.

*/
VALUE
_wrap_ID3v2_Tag_removeFrame__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","removeFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","removeFrame", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","removeFrame", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->removeFrame(arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_ID3v2_Tag_removeFrame__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ID3v2::Tag *arg1 = (TagLib::ID3v2::Tag *) 0 ;
  TagLib::ID3v2::Frame *arg2 = (TagLib::ID3v2::Frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::ID3v2::Tag *","removeFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::ID3v2::Tag * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_TagLib__ID3v2__Frame, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::Frame *","removeFrame", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::Frame * >(argp2);
  (arg1)->removeFrame(arg2);
  return Qnil;
fail:
  return Qnil;
}


VALUE _wrap_ID3v2_Tag_removeFrame(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__Tag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ID3v2_Tag_removeFrame__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ID3v2__Tag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__Frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ID3v2_Tag_removeFrame__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ID3v2_Tag.removeFrame", 
    "    void ID3v2_Tag.removeFrame(TagLib::ID3v2::Frame *frame, bool del)\n"
    "    void ID3v2_Tag.removeFrame(TagLib::ID3v2::Frame *frame)\n");
  
  return Qnil;
}



/*
  Document-class: TagLib::FLAC_Properties < TagLib::TagLib::AudioProperties

  Proxy of C++ TagLib::FLAC_Properties class


*/
swig_class cFLAC_Properties;


/*
  Document-method: TagLib::FLAC_Properties.new

  call-seq:
    FLAC_Properties.new(FLAC_File file, ReadStyle style=Average)
    FLAC_Properties.new(FLAC_File file)

Class constructor.

*/
VALUE
_wrap_new_FLAC_Properties__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::AudioProperties::ReadStyle arg2 ;
  TagLib::FLAC::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","TagLib::FLAC::Properties", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::AudioProperties::ReadStyle","TagLib::FLAC::Properties", 2, argv[1] ));
  } 
  arg2 = static_cast< TagLib::AudioProperties::ReadStyle >(val2);
  result = (TagLib::FLAC::Properties *)new TagLib::FLAC::Properties(arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_FLAC_Properties_allocate(VALUE self) {
#else
  VALUE
  _wrap_FLAC_Properties_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__FLAC__Properties);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::FLAC_Properties.new

  call-seq:
    FLAC_Properties.new(FLAC_File file, ReadStyle style=Average)
    FLAC_Properties.new(FLAC_File file)

Class constructor.

*/
VALUE
_wrap_new_FLAC_Properties__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::FLAC::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","TagLib::FLAC::Properties", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  result = (TagLib::FLAC::Properties *)new TagLib::FLAC::Properties(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_FLAC_Properties(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__FLAC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FLAC_Properties__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__FLAC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FLAC_Properties__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Properties.new", 
    "    Properties.new(TagLib::FLAC::File *file, TagLib::AudioProperties::ReadStyle style)\n"
    "    Properties.new(TagLib::FLAC::File *file)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_FLAC_Properties(TagLib::FLAC::Properties *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::FLAC_Properties.sampleWidth

  call-seq:
    sampleWidth -> int

An instance method.

*/
VALUE
_wrap_FLAC_Properties_sampleWidth(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::Properties *arg1 = (TagLib::FLAC::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::Properties *","sampleWidth", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::Properties * >(argp1);
  result = (int)(arg1)->sampleWidth();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::FLAC_File < TagLib::TagLib::File




*/

/*
  Document-class: TagLib::FLAC::File < TagLib::File
*/
swig_class cFLAC_File;


/*
  Document-method: TagLib::FLAC_File.new

  call-seq:
    FLAC_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    FLAC_File.new(FileName file, bool readProperties=true)
    FLAC_File.new(FileName file)
    FLAC_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true, 
    ReadStyle propertiesStyle=Average)
    FLAC_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true)
    FLAC_File.new(FileName file, ID3v2_FrameFactory frameFactory)

Class constructor.

*/
VALUE
_wrap_new_FLAC_File__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::FLAC::Properties::ReadStyle arg3 ;
  TagLib::FLAC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::FLAC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::FLAC::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::FLAC::Properties::ReadStyle","TagLib::FLAC::File", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::FLAC::Properties::ReadStyle >(val3);
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}



/*
  Document-method: TagLib::FLAC_File.new

  call-seq:
    FLAC_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    FLAC_File.new(FileName file, bool readProperties=true)
    FLAC_File.new(FileName file)
    FLAC_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true, 
    ReadStyle propertiesStyle=Average)
    FLAC_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true)
    FLAC_File.new(FileName file, ID3v2_FrameFactory frameFactory)

Class constructor.

*/
VALUE
_wrap_new_FLAC_File__SWIG_1(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::FLAC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::FLAC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::FLAC::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE
_wrap_new_FLAC_File__SWIG_2(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::FLAC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::FLAC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE
_wrap_new_FLAC_File__SWIG_3(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::FLAC::Properties::ReadStyle arg4 ;
  TagLib::FLAC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::FLAC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory *","TagLib::FLAC::File", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","TagLib::FLAC::File", 3, argv[2] ));
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "TagLib::FLAC::Properties::ReadStyle","TagLib::FLAC::File", 4, argv[3] ));
  } 
  arg4 = static_cast< TagLib::FLAC::Properties::ReadStyle >(val4);
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1,arg2,arg3,arg4);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE
_wrap_new_FLAC_File__SWIG_4(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::FLAC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::FLAC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory *","TagLib::FLAC::File", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","TagLib::FLAC::File", 3, argv[2] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_FLAC_File_allocate(VALUE self) {
#else
  VALUE
  _wrap_FLAC_File_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__FLAC__File);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_FLAC_File__SWIG_5(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::FLAC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::FLAC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory *","TagLib::FLAC::File", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  result = (TagLib::FLAC::File *)new TagLib::FLAC::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_FLAC_File(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FLAC_File__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FLAC_File__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FLAC_File__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FLAC_File__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FLAC_File__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_FLAC_File__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "File.new", 
    "    File.new(FileName file, bool readProperties, TagLib::FLAC::Properties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, bool readProperties)\n"
    "    File.new(FileName file)\n"
    "    File.new(FileName file, TagLib::ID3v2::FrameFactory *frameFactory, bool readProperties, TagLib::FLAC::Properties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, TagLib::ID3v2::FrameFactory *frameFactory, bool readProperties)\n"
    "    File.new(FileName file, TagLib::ID3v2::FrameFactory *frameFactory)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_FLAC_File(TagLib::FLAC::File *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::FLAC_File.audioProperties

  call-seq:
    audioProperties -> FLAC_Properties

An instance method.

*/
VALUE
_wrap_FLAC_File_audioProperties(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::FLAC::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File const *","audioProperties", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  result = (TagLib::FLAC::Properties *)((TagLib::FLAC::File const *)arg1)->audioProperties();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__FLAC__Properties, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FLAC_File.ID3v2Tag

  call-seq:
    ID3v2Tag(bool create=false) -> ID3v2_Tag
    ID3v2Tag -> ID3v2_Tag

An instance method.

*/
VALUE
_wrap_FLAC_File_ID3v2Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v2::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","ID3v2Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ID3v2Tag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_FLAC_File_ID3v2Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","ID3v2Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_FLAC_File_ID3v2Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__FLAC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FLAC_File_ID3v2Tag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__FLAC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FLAC_File_ID3v2Tag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "FLAC_File.ID3v2Tag", 
    "    TagLib::ID3v2::Tag * FLAC_File.ID3v2Tag(bool create)\n"
    "    TagLib::ID3v2::Tag * FLAC_File.ID3v2Tag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::FLAC_File.ID3v1Tag

  call-seq:
    ID3v1Tag(bool create=false) -> ID3v1_Tag
    ID3v1Tag -> ID3v1_Tag

An instance method.

*/
VALUE
_wrap_FLAC_File_ID3v1Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","ID3v1Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ID3v1Tag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_FLAC_File_ID3v1Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","ID3v1Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_FLAC_File_ID3v1Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__FLAC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FLAC_File_ID3v1Tag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__FLAC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FLAC_File_ID3v1Tag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "FLAC_File.ID3v1Tag", 
    "    TagLib::ID3v1::Tag * FLAC_File.ID3v1Tag(bool create)\n"
    "    TagLib::ID3v1::Tag * FLAC_File.ID3v1Tag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::FLAC_File.xiphComment

  call-seq:
    xiphComment(bool create=false) -> Ogg_XiphComment
    xiphComment -> Ogg_XiphComment

An instance method.

*/
VALUE
_wrap_FLAC_File_xiphComment__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  bool arg2 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","xiphComment", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","xiphComment", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::Ogg::XiphComment *)(arg1)->xiphComment(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_FLAC_File_xiphComment__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::Ogg::XiphComment *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","xiphComment", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  result = (TagLib::Ogg::XiphComment *)(arg1)->xiphComment();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__Ogg__XiphComment, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_FLAC_File_xiphComment(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__FLAC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FLAC_File_xiphComment__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__FLAC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FLAC_File_xiphComment__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "FLAC_File.xiphComment", 
    "    TagLib::Ogg::XiphComment * FLAC_File.xiphComment(bool create)\n"
    "    TagLib::Ogg::XiphComment * FLAC_File.xiphComment()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::FLAC_File.setID3v2FrameFactory

  call-seq:
    setID3v2FrameFactory(ID3v2_FrameFactory factory)

An instance method.

*/
VALUE
_wrap_FLAC_File_setID3v2FrameFactory(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","setID3v2FrameFactory", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory const *","setID3v2FrameFactory", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  (arg1)->setID3v2FrameFactory((TagLib::ID3v2::FrameFactory const *)arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FLAC_File.streamInfoData

  call-seq:
    streamInfoData -> ByteVector

An instance method.

*/
VALUE
_wrap_FLAC_File_streamInfoData(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  SwigValueWrapper< TagLib::ByteVector > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","streamInfoData", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  result = (arg1)->streamInfoData();
  {
    vresult = rb_tainted_str_new((&result)->data(),(&result)->size());
  }
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::FLAC_File.streamLength

  call-seq:
    streamLength -> long

An instance method.

*/
VALUE
_wrap_FLAC_File_streamLength(int argc, VALUE *argv, VALUE self) {
  TagLib::FLAC::File *arg1 = (TagLib::FLAC::File *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__FLAC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::FLAC::File *","streamLength", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::FLAC::File * >(argp1);
  result = (long)(arg1)->streamLength();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::MPC_Properties < TagLib::TagLib::AudioProperties

  Proxy of C++ TagLib::MPC_Properties class


*/
swig_class cMPC_Properties;


/*
  Document-method: TagLib::MPC_Properties.new

  call-seq:
    MPC_Properties.new(ByteVector data, long streamLength, ReadStyle style=Average)
    MPC_Properties.new(ByteVector data, long streamLength)

Class constructor.

*/
VALUE
_wrap_new_MPC_Properties__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::MPC::Properties *result = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::MPC::Properties", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::AudioProperties::ReadStyle","TagLib::MPC::Properties", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::AudioProperties::ReadStyle >(val3);
  result = (TagLib::MPC::Properties *)new TagLib::MPC::Properties((TagLib::ByteVector const &)*arg1,arg2,arg3);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_MPC_Properties_allocate(VALUE self) {
#else
  VALUE
  _wrap_MPC_Properties_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__MPC__Properties);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::MPC_Properties.new

  call-seq:
    MPC_Properties.new(ByteVector data, long streamLength, ReadStyle style=Average)
    MPC_Properties.new(ByteVector data, long streamLength)

Class constructor.

*/
VALUE
_wrap_new_MPC_Properties__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::MPC::Properties *result = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::MPC::Properties", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (TagLib::MPC::Properties *)new TagLib::MPC::Properties((TagLib::ByteVector const &)*arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_MPC_Properties(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MPC_Properties__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MPC_Properties__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Properties.new", 
    "    Properties.new(TagLib::ByteVector const &data, long streamLength, TagLib::AudioProperties::ReadStyle style)\n"
    "    Properties.new(TagLib::ByteVector const &data, long streamLength)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::MPC_Properties.mpcVersion

  call-seq:
    mpcVersion -> int

An instance method.

*/
VALUE
_wrap_MPC_Properties_mpcVersion(int argc, VALUE *argv, VALUE self) {
  TagLib::MPC::Properties *arg1 = (TagLib::MPC::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPC__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPC::Properties const *","mpcVersion", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPC::Properties * >(argp1);
  result = (int)((TagLib::MPC::Properties const *)arg1)->mpcVersion();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::MPC_File < TagLib::TagLib::File

  Proxy of C++ TagLib::MPC_File class


*/
swig_class cMPC_File;


/*
  Document-method: TagLib::TagTypes.NoTags

  call-seq:
    NoTags -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.ID3v1

  call-seq:
    ID3v1 -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.ID3v2

  call-seq:
    ID3v2 -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.APE

  call-seq:
    APE -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.AllTags

  call-seq:
    AllTags -> int

A class method.

*/

/*
  Document-method: TagLib::MPC_File.new

  call-seq:
    MPC_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    MPC_File.new(FileName file, bool readProperties=true)
    MPC_File.new(FileName file)

Class constructor.

*/
VALUE
_wrap_new_MPC_File__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::MPC::Properties::ReadStyle arg3 ;
  TagLib::MPC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::MPC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::MPC::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::MPC::Properties::ReadStyle","TagLib::MPC::File", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::MPC::Properties::ReadStyle >(val3);
  result = (TagLib::MPC::File *)new TagLib::MPC::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}



/*
  Document-method: TagLib::MPC_File.new

  call-seq:
    MPC_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    MPC_File.new(FileName file, bool readProperties=true)
    MPC_File.new(FileName file)

Class constructor.

*/
VALUE
_wrap_new_MPC_File__SWIG_1(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::MPC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::MPC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::MPC::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::MPC::File *)new TagLib::MPC::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_MPC_File_allocate(VALUE self) {
#else
  VALUE
  _wrap_MPC_File_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__MPC__File);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_MPC_File__SWIG_2(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::MPC::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::MPC::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  result = (TagLib::MPC::File *)new TagLib::MPC::File(arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_MPC_File(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MPC_File__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MPC_File__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MPC_File__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "File.new", 
    "    File.new(FileName file, bool readProperties, TagLib::MPC::Properties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, bool readProperties)\n"
    "    File.new(FileName file)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_MPC_File(TagLib::MPC::File *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::MPC_File.audioProperties

  call-seq:
    audioProperties -> MPC_Properties

An instance method.

*/
VALUE
_wrap_MPC_File_audioProperties(int argc, VALUE *argv, VALUE self) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  TagLib::MPC::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPC::File const *","audioProperties", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPC::File * >(argp1);
  result = (TagLib::MPC::Properties *)((TagLib::MPC::File const *)arg1)->audioProperties();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MPC__Properties, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPC_File.ID3v1Tag

  call-seq:
    ID3v1Tag(bool create=false) -> ID3v1_Tag
    ID3v1Tag -> ID3v1_Tag

An instance method.

*/
VALUE
_wrap_MPC_File_ID3v1Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPC::File *","ID3v1Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPC::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ID3v1Tag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_MPC_File_ID3v1Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPC::File *","ID3v1Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPC::File * >(argp1);
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_MPC_File_ID3v1Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MPC_File_ID3v1Tag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MPC_File_ID3v1Tag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MPC_File.ID3v1Tag", 
    "    TagLib::ID3v1::Tag * MPC_File.ID3v1Tag(bool create)\n"
    "    TagLib::ID3v1::Tag * MPC_File.ID3v1Tag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::MPC_File.APETag

  call-seq:
    APETag(bool create=false) -> APE_Tag
    APETag -> APE_Tag

An instance method.

*/
VALUE
_wrap_MPC_File_APETag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  bool arg2 ;
  TagLib::APE::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPC::File *","APETag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPC::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","APETag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::APE::Tag *)(arg1)->APETag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_MPC_File_APETag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  TagLib::APE::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPC::File *","APETag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPC::File * >(argp1);
  result = (TagLib::APE::Tag *)(arg1)->APETag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_MPC_File_APETag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MPC_File_APETag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MPC_File_APETag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MPC_File.APETag", 
    "    TagLib::APE::Tag * MPC_File.APETag(bool create)\n"
    "    TagLib::APE::Tag * MPC_File.APETag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::MPC_File.strip

  call-seq:
    strip(int tags=AllTags)
    strip

An instance method.

*/
VALUE
_wrap_MPC_File_strip__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPC::File *","strip", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPC::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","strip", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->strip(arg2);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_MPC_File_strip__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPC::File *","strip", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPC::File * >(argp1);
  (arg1)->strip();
  return Qnil;
fail:
  return Qnil;
}


VALUE _wrap_MPC_File_strip(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MPC_File_strip__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MPC_File_strip__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MPC_File.strip", 
    "    void MPC_File.strip(int tags)\n"
    "    void MPC_File.strip()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::MPC_File.remove

  call-seq:
    remove(int tags=AllTags)
    remove

An instance method.

*/
VALUE
_wrap_MPC_File_remove__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPC::File *","remove", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPC::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","remove", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->remove(arg2);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_MPC_File_remove__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPC::File *arg1 = (TagLib::MPC::File *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPC__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPC::File *","remove", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPC::File * >(argp1);
  (arg1)->remove();
  return Qnil;
fail:
  return Qnil;
}


VALUE _wrap_MPC_File_remove(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MPC_File_remove__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPC__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MPC_File_remove__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MPC_File.remove", 
    "    void MPC_File.remove(int tags)\n"
    "    void MPC_File.remove()\n");
  
  return Qnil;
}



/*
  Document-class: TagLib::TrueAudio_Properties < TagLib::TagLib::AudioProperties

  Proxy of C++ TagLib::TrueAudio_Properties class


*/
swig_class cTrueAudio_Properties;


/*
  Document-method: TagLib::TrueAudio_Properties.new

  call-seq:
    TrueAudio_Properties.new(ByteVector data, long streamLength, ReadStyle style=Average)
    TrueAudio_Properties.new(ByteVector data, long streamLength)

Class constructor.

*/
VALUE
_wrap_new_TrueAudio_Properties__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::TrueAudio::Properties *result = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::TrueAudio::Properties", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::AudioProperties::ReadStyle","TagLib::TrueAudio::Properties", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::AudioProperties::ReadStyle >(val3);
  result = (TagLib::TrueAudio::Properties *)new TagLib::TrueAudio::Properties((TagLib::ByteVector const &)*arg1,arg2,arg3);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_TrueAudio_Properties_allocate(VALUE self) {
#else
  VALUE
  _wrap_TrueAudio_Properties_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__TrueAudio__Properties);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::TrueAudio_Properties.new

  call-seq:
    TrueAudio_Properties.new(ByteVector data, long streamLength, ReadStyle style=Average)
    TrueAudio_Properties.new(ByteVector data, long streamLength)

Class constructor.

*/
VALUE
_wrap_new_TrueAudio_Properties__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::TrueAudio::Properties *result = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::TrueAudio::Properties", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (TagLib::TrueAudio::Properties *)new TagLib::TrueAudio::Properties((TagLib::ByteVector const &)*arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_TrueAudio_Properties(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TrueAudio_Properties__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TrueAudio_Properties__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Properties.new", 
    "    Properties.new(TagLib::ByteVector const &data, long streamLength, TagLib::AudioProperties::ReadStyle style)\n"
    "    Properties.new(TagLib::ByteVector const &data, long streamLength)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::TrueAudio_Properties.bitsPerSample

  call-seq:
    bitsPerSample -> int

An instance method.

*/
VALUE
_wrap_TrueAudio_Properties_bitsPerSample(int argc, VALUE *argv, VALUE self) {
  TagLib::TrueAudio::Properties *arg1 = (TagLib::TrueAudio::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__TrueAudio__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::TrueAudio::Properties const *","bitsPerSample", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::TrueAudio::Properties * >(argp1);
  result = (int)((TagLib::TrueAudio::Properties const *)arg1)->bitsPerSample();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::TrueAudio_Properties.ttaVersion

  call-seq:
    ttaVersion -> int

An instance method.

*/
VALUE
_wrap_TrueAudio_Properties_ttaVersion(int argc, VALUE *argv, VALUE self) {
  TagLib::TrueAudio::Properties *arg1 = (TagLib::TrueAudio::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__TrueAudio__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::TrueAudio::Properties const *","ttaVersion", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::TrueAudio::Properties * >(argp1);
  result = (int)((TagLib::TrueAudio::Properties const *)arg1)->ttaVersion();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::TrueAudio_File < TagLib::TagLib::File

  Proxy of C++ TagLib::TrueAudio_File class


*/
swig_class cTrueAudio_File;


/*
  Document-method: TagLib::TagTypes.NoTags

  call-seq:
    NoTags -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.ID3v1

  call-seq:
    ID3v1 -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.ID3v2

  call-seq:
    ID3v2 -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.AllTags

  call-seq:
    AllTags -> int

A class method.

*/

/*
  Document-method: TagLib::TrueAudio_File.new

  call-seq:
    TrueAudio_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    TrueAudio_File.new(FileName file, bool readProperties=true)
    TrueAudio_File.new(FileName file)
    TrueAudio_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true, 
    ReadStyle propertiesStyle=Average)
    TrueAudio_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true)
    TrueAudio_File.new(FileName file, ID3v2_FrameFactory frameFactory)

Class constructor.

*/
VALUE
_wrap_new_TrueAudio_File__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::TrueAudio::Properties::ReadStyle arg3 ;
  TagLib::TrueAudio::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::TrueAudio::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::TrueAudio::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::TrueAudio::Properties::ReadStyle","TagLib::TrueAudio::File", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::TrueAudio::Properties::ReadStyle >(val3);
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}



/*
  Document-method: TagLib::TrueAudio_File.new

  call-seq:
    TrueAudio_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    TrueAudio_File.new(FileName file, bool readProperties=true)
    TrueAudio_File.new(FileName file)
    TrueAudio_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true, 
    ReadStyle propertiesStyle=Average)
    TrueAudio_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true)
    TrueAudio_File.new(FileName file, ID3v2_FrameFactory frameFactory)

Class constructor.

*/
VALUE
_wrap_new_TrueAudio_File__SWIG_1(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::TrueAudio::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::TrueAudio::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::TrueAudio::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE
_wrap_new_TrueAudio_File__SWIG_2(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::TrueAudio::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::TrueAudio::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE
_wrap_new_TrueAudio_File__SWIG_3(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::TrueAudio::Properties::ReadStyle arg4 ;
  TagLib::TrueAudio::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::TrueAudio::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory *","TagLib::TrueAudio::File", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","TagLib::TrueAudio::File", 3, argv[2] ));
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "TagLib::TrueAudio::Properties::ReadStyle","TagLib::TrueAudio::File", 4, argv[3] ));
  } 
  arg4 = static_cast< TagLib::TrueAudio::Properties::ReadStyle >(val4);
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1,arg2,arg3,arg4);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE
_wrap_new_TrueAudio_File__SWIG_4(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::TrueAudio::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::TrueAudio::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory *","TagLib::TrueAudio::File", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","TagLib::TrueAudio::File", 3, argv[2] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_TrueAudio_File_allocate(VALUE self) {
#else
  VALUE
  _wrap_TrueAudio_File_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__TrueAudio__File);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_TrueAudio_File__SWIG_5(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::TrueAudio::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::TrueAudio::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory *","TagLib::TrueAudio::File", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  result = (TagLib::TrueAudio::File *)new TagLib::TrueAudio::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_TrueAudio_File(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TrueAudio_File__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TrueAudio_File__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TrueAudio_File__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TrueAudio_File__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TrueAudio_File__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_TrueAudio_File__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "File.new", 
    "    File.new(FileName file, bool readProperties, TagLib::TrueAudio::Properties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, bool readProperties)\n"
    "    File.new(FileName file)\n"
    "    File.new(FileName file, TagLib::ID3v2::FrameFactory *frameFactory, bool readProperties, TagLib::TrueAudio::Properties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, TagLib::ID3v2::FrameFactory *frameFactory, bool readProperties)\n"
    "    File.new(FileName file, TagLib::ID3v2::FrameFactory *frameFactory)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_TrueAudio_File(TagLib::TrueAudio::File *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::TrueAudio_File.audioProperties

  call-seq:
    audioProperties -> TrueAudio_Properties

An instance method.

*/
VALUE
_wrap_TrueAudio_File_audioProperties(int argc, VALUE *argv, VALUE self) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  TagLib::TrueAudio::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__TrueAudio__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::TrueAudio::File const *","audioProperties", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::TrueAudio::File * >(argp1);
  result = (TagLib::TrueAudio::Properties *)((TagLib::TrueAudio::File const *)arg1)->audioProperties();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__TrueAudio__Properties, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::TrueAudio_File.setID3v2FrameFactory

  call-seq:
    setID3v2FrameFactory(ID3v2_FrameFactory factory)

An instance method.

*/
VALUE
_wrap_TrueAudio_File_setID3v2FrameFactory(int argc, VALUE *argv, VALUE self) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__TrueAudio__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::TrueAudio::File *","setID3v2FrameFactory", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::TrueAudio::File * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory const *","setID3v2FrameFactory", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  (arg1)->setID3v2FrameFactory((TagLib::ID3v2::FrameFactory const *)arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::TrueAudio_File.ID3v1Tag

  call-seq:
    ID3v1Tag(bool create=false) -> ID3v1_Tag
    ID3v1Tag -> ID3v1_Tag

An instance method.

*/
VALUE
_wrap_TrueAudio_File_ID3v1Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__TrueAudio__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::TrueAudio::File *","ID3v1Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::TrueAudio::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ID3v1Tag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_TrueAudio_File_ID3v1Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__TrueAudio__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::TrueAudio::File *","ID3v1Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::TrueAudio::File * >(argp1);
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_TrueAudio_File_ID3v1Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__TrueAudio__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TrueAudio_File_ID3v1Tag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__TrueAudio__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TrueAudio_File_ID3v1Tag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "TrueAudio_File.ID3v1Tag", 
    "    TagLib::ID3v1::Tag * TrueAudio_File.ID3v1Tag(bool create)\n"
    "    TagLib::ID3v1::Tag * TrueAudio_File.ID3v1Tag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::TrueAudio_File.ID3v2Tag

  call-seq:
    ID3v2Tag(bool create=false) -> ID3v2_Tag
    ID3v2Tag -> ID3v2_Tag

An instance method.

*/
VALUE
_wrap_TrueAudio_File_ID3v2Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v2::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__TrueAudio__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::TrueAudio::File *","ID3v2Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::TrueAudio::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ID3v2Tag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_TrueAudio_File_ID3v2Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__TrueAudio__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::TrueAudio::File *","ID3v2Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::TrueAudio::File * >(argp1);
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_TrueAudio_File_ID3v2Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__TrueAudio__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TrueAudio_File_ID3v2Tag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__TrueAudio__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TrueAudio_File_ID3v2Tag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "TrueAudio_File.ID3v2Tag", 
    "    TagLib::ID3v2::Tag * TrueAudio_File.ID3v2Tag(bool create)\n"
    "    TagLib::ID3v2::Tag * TrueAudio_File.ID3v2Tag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::TrueAudio_File.strip

  call-seq:
    strip(int tags=AllTags)
    strip

An instance method.

*/
VALUE
_wrap_TrueAudio_File_strip__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__TrueAudio__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::TrueAudio::File *","strip", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::TrueAudio::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","strip", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->strip(arg2);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_TrueAudio_File_strip__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::TrueAudio::File *arg1 = (TagLib::TrueAudio::File *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__TrueAudio__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::TrueAudio::File *","strip", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::TrueAudio::File * >(argp1);
  (arg1)->strip();
  return Qnil;
fail:
  return Qnil;
}


VALUE _wrap_TrueAudio_File_strip(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__TrueAudio__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TrueAudio_File_strip__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__TrueAudio__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TrueAudio_File_strip__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "TrueAudio_File.strip", 
    "    void TrueAudio_File.strip(int tags)\n"
    "    void TrueAudio_File.strip()\n");
  
  return Qnil;
}



/*
  Document-class: TagLib::WavPack_Properties < TagLib::TagLib::AudioProperties

  Proxy of C++ TagLib::WavPack_Properties class


*/
swig_class cWavPack_Properties;


/*
  Document-method: TagLib::WavPack_Properties.new

  call-seq:
    WavPack_Properties.new(ByteVector data, long streamLength, ReadStyle style=Average)
    WavPack_Properties.new(ByteVector data, long streamLength)

Class constructor.

*/
VALUE
_wrap_new_WavPack_Properties__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::AudioProperties::ReadStyle arg3 ;
  TagLib::WavPack::Properties *result = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::WavPack::Properties", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::AudioProperties::ReadStyle","TagLib::WavPack::Properties", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::AudioProperties::ReadStyle >(val3);
  result = (TagLib::WavPack::Properties *)new TagLib::WavPack::Properties((TagLib::ByteVector const &)*arg1,arg2,arg3);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_WavPack_Properties_allocate(VALUE self) {
#else
  VALUE
  _wrap_WavPack_Properties_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__WavPack__Properties);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::WavPack_Properties.new

  call-seq:
    WavPack_Properties.new(ByteVector data, long streamLength, ReadStyle style=Average)
    WavPack_Properties.new(ByteVector data, long streamLength)

Class constructor.

*/
VALUE
_wrap_new_WavPack_Properties__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  long arg2 ;
  TagLib::WavPack::Properties *result = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  ecode2 = SWIG_AsVal_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","TagLib::WavPack::Properties", 2, argv[1] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (TagLib::WavPack::Properties *)new TagLib::WavPack::Properties((TagLib::ByteVector const &)*arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_WavPack_Properties(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_WavPack_Properties__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_WavPack_Properties__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Properties.new", 
    "    Properties.new(TagLib::ByteVector const &data, long streamLength, TagLib::AudioProperties::ReadStyle style)\n"
    "    Properties.new(TagLib::ByteVector const &data, long streamLength)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::WavPack_Properties.bitsPerSample

  call-seq:
    bitsPerSample -> int

An instance method.

*/
VALUE
_wrap_WavPack_Properties_bitsPerSample(int argc, VALUE *argv, VALUE self) {
  TagLib::WavPack::Properties *arg1 = (TagLib::WavPack::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__WavPack__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::WavPack::Properties const *","bitsPerSample", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::WavPack::Properties * >(argp1);
  result = (int)((TagLib::WavPack::Properties const *)arg1)->bitsPerSample();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::WavPack_Properties.version

  call-seq:
    version -> int

An instance method.

*/
VALUE
_wrap_WavPack_Properties_version(int argc, VALUE *argv, VALUE self) {
  TagLib::WavPack::Properties *arg1 = (TagLib::WavPack::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__WavPack__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::WavPack::Properties const *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::WavPack::Properties * >(argp1);
  result = (int)((TagLib::WavPack::Properties const *)arg1)->version();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::WavPack_File < TagLib::TagLib::File

  Proxy of C++ TagLib::WavPack_File class


*/
swig_class cWavPack_File;


/*
  Document-method: TagLib::TagTypes.NoTags

  call-seq:
    NoTags -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.ID3v1

  call-seq:
    ID3v1 -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.APE

  call-seq:
    APE -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.AllTags

  call-seq:
    AllTags -> int

A class method.

*/

/*
  Document-method: TagLib::WavPack_File.new

  call-seq:
    WavPack_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    WavPack_File.new(FileName file, bool readProperties=true)
    WavPack_File.new(FileName file)

Class constructor.

*/
VALUE
_wrap_new_WavPack_File__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::WavPack::Properties::ReadStyle arg3 ;
  TagLib::WavPack::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::WavPack::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::WavPack::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::WavPack::Properties::ReadStyle","TagLib::WavPack::File", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::WavPack::Properties::ReadStyle >(val3);
  result = (TagLib::WavPack::File *)new TagLib::WavPack::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}



/*
  Document-method: TagLib::WavPack_File.new

  call-seq:
    WavPack_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    WavPack_File.new(FileName file, bool readProperties=true)
    WavPack_File.new(FileName file)

Class constructor.

*/
VALUE
_wrap_new_WavPack_File__SWIG_1(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::WavPack::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::WavPack::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::WavPack::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::WavPack::File *)new TagLib::WavPack::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_WavPack_File_allocate(VALUE self) {
#else
  VALUE
  _wrap_WavPack_File_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__WavPack__File);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_WavPack_File__SWIG_2(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::WavPack::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::WavPack::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  result = (TagLib::WavPack::File *)new TagLib::WavPack::File(arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_WavPack_File(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WavPack_File__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_WavPack_File__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_WavPack_File__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "File.new", 
    "    File.new(FileName file, bool readProperties, TagLib::WavPack::Properties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, bool readProperties)\n"
    "    File.new(FileName file)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_WavPack_File(TagLib::WavPack::File *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::WavPack_File.audioProperties

  call-seq:
    audioProperties -> WavPack_Properties

An instance method.

*/
VALUE
_wrap_WavPack_File_audioProperties(int argc, VALUE *argv, VALUE self) {
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  TagLib::WavPack::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__WavPack__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::WavPack::File const *","audioProperties", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::WavPack::File * >(argp1);
  result = (TagLib::WavPack::Properties *)((TagLib::WavPack::File const *)arg1)->audioProperties();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__WavPack__Properties, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::WavPack_File.ID3v1Tag

  call-seq:
    ID3v1Tag(bool create=false) -> ID3v1_Tag
    ID3v1Tag -> ID3v1_Tag

An instance method.

*/
VALUE
_wrap_WavPack_File_ID3v1Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__WavPack__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::WavPack::File *","ID3v1Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::WavPack::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ID3v1Tag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_WavPack_File_ID3v1Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__WavPack__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::WavPack::File *","ID3v1Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::WavPack::File * >(argp1);
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_WavPack_File_ID3v1Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__WavPack__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WavPack_File_ID3v1Tag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__WavPack__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WavPack_File_ID3v1Tag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "WavPack_File.ID3v1Tag", 
    "    TagLib::ID3v1::Tag * WavPack_File.ID3v1Tag(bool create)\n"
    "    TagLib::ID3v1::Tag * WavPack_File.ID3v1Tag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::WavPack_File.APETag

  call-seq:
    APETag(bool create=false) -> APE_Tag
    APETag -> APE_Tag

An instance method.

*/
VALUE
_wrap_WavPack_File_APETag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  bool arg2 ;
  TagLib::APE::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__WavPack__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::WavPack::File *","APETag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::WavPack::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","APETag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::APE::Tag *)(arg1)->APETag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_WavPack_File_APETag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  TagLib::APE::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__WavPack__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::WavPack::File *","APETag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::WavPack::File * >(argp1);
  result = (TagLib::APE::Tag *)(arg1)->APETag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_WavPack_File_APETag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__WavPack__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WavPack_File_APETag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__WavPack__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WavPack_File_APETag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "WavPack_File.APETag", 
    "    TagLib::APE::Tag * WavPack_File.APETag(bool create)\n"
    "    TagLib::APE::Tag * WavPack_File.APETag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::WavPack_File.strip

  call-seq:
    strip(int tags=AllTags)
    strip

An instance method.

*/
VALUE
_wrap_WavPack_File_strip__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__WavPack__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::WavPack::File *","strip", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::WavPack::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","strip", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->strip(arg2);
  return Qnil;
fail:
  return Qnil;
}


VALUE
_wrap_WavPack_File_strip__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::WavPack::File *arg1 = (TagLib::WavPack::File *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__WavPack__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::WavPack::File *","strip", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::WavPack::File * >(argp1);
  (arg1)->strip();
  return Qnil;
fail:
  return Qnil;
}


VALUE _wrap_WavPack_File_strip(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__WavPack__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WavPack_File_strip__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__WavPack__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WavPack_File_strip__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "WavPack_File.strip", 
    "    void WavPack_File.strip(int tags)\n"
    "    void WavPack_File.strip()\n");
  
  return Qnil;
}



/*
  Document-class: TagLib::MPEG_Header

  Proxy of C++ TagLib::MPEG_Header class


*/
swig_class cMPEG_Header;


/*
  Document-method: TagLib::Version.Version1

  call-seq:
    Version1 -> int

A class method.

*/

/*
  Document-method: TagLib::Version.Version2

  call-seq:
    Version2 -> int

A class method.

*/

/*
  Document-method: TagLib::Version.Version2_5

  call-seq:
    Version2_5 -> int

A class method.

*/

/*
  Document-method: TagLib::ChannelMode.Stereo

  call-seq:
    Stereo -> int

A class method.

*/

/*
  Document-method: TagLib::ChannelMode.JointStereo

  call-seq:
    JointStereo -> int

A class method.

*/

/*
  Document-method: TagLib::ChannelMode.DualChannel

  call-seq:
    DualChannel -> int

A class method.

*/

/*
  Document-method: TagLib::ChannelMode.SingleChannel

  call-seq:
    SingleChannel -> int

A class method.

*/

/*
  Document-method: TagLib::MPEG_Header.new

  call-seq:
    MPEG_Header.new(ByteVector data)
    MPEG_Header.new(MPEG_Header h)

Class constructor.

*/
VALUE
_wrap_new_MPEG_Header__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::MPEG::Header *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  result = (TagLib::MPEG::Header *)new TagLib::MPEG::Header((TagLib::ByteVector const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_MPEG_Header_allocate(VALUE self) {
#else
  VALUE
  _wrap_MPEG_Header_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__MPEG__Header);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::MPEG_Header.new

  call-seq:
    MPEG_Header.new(ByteVector data)
    MPEG_Header.new(MPEG_Header h)

Class constructor.

*/
VALUE
_wrap_new_MPEG_Header__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = 0 ;
  TagLib::MPEG::Header *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_TagLib__MPEG__Header,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const &","TagLib::MPEG::Header", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "TagLib::MPEG::Header const &","TagLib::MPEG::Header", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (TagLib::MPEG::Header *)new TagLib::MPEG::Header((TagLib::MPEG::Header const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_MPEG_Header(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__ByteVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MPEG_Header__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__Header, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MPEG_Header__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Header.new", 
    "    Header.new(TagLib::ByteVector const &data)\n"
    "    Header.new(TagLib::MPEG::Header const &h)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_MPEG_Header(TagLib::MPEG::Header *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::MPEG_Header.isValid

  call-seq:
    isValid -> bool

An instance method.

*/
VALUE
_wrap_MPEG_Header_isValid(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","isValid", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (bool)((TagLib::MPEG::Header const *)arg1)->isValid();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.version

  call-seq:
    version -> int

An instance method.

*/
VALUE
_wrap_MPEG_Header_version(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  TagLib::MPEG::Header::Version result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (TagLib::MPEG::Header::Version)((TagLib::MPEG::Header const *)arg1)->version();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.layer

  call-seq:
    layer -> int

An instance method.

*/
VALUE
_wrap_MPEG_Header_layer(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","layer", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (int)((TagLib::MPEG::Header const *)arg1)->layer();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.protectionEnabled

  call-seq:
    protectionEnabled -> bool

An instance method.

*/
VALUE
_wrap_MPEG_Header_protectionEnabled(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","protectionEnabled", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (bool)((TagLib::MPEG::Header const *)arg1)->protectionEnabled();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.bitrate

  call-seq:
    bitrate -> int

An instance method.

*/
VALUE
_wrap_MPEG_Header_bitrate(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","bitrate", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (int)((TagLib::MPEG::Header const *)arg1)->bitrate();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.sampleRate

  call-seq:
    sampleRate -> int

An instance method.

*/
VALUE
_wrap_MPEG_Header_sampleRate(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","sampleRate", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (int)((TagLib::MPEG::Header const *)arg1)->sampleRate();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.isPadded

  call-seq:
    isPadded -> bool

An instance method.

*/
VALUE
_wrap_MPEG_Header_isPadded(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","isPadded", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (bool)((TagLib::MPEG::Header const *)arg1)->isPadded();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.channelMode

  call-seq:
    channelMode -> int

An instance method.

*/
VALUE
_wrap_MPEG_Header_channelMode(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  TagLib::MPEG::Header::ChannelMode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","channelMode", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (TagLib::MPEG::Header::ChannelMode)((TagLib::MPEG::Header const *)arg1)->channelMode();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.isCopyrighted

  call-seq:
    isCopyrighted -> bool

An instance method.

*/
VALUE
_wrap_MPEG_Header_isCopyrighted(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","isCopyrighted", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (bool)((TagLib::MPEG::Header const *)arg1)->isCopyrighted();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.isOriginal

  call-seq:
    isOriginal -> bool

An instance method.

*/
VALUE
_wrap_MPEG_Header_isOriginal(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","isOriginal", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (bool)((TagLib::MPEG::Header const *)arg1)->isOriginal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.frameLength

  call-seq:
    frameLength -> int

An instance method.

*/
VALUE
_wrap_MPEG_Header_frameLength(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","frameLength", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (int)((TagLib::MPEG::Header const *)arg1)->frameLength();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Header.samplesPerFrame

  call-seq:
    samplesPerFrame -> int

An instance method.

*/
VALUE
_wrap_MPEG_Header_samplesPerFrame(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Header *arg1 = (TagLib::MPEG::Header *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Header, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Header const *","samplesPerFrame", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Header * >(argp1);
  result = (int)((TagLib::MPEG::Header const *)arg1)->samplesPerFrame();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::MPEG_XingHeader

  Proxy of C++ TagLib::MPEG_XingHeader class


*/
swig_class cMPEG_XingHeader;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_MPEG_XingHeader_allocate(VALUE self) {
#else
  VALUE
  _wrap_MPEG_XingHeader_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__MPEG__XingHeader);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::MPEG_XingHeader.new

  call-seq:
    MPEG_XingHeader.new(ByteVector data)

Class constructor.

*/
VALUE
_wrap_new_MPEG_XingHeader(int argc, VALUE *argv, VALUE self) {
  TagLib::ByteVector *arg1 = 0 ;
  TagLib::MPEG::XingHeader *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    Check_Type(argv[0], T_STRING);
    arg1=new TagLib::ByteVector(StringValuePtr(argv[0]), RSTRING_LEN(argv[0]));
  }
  result = (TagLib::MPEG::XingHeader *)new TagLib::MPEG::XingHeader((TagLib::ByteVector const &)*arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_TagLib_MPEG_XingHeader(TagLib::MPEG::XingHeader *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::MPEG_XingHeader.isValid

  call-seq:
    isValid -> bool

An instance method.

*/
VALUE
_wrap_MPEG_XingHeader_isValid(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::XingHeader *arg1 = (TagLib::MPEG::XingHeader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__XingHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::XingHeader const *","isValid", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::XingHeader * >(argp1);
  result = (bool)((TagLib::MPEG::XingHeader const *)arg1)->isValid();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_XingHeader.totalFrames

  call-seq:
    totalFrames -> uint

An instance method.

*/
VALUE
_wrap_MPEG_XingHeader_totalFrames(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::XingHeader *arg1 = (TagLib::MPEG::XingHeader *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__XingHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::XingHeader const *","totalFrames", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::XingHeader * >(argp1);
  result = (uint)((TagLib::MPEG::XingHeader const *)arg1)->totalFrames();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_XingHeader.totalSize

  call-seq:
    totalSize -> uint

An instance method.

*/
VALUE
_wrap_MPEG_XingHeader_totalSize(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::XingHeader *arg1 = (TagLib::MPEG::XingHeader *) 0 ;
  uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__XingHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::XingHeader const *","totalSize", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::XingHeader * >(argp1);
  result = (uint)((TagLib::MPEG::XingHeader const *)arg1)->totalSize();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::MPEG_Properties < TagLib::TagLib::AudioProperties

  Proxy of C++ TagLib::MPEG_Properties class


*/
swig_class cMPEG_Properties;


/*
  Document-method: TagLib::MPEG_Properties.new

  call-seq:
    MPEG_Properties.new(MPEG_File file, ReadStyle style=Average)
    MPEG_Properties.new(MPEG_File file)

Class constructor.

*/
VALUE
_wrap_new_MPEG_Properties__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::AudioProperties::ReadStyle arg2 ;
  TagLib::MPEG::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","TagLib::MPEG::Properties", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "TagLib::AudioProperties::ReadStyle","TagLib::MPEG::Properties", 2, argv[1] ));
  } 
  arg2 = static_cast< TagLib::AudioProperties::ReadStyle >(val2);
  result = (TagLib::MPEG::Properties *)new TagLib::MPEG::Properties(arg1,arg2);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_MPEG_Properties_allocate(VALUE self) {
#else
  VALUE
  _wrap_MPEG_Properties_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__MPEG__Properties);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  


/*
  Document-method: TagLib::MPEG_Properties.new

  call-seq:
    MPEG_Properties.new(MPEG_File file, ReadStyle style=Average)
    MPEG_Properties.new(MPEG_File file)

Class constructor.

*/
VALUE
_wrap_new_MPEG_Properties__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::MPEG::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","TagLib::MPEG::Properties", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  result = (TagLib::MPEG::Properties *)new TagLib::MPEG::Properties(arg1);DATA_PTR(self) = result;
  
  return self;
fail:
  return Qnil;
}


VALUE _wrap_new_MPEG_Properties(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MPEG_Properties__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MPEG_Properties__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Properties.new", 
    "    Properties.new(TagLib::MPEG::File *file, TagLib::AudioProperties::ReadStyle style)\n"
    "    Properties.new(TagLib::MPEG::File *file)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Properties.xingHeader

  call-seq:
    xingHeader -> MPEG_XingHeader

An instance method.

*/
VALUE
_wrap_MPEG_Properties_xingHeader(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  TagLib::MPEG::XingHeader *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Properties const *","xingHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Properties * >(argp1);
  result = (TagLib::MPEG::XingHeader *)((TagLib::MPEG::Properties const *)arg1)->xingHeader();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MPEG__XingHeader, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Properties.version

  call-seq:
    version -> int

An instance method.

*/
VALUE
_wrap_MPEG_Properties_version(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  TagLib::MPEG::Header::Version result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Properties const *","version", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Properties * >(argp1);
  result = (TagLib::MPEG::Header::Version)((TagLib::MPEG::Properties const *)arg1)->version();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Properties.layer

  call-seq:
    layer -> int

An instance method.

*/
VALUE
_wrap_MPEG_Properties_layer(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Properties const *","layer", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Properties * >(argp1);
  result = (int)((TagLib::MPEG::Properties const *)arg1)->layer();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Properties.protectionEnabled

  call-seq:
    protectionEnabled -> bool

An instance method.

*/
VALUE
_wrap_MPEG_Properties_protectionEnabled(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Properties const *","protectionEnabled", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Properties * >(argp1);
  result = (bool)((TagLib::MPEG::Properties const *)arg1)->protectionEnabled();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Properties.channelMode

  call-seq:
    channelMode -> int

An instance method.

*/
VALUE
_wrap_MPEG_Properties_channelMode(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  TagLib::MPEG::Header::ChannelMode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Properties const *","channelMode", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Properties * >(argp1);
  result = (TagLib::MPEG::Header::ChannelMode)((TagLib::MPEG::Properties const *)arg1)->channelMode();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Properties.isCopyrighted

  call-seq:
    isCopyrighted -> bool

An instance method.

*/
VALUE
_wrap_MPEG_Properties_isCopyrighted(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Properties const *","isCopyrighted", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Properties * >(argp1);
  result = (bool)((TagLib::MPEG::Properties const *)arg1)->isCopyrighted();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_Properties.isOriginal

  call-seq:
    isOriginal -> bool

An instance method.

*/
VALUE
_wrap_MPEG_Properties_isOriginal(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::Properties *arg1 = (TagLib::MPEG::Properties *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__Properties, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::Properties const *","isOriginal", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::Properties * >(argp1);
  result = (bool)((TagLib::MPEG::Properties const *)arg1)->isOriginal();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-class: TagLib::MPEG_File < TagLib::TagLib::File

  Proxy of C++ TagLib::MPEG_File class


*/
swig_class cMPEG_File;


/*
  Document-method: TagLib::TagTypes.NoTags

  call-seq:
    NoTags -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.ID3v1

  call-seq:
    ID3v1 -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.ID3v2

  call-seq:
    ID3v2 -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.APE

  call-seq:
    APE -> int

A class method.

*/

/*
  Document-method: TagLib::TagTypes.AllTags

  call-seq:
    AllTags -> int

A class method.

*/

/*
  Document-method: TagLib::MPEG_File.new

  call-seq:
    MPEG_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    MPEG_File.new(FileName file, bool readProperties=true)
    MPEG_File.new(FileName file)
    MPEG_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true, 
    ReadStyle propertiesStyle=Average)
    MPEG_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true)
    MPEG_File.new(FileName file, ID3v2_FrameFactory frameFactory)

Class constructor.

*/
VALUE
_wrap_new_MPEG_File__SWIG_0(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::MPEG::Properties::ReadStyle arg3 ;
  TagLib::MPEG::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::MPEG::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::MPEG::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "TagLib::MPEG::Properties::ReadStyle","TagLib::MPEG::File", 3, argv[2] ));
  } 
  arg3 = static_cast< TagLib::MPEG::Properties::ReadStyle >(val3);
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.new

  call-seq:
    MPEG_File.new(FileName file, bool readProperties=true, ReadStyle propertiesStyle=Average)
    MPEG_File.new(FileName file, bool readProperties=true)
    MPEG_File.new(FileName file)
    MPEG_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true, 
    ReadStyle propertiesStyle=Average)
    MPEG_File.new(FileName file, ID3v2_FrameFactory frameFactory, bool readProperties=true)
    MPEG_File.new(FileName file, ID3v2_FrameFactory frameFactory)

Class constructor.

*/
VALUE
_wrap_new_MPEG_File__SWIG_1(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::MPEG::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::MPEG::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","TagLib::MPEG::File", 2, argv[1] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE
_wrap_new_MPEG_File__SWIG_2(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::MPEG::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::MPEG::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE
_wrap_new_MPEG_File__SWIG_3(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::MPEG::Properties::ReadStyle arg4 ;
  TagLib::MPEG::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::MPEG::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory *","TagLib::MPEG::File", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","TagLib::MPEG::File", 3, argv[2] ));
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "TagLib::MPEG::Properties::ReadStyle","TagLib::MPEG::File", 4, argv[3] ));
  } 
  arg4 = static_cast< TagLib::MPEG::Properties::ReadStyle >(val4);
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1,arg2,arg3,arg4);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE
_wrap_new_MPEG_File__SWIG_4(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  bool arg3 ;
  TagLib::MPEG::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::MPEG::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory *","TagLib::MPEG::File", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","TagLib::MPEG::File", 3, argv[2] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1,arg2,arg3);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
VALUE
_wrap_MPEG_File_allocate(VALUE self) {
#else
  VALUE
  _wrap_MPEG_File_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_TagLib__MPEG__File);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

VALUE
_wrap_new_MPEG_File__SWIG_5(int argc, VALUE *argv, VALUE self) {
  FileName arg1 = (FileName) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  TagLib::MPEG::File *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "FileName","TagLib::MPEG::File", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< FileName >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory *","TagLib::MPEG::File", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  result = (TagLib::MPEG::File *)new TagLib::MPEG::File(arg1,arg2);DATA_PTR(self) = result;
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


VALUE _wrap_new_MPEG_File(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MPEG_File__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MPEG_File__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MPEG_File__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MPEG_File__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MPEG_File__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_MPEG_File__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "File.new", 
    "    File.new(FileName file, bool readProperties, TagLib::MPEG::Properties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, bool readProperties)\n"
    "    File.new(FileName file)\n"
    "    File.new(FileName file, TagLib::ID3v2::FrameFactory *frameFactory, bool readProperties, TagLib::MPEG::Properties::ReadStyle propertiesStyle)\n"
    "    File.new(FileName file, TagLib::ID3v2::FrameFactory *frameFactory, bool readProperties)\n"
    "    File.new(FileName file, TagLib::ID3v2::FrameFactory *frameFactory)\n");
  
  return Qnil;
}


SWIGINTERN void
free_TagLib_MPEG_File(TagLib::MPEG::File *arg1) {
    delete arg1;
}


/*
  Document-method: TagLib::MPEG_File.audioProperties

  call-seq:
    audioProperties -> MPEG_Properties

An instance method.

*/
VALUE
_wrap_MPEG_File_audioProperties(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::MPEG::Properties *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File const *","audioProperties", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  result = (TagLib::MPEG::Properties *)((TagLib::MPEG::File const *)arg1)->audioProperties();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__MPEG__Properties, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.save

  call-seq:
    save -> bool
    save(int tags) -> bool
    save(int tags, bool stripOthers) -> bool

An instance method.

*/
VALUE
_wrap_MPEG_File_save__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","save", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  result = (bool)(arg1)->save();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_MPEG_File_save__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","save", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","save", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->save(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_MPEG_File_save__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","save", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","save", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","save", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->save(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_MPEG_File_save(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MPEG_File_save__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MPEG_File_save__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MPEG_File_save__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MPEG_File.save", 
    "    bool MPEG_File.save()\n"
    "    bool MPEG_File.save(int tags)\n"
    "    bool MPEG_File.save(int tags, bool stripOthers)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.ID3v2Tag

  call-seq:
    ID3v2Tag(bool create=false) -> ID3v2_Tag
    ID3v2Tag -> ID3v2_Tag

An instance method.

*/
VALUE
_wrap_MPEG_File_ID3v2Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v2::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","ID3v2Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ID3v2Tag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_MPEG_File_ID3v2Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::ID3v2::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","ID3v2Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  result = (TagLib::ID3v2::Tag *)(arg1)->ID3v2Tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v2__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_MPEG_File_ID3v2Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MPEG_File_ID3v2Tag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MPEG_File_ID3v2Tag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MPEG_File.ID3v2Tag", 
    "    TagLib::ID3v2::Tag * MPEG_File.ID3v2Tag(bool create)\n"
    "    TagLib::ID3v2::Tag * MPEG_File.ID3v2Tag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.ID3v1Tag

  call-seq:
    ID3v1Tag(bool create=false) -> ID3v1_Tag
    ID3v1Tag -> ID3v1_Tag

An instance method.

*/
VALUE
_wrap_MPEG_File_ID3v1Tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  bool arg2 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","ID3v1Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ID3v1Tag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_MPEG_File_ID3v1Tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::ID3v1::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","ID3v1Tag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  result = (TagLib::ID3v1::Tag *)(arg1)->ID3v1Tag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__ID3v1__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_MPEG_File_ID3v1Tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MPEG_File_ID3v1Tag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MPEG_File_ID3v1Tag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MPEG_File.ID3v1Tag", 
    "    TagLib::ID3v1::Tag * MPEG_File.ID3v1Tag(bool create)\n"
    "    TagLib::ID3v1::Tag * MPEG_File.ID3v1Tag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.APETag

  call-seq:
    APETag(bool create=false) -> APE_Tag
    APETag -> APE_Tag

An instance method.

*/
VALUE
_wrap_MPEG_File_APETag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  bool arg2 ;
  TagLib::APE::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","APETag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","APETag", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (TagLib::APE::Tag *)(arg1)->APETag(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_MPEG_File_APETag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::APE::Tag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","APETag", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  result = (TagLib::APE::Tag *)(arg1)->APETag();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TagLib__APE__Tag, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_MPEG_File_APETag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MPEG_File_APETag__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MPEG_File_APETag__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MPEG_File.APETag", 
    "    TagLib::APE::Tag * MPEG_File.APETag(bool create)\n"
    "    TagLib::APE::Tag * MPEG_File.APETag()\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.strip

  call-seq:
    strip(int tags=AllTags) -> bool
    strip -> bool
    strip(int tags, bool freeMemory) -> bool

An instance method.

*/
VALUE
_wrap_MPEG_File_strip__SWIG_0(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","strip", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","strip", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->strip(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_MPEG_File_strip__SWIG_1(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","strip", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  result = (bool)(arg1)->strip();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


VALUE
_wrap_MPEG_File_strip__SWIG_2(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","strip", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","strip", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","strip", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->strip(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


VALUE _wrap_MPEG_File_strip(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MPEG_File_strip__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MPEG_File_strip__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TagLib__MPEG__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MPEG_File_strip__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "MPEG_File.strip", 
    "    bool MPEG_File.strip(int tags)\n"
    "    bool MPEG_File.strip()\n"
    "    bool MPEG_File.strip(int tags, bool freeMemory)\n");
  
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.setID3v2FrameFactory

  call-seq:
    setID3v2FrameFactory(ID3v2_FrameFactory factory)

An instance method.

*/
VALUE
_wrap_MPEG_File_setID3v2FrameFactory(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  TagLib::ID3v2::FrameFactory *arg2 = (TagLib::ID3v2::FrameFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","setID3v2FrameFactory", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_TagLib__ID3v2__FrameFactory, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "TagLib::ID3v2::FrameFactory const *","setID3v2FrameFactory", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< TagLib::ID3v2::FrameFactory * >(argp2);
  (arg1)->setID3v2FrameFactory((TagLib::ID3v2::FrameFactory const *)arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.firstFrameOffset

  call-seq:
    firstFrameOffset -> long

An instance method.

*/
VALUE
_wrap_MPEG_File_firstFrameOffset(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","firstFrameOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  result = (long)(arg1)->firstFrameOffset();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.nextFrameOffset

  call-seq:
    nextFrameOffset(long position) -> long

An instance method.

*/
VALUE
_wrap_MPEG_File_nextFrameOffset(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  long arg2 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","nextFrameOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","nextFrameOffset", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (long)(arg1)->nextFrameOffset(arg2);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.previousFrameOffset

  call-seq:
    previousFrameOffset(long position) -> long

An instance method.

*/
VALUE
_wrap_MPEG_File_previousFrameOffset(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  long arg2 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","previousFrameOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  ecode2 = SWIG_AsVal_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "long","previousFrameOffset", 2, argv[0] ));
  } 
  arg2 = static_cast< long >(val2);
  result = (long)(arg1)->previousFrameOffset(arg2);
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: TagLib::MPEG_File.lastFrameOffset

  call-seq:
    lastFrameOffset -> long

An instance method.

*/
VALUE
_wrap_MPEG_File_lastFrameOffset(int argc, VALUE *argv, VALUE self) {
  TagLib::MPEG::File *arg1 = (TagLib::MPEG::File *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_TagLib__MPEG__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "TagLib::MPEG::File *","lastFrameOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< TagLib::MPEG::File * >(argp1);
  result = (long)(arg1)->lastFrameOffset();
  vresult = SWIG_From_long(static_cast< long >(result));
  return vresult;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_TagLib__Ogg__Speex__PropertiesTo_p_TagLib__AudioProperties(void *x, int *newmemory) {
    return (void *)((TagLib::AudioProperties *)  ((TagLib::Ogg::Speex::Properties *) x));
}
static void *_p_TagLib__Vorbis__PropertiesTo_p_TagLib__AudioProperties(void *x, int *newmemory) {
    return (void *)((TagLib::AudioProperties *)  ((TagLib::Vorbis::Properties *) x));
}
static void *_p_TagLib__FLAC__PropertiesTo_p_TagLib__AudioProperties(void *x, int *newmemory) {
    return (void *)((TagLib::AudioProperties *)  ((TagLib::FLAC::Properties *) x));
}
static void *_p_TagLib__MPC__PropertiesTo_p_TagLib__AudioProperties(void *x, int *newmemory) {
    return (void *)((TagLib::AudioProperties *)  ((TagLib::MPC::Properties *) x));
}
static void *_p_TagLib__TrueAudio__PropertiesTo_p_TagLib__AudioProperties(void *x, int *newmemory) {
    return (void *)((TagLib::AudioProperties *)  ((TagLib::TrueAudio::Properties *) x));
}
static void *_p_TagLib__WavPack__PropertiesTo_p_TagLib__AudioProperties(void *x, int *newmemory) {
    return (void *)((TagLib::AudioProperties *)  ((TagLib::WavPack::Properties *) x));
}
static void *_p_TagLib__MPEG__PropertiesTo_p_TagLib__AudioProperties(void *x, int *newmemory) {
    return (void *)((TagLib::AudioProperties *)  ((TagLib::MPEG::Properties *) x));
}
static void *_p_TagLib__ID3v2__AttachedPictureFrameTo_p_TagLib__ID3v2__Frame(void *x, int *newmemory) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::AttachedPictureFrame *) x));
}
static void *_p_TagLib__ID3v2__CommentsFrameTo_p_TagLib__ID3v2__Frame(void *x, int *newmemory) {
    return (void *)((TagLib::ID3v2::Frame *)  ((TagLib::ID3v2::CommentsFrame *) x));
}
static void *_p_p_TagLib__ID3v2__AttachedPictureFrameTo_p_p_TagLib__ID3v2__Frame(void *x, int *newmemory) {
    return (void *)((TagLib::ID3v2::Frame **)  ((TagLib::ID3v2::AttachedPictureFrame **) x));
}
static void *_p_p_TagLib__ID3v2__CommentsFrameTo_p_p_TagLib__ID3v2__Frame(void *x, int *newmemory) {
    return (void *)((TagLib::ID3v2::Frame **)  ((TagLib::ID3v2::CommentsFrame **) x));
}
static void *_p_TagLib__APE__TagTo_p_TagLib__Tag(void *x, int *newmemory) {
    return (void *)((TagLib::Tag *)  ((TagLib::APE::Tag *) x));
}
static void *_p_TagLib__Ogg__XiphCommentTo_p_TagLib__Tag(void *x, int *newmemory) {
    return (void *)((TagLib::Tag *)  ((TagLib::Ogg::XiphComment *) x));
}
static void *_p_TagLib__ID3v1__TagTo_p_TagLib__Tag(void *x, int *newmemory) {
    return (void *)((TagLib::Tag *)  ((TagLib::ID3v1::Tag *) x));
}
static void *_p_TagLib__ID3v2__TagTo_p_TagLib__Tag(void *x, int *newmemory) {
    return (void *)((TagLib::Tag *)  ((TagLib::ID3v2::Tag *) x));
}
static void *_p_TagLib__Ogg__FLAC__FileTo_p_TagLib__Ogg__File(void *x, int *newmemory) {
    return (void *)((TagLib::Ogg::File *)  ((TagLib::Ogg::FLAC::File *) x));
}
static void *_p_TagLib__Vorbis__FileTo_p_TagLib__Ogg__File(void *x, int *newmemory) {
    return (void *)((TagLib::Ogg::File *)  ((TagLib::Vorbis::File *) x));
}
static void *_p_TagLib__Ogg__Speex__FileTo_p_TagLib__Ogg__File(void *x, int *newmemory) {
    return (void *)((TagLib::Ogg::File *)  ((TagLib::Ogg::Speex::File *) x));
}
static void *_p_TagLib__Ogg__FileTo_p_TagLib__File(void *x, int *newmemory) {
    return (void *)((TagLib::File *)  ((TagLib::Ogg::File *) x));
}
static void *_p_TagLib__Ogg__FLAC__FileTo_p_TagLib__File(void *x, int *newmemory) {
    return (void *)((TagLib::File *) (TagLib::Ogg::File *) ((TagLib::Ogg::FLAC::File *) x));
}
static void *_p_TagLib__Vorbis__FileTo_p_TagLib__File(void *x, int *newmemory) {
    return (void *)((TagLib::File *) (TagLib::Ogg::File *) ((TagLib::Vorbis::File *) x));
}
static void *_p_TagLib__FLAC__FileTo_p_TagLib__File(void *x, int *newmemory) {
    return (void *)((TagLib::File *)  ((TagLib::FLAC::File *) x));
}
static void *_p_TagLib__MPC__FileTo_p_TagLib__File(void *x, int *newmemory) {
    return (void *)((TagLib::File *)  ((TagLib::MPC::File *) x));
}
static void *_p_TagLib__TrueAudio__FileTo_p_TagLib__File(void *x, int *newmemory) {
    return (void *)((TagLib::File *)  ((TagLib::TrueAudio::File *) x));
}
static void *_p_TagLib__WavPack__FileTo_p_TagLib__File(void *x, int *newmemory) {
    return (void *)((TagLib::File *)  ((TagLib::WavPack::File *) x));
}
static void *_p_TagLib__MPEG__FileTo_p_TagLib__File(void *x, int *newmemory) {
    return (void *)((TagLib::File *)  ((TagLib::MPEG::File *) x));
}
static void *_p_TagLib__Ogg__Speex__FileTo_p_TagLib__File(void *x, int *newmemory) {
    return (void *)((TagLib::File *) (TagLib::Ogg::File *) ((TagLib::Ogg::Speex::File *) x));
}
static void *_p_TagLib__ID3v2__FrameTo_p_TagLib__ID3v2__Header(void *x, int *newmemory) {
    return (void *)((TagLib::ID3v2::Header *)  ((TagLib::ID3v2::Frame *) x));
}
static void *_p_TagLib__ID3v2__AttachedPictureFrameTo_p_TagLib__ID3v2__Header(void *x, int *newmemory) {
    return (void *)((TagLib::ID3v2::Header *) (TagLib::ID3v2::Frame *) ((TagLib::ID3v2::AttachedPictureFrame *) x));
}
static void *_p_TagLib__ID3v2__CommentsFrameTo_p_TagLib__ID3v2__Header(void *x, int *newmemory) {
    return (void *)((TagLib::ID3v2::Header *) (TagLib::ID3v2::Frame *) ((TagLib::ID3v2::CommentsFrame *) x));
}
static swig_type_info _swigt__p_TagLib__APE__Footer = {"_p_TagLib__APE__Footer", "TagLib::APE::Footer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__APE__Item = {"_p_TagLib__APE__Item", "TagLib::APE::Item *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__APE__Tag = {"_p_TagLib__APE__Tag", "TagLib::APE::Tag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__AudioProperties = {"_p_TagLib__AudioProperties", "TagLib::AudioProperties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ByteVector = {"_p_TagLib__ByteVector", "TagLib::ByteVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__FLAC__File = {"_p_TagLib__FLAC__File", "TagLib::FLAC::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__FLAC__Properties = {"_p_TagLib__FLAC__Properties", "TagLib::FLAC::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__File = {"_p_TagLib__File", "TagLib::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__FileRef = {"_p_TagLib__FileRef", "TagLib::FileRef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v1__Tag = {"_p_TagLib__ID3v1__Tag", "TagLib::ID3v1::Tag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__AttachedPictureFrame = {"_p_TagLib__ID3v2__AttachedPictureFrame", "TagLib::ID3v2::AttachedPictureFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__CommentsFrame = {"_p_TagLib__ID3v2__CommentsFrame", "TagLib::ID3v2::CommentsFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__Frame = {"_p_TagLib__ID3v2__Frame", "TagLib::ID3v2::Frame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__FrameFactory = {"_p_TagLib__ID3v2__FrameFactory", "TagLib::ID3v2::FrameFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame = {"_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame", "TagLib::ID3v2::GeneralEncapsulatedObjectFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__Header = {"_p_TagLib__ID3v2__Header", "TagLib::ID3v2::Header *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ID3v2__Tag = {"_p_TagLib__ID3v2__Tag", "TagLib::ID3v2::Tag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ListT_Frame_p_t = {"_p_TagLib__ListT_Frame_p_t", "TagLib::ID3v2::FrameList *|TagLib::List< Frame * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ListT_TagLib__ByteVector_t = {"_p_TagLib__ListT_TagLib__ByteVector_t", "TagLib::List< TagLib::ByteVector > *|TagLib::ByteVectorList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ListT_TagLib__ID3v2__Frame_p_t = {"_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t", "TagLib::List< TagLib::ID3v2::Frame * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ListT_TagLib__String_t = {"_p_TagLib__ListT_TagLib__String_t", "TagLib::List< TagLib::String > *|TagLib::StringList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__ListT_int_t = {"_p_TagLib__ListT_int_t", "TagLib::List< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__MPC__File = {"_p_TagLib__MPC__File", "TagLib::MPC::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__MPC__Properties = {"_p_TagLib__MPC__Properties", "TagLib::MPC::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__MPEG__File = {"_p_TagLib__MPEG__File", "TagLib::MPEG::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__MPEG__Header = {"_p_TagLib__MPEG__Header", "TagLib::MPEG::Header *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__MPEG__Properties = {"_p_TagLib__MPEG__Properties", "TagLib::MPEG::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__MPEG__XingHeader = {"_p_TagLib__MPEG__XingHeader", "TagLib::MPEG::XingHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t = {"_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t", "TagLib::Map< TagLib::ByteVector,TagLib::ID3v2::FrameList > *|TagLib::ID3v2::FrameListMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t = {"_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t", "TagLib::Map< TagLib::String,TagLib::APE::Item > *|TagLib::APE::ItemListMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__MapT_TagLib__String_TagLib__StringList_t = {"_p_TagLib__MapT_TagLib__String_TagLib__StringList_t", "TagLib::Map< TagLib::String,TagLib::StringList > *|TagLib::Ogg::FieldListMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__MapT_TagLib__String_int_t = {"_p_TagLib__MapT_TagLib__String_int_t", "TagLib::ID3v1::GenreMap *|TagLib::Map< TagLib::String,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Ogg__FLAC__File = {"_p_TagLib__Ogg__FLAC__File", "TagLib::Ogg::FLAC::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Ogg__File = {"_p_TagLib__Ogg__File", "TagLib::Ogg::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Ogg__Page = {"_p_TagLib__Ogg__Page", "TagLib::Ogg::Page *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Ogg__PageHeader = {"_p_TagLib__Ogg__PageHeader", "TagLib::Ogg::PageHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Ogg__Speex__File = {"_p_TagLib__Ogg__Speex__File", "TagLib::Ogg::Speex::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Ogg__Speex__Properties = {"_p_TagLib__Ogg__Speex__Properties", "TagLib::Ogg::Speex::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Ogg__XiphComment = {"_p_TagLib__Ogg__XiphComment", "TagLib::Ogg::XiphComment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__String = {"_p_TagLib__String", "TagLib::String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Tag = {"_p_TagLib__Tag", "TagLib::Tag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__TrueAudio__File = {"_p_TagLib__TrueAudio__File", "TagLib::TrueAudio::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__TrueAudio__Properties = {"_p_TagLib__TrueAudio__Properties", "TagLib::TrueAudio::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Vorbis__File = {"_p_TagLib__Vorbis__File", "TagLib::Vorbis::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__Vorbis__Properties = {"_p_TagLib__Vorbis__Properties", "TagLib::Vorbis::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__WavPack__File = {"_p_TagLib__WavPack__File", "TagLib::WavPack::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TagLib__WavPack__Properties = {"_p_TagLib__WavPack__Properties", "TagLib::WavPack::Properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_TagLib__ID3v2__Frame = {"_p_p_TagLib__ID3v2__Frame", "TagLib::ID3v2::Frame **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_TagLib__ID3v2__AttachedPictureFrame = {"_p_p_TagLib__ID3v2__AttachedPictureFrame", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_TagLib__ID3v2__CommentsFrame = {"_p_p_TagLib__ID3v2__CommentsFrame", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_std__basic_stringT_wchar_t_t = {"_p_std__basic_stringT_wchar_t_t", "std::basic_string< wchar_t > *|wstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "uchar *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|uint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar *|wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_TagLib__APE__Footer,
  &_swigt__p_TagLib__APE__Item,
  &_swigt__p_TagLib__APE__Tag,
  &_swigt__p_TagLib__AudioProperties,
  &_swigt__p_TagLib__ByteVector,
  &_swigt__p_TagLib__FLAC__File,
  &_swigt__p_TagLib__FLAC__Properties,
  &_swigt__p_TagLib__File,
  &_swigt__p_TagLib__FileRef,
  &_swigt__p_TagLib__ID3v1__Tag,
  &_swigt__p_TagLib__ID3v2__AttachedPictureFrame,
  &_swigt__p_TagLib__ID3v2__CommentsFrame,
  &_swigt__p_TagLib__ID3v2__Frame,
  &_swigt__p_TagLib__ID3v2__FrameFactory,
  &_swigt__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame,
  &_swigt__p_TagLib__ID3v2__Header,
  &_swigt__p_TagLib__ID3v2__Tag,
  &_swigt__p_TagLib__ListT_Frame_p_t,
  &_swigt__p_TagLib__ListT_TagLib__ByteVector_t,
  &_swigt__p_TagLib__ListT_TagLib__ID3v2__Frame_p_t,
  &_swigt__p_TagLib__ListT_TagLib__String_t,
  &_swigt__p_TagLib__ListT_int_t,
  &_swigt__p_TagLib__MPC__File,
  &_swigt__p_TagLib__MPC__Properties,
  &_swigt__p_TagLib__MPEG__File,
  &_swigt__p_TagLib__MPEG__Header,
  &_swigt__p_TagLib__MPEG__Properties,
  &_swigt__p_TagLib__MPEG__XingHeader,
  &_swigt__p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t,
  &_swigt__p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t,
  &_swigt__p_TagLib__MapT_TagLib__String_TagLib__StringList_t,
  &_swigt__p_TagLib__MapT_TagLib__String_int_t,
  &_swigt__p_TagLib__Ogg__FLAC__File,
  &_swigt__p_TagLib__Ogg__File,
  &_swigt__p_TagLib__Ogg__Page,
  &_swigt__p_TagLib__Ogg__PageHeader,
  &_swigt__p_TagLib__Ogg__Speex__File,
  &_swigt__p_TagLib__Ogg__Speex__Properties,
  &_swigt__p_TagLib__Ogg__XiphComment,
  &_swigt__p_TagLib__String,
  &_swigt__p_TagLib__Tag,
  &_swigt__p_TagLib__TrueAudio__File,
  &_swigt__p_TagLib__TrueAudio__Properties,
  &_swigt__p_TagLib__Vorbis__File,
  &_swigt__p_TagLib__Vorbis__Properties,
  &_swigt__p_TagLib__WavPack__File,
  &_swigt__p_TagLib__WavPack__Properties,
  &_swigt__p_char,
  &_swigt__p_p_TagLib__ID3v2__AttachedPictureFrame,
  &_swigt__p_p_TagLib__ID3v2__CommentsFrame,
  &_swigt__p_p_TagLib__ID3v2__Frame,
  &_swigt__p_std__basic_stringT_wchar_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_TagLib__APE__Footer[] = {  {&_swigt__p_TagLib__APE__Footer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__APE__Item[] = {  {&_swigt__p_TagLib__APE__Item, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__APE__Tag[] = {  {&_swigt__p_TagLib__APE__Tag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__AudioProperties[] = {  {&_swigt__p_TagLib__AudioProperties, 0, 0, 0},  {&_swigt__p_TagLib__Ogg__Speex__Properties, _p_TagLib__Ogg__Speex__PropertiesTo_p_TagLib__AudioProperties, 0, 0},  {&_swigt__p_TagLib__Vorbis__Properties, _p_TagLib__Vorbis__PropertiesTo_p_TagLib__AudioProperties, 0, 0},  {&_swigt__p_TagLib__FLAC__Properties, _p_TagLib__FLAC__PropertiesTo_p_TagLib__AudioProperties, 0, 0},  {&_swigt__p_TagLib__MPC__Properties, _p_TagLib__MPC__PropertiesTo_p_TagLib__AudioProperties, 0, 0},  {&_swigt__p_TagLib__TrueAudio__Properties, _p_TagLib__TrueAudio__PropertiesTo_p_TagLib__AudioProperties, 0, 0},  {&_swigt__p_TagLib__WavPack__Properties, _p_TagLib__WavPack__PropertiesTo_p_TagLib__AudioProperties, 0, 0},  {&_swigt__p_TagLib__MPEG__Properties, _p_TagLib__MPEG__PropertiesTo_p_TagLib__AudioProperties, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ByteVector[] = {  {&_swigt__p_TagLib__ByteVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__FLAC__File[] = {  {&_swigt__p_TagLib__FLAC__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__FLAC__Properties[] = {  {&_swigt__p_TagLib__FLAC__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__File[] = {  {&_swigt__p_TagLib__Ogg__File, _p_TagLib__Ogg__FileTo_p_TagLib__File, 0, 0},  {&_swigt__p_TagLib__Ogg__FLAC__File, _p_TagLib__Ogg__FLAC__FileTo_p_TagLib__File, 0, 0},  {&_swigt__p_TagLib__Vorbis__File, _p_TagLib__Vorbis__FileTo_p_TagLib__File, 0, 0},  {&_swigt__p_TagLib__FLAC__File, _p_TagLib__FLAC__FileTo_p_TagLib__File, 0, 0},  {&_swigt__p_TagLib__MPC__File, _p_TagLib__MPC__FileTo_p_TagLib__File, 0, 0},  {&_swigt__p_TagLib__TrueAudio__File, _p_TagLib__TrueAudio__FileTo_p_TagLib__File, 0, 0},  {&_swigt__p_TagLib__WavPack__File, _p_TagLib__WavPack__FileTo_p_TagLib__File, 0, 0},  {&_swigt__p_TagLib__MPEG__File, _p_TagLib__MPEG__FileTo_p_TagLib__File, 0, 0},  {&_swigt__p_TagLib__File, 0, 0, 0},  {&_swigt__p_TagLib__Ogg__Speex__File, _p_TagLib__Ogg__Speex__FileTo_p_TagLib__File, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__FileRef[] = {  {&_swigt__p_TagLib__FileRef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v1__Tag[] = {  {&_swigt__p_TagLib__ID3v1__Tag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__AttachedPictureFrame[] = {  {&_swigt__p_TagLib__ID3v2__AttachedPictureFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__CommentsFrame[] = {  {&_swigt__p_TagLib__ID3v2__CommentsFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__Frame[] = {  {&_swigt__p_TagLib__ID3v2__AttachedPictureFrame, _p_TagLib__ID3v2__AttachedPictureFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__CommentsFrame, _p_TagLib__ID3v2__CommentsFrameTo_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_TagLib__ID3v2__Frame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__FrameFactory[] = {  {&_swigt__p_TagLib__ID3v2__FrameFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame[] = {  {&_swigt__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__Header[] = {  {&_swigt__p_TagLib__ID3v2__AttachedPictureFrame, _p_TagLib__ID3v2__AttachedPictureFrameTo_p_TagLib__ID3v2__Header, 0, 0},  {&_swigt__p_TagLib__ID3v2__CommentsFrame, _p_TagLib__ID3v2__CommentsFrameTo_p_TagLib__ID3v2__Header, 0, 0},  {&_swigt__p_TagLib__ID3v2__Frame, _p_TagLib__ID3v2__FrameTo_p_TagLib__ID3v2__Header, 0, 0},  {&_swigt__p_TagLib__ID3v2__Header, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ID3v2__Tag[] = {  {&_swigt__p_TagLib__ID3v2__Tag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ListT_Frame_p_t[] = {  {&_swigt__p_TagLib__ListT_Frame_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ListT_TagLib__ByteVector_t[] = {  {&_swigt__p_TagLib__ListT_TagLib__ByteVector_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ListT_TagLib__ID3v2__Frame_p_t[] = {  {&_swigt__p_TagLib__ListT_TagLib__ID3v2__Frame_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ListT_TagLib__String_t[] = {  {&_swigt__p_TagLib__ListT_TagLib__String_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__ListT_int_t[] = {  {&_swigt__p_TagLib__ListT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__MPC__File[] = {  {&_swigt__p_TagLib__MPC__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__MPC__Properties[] = {  {&_swigt__p_TagLib__MPC__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__MPEG__File[] = {  {&_swigt__p_TagLib__MPEG__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__MPEG__Header[] = {  {&_swigt__p_TagLib__MPEG__Header, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__MPEG__Properties[] = {  {&_swigt__p_TagLib__MPEG__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__MPEG__XingHeader[] = {  {&_swigt__p_TagLib__MPEG__XingHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t[] = {  {&_swigt__p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t[] = {  {&_swigt__p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__MapT_TagLib__String_TagLib__StringList_t[] = {  {&_swigt__p_TagLib__MapT_TagLib__String_TagLib__StringList_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__MapT_TagLib__String_int_t[] = {  {&_swigt__p_TagLib__MapT_TagLib__String_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Ogg__FLAC__File[] = {  {&_swigt__p_TagLib__Ogg__FLAC__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Ogg__File[] = {  {&_swigt__p_TagLib__Ogg__File, 0, 0, 0},  {&_swigt__p_TagLib__Ogg__FLAC__File, _p_TagLib__Ogg__FLAC__FileTo_p_TagLib__Ogg__File, 0, 0},  {&_swigt__p_TagLib__Vorbis__File, _p_TagLib__Vorbis__FileTo_p_TagLib__Ogg__File, 0, 0},  {&_swigt__p_TagLib__Ogg__Speex__File, _p_TagLib__Ogg__Speex__FileTo_p_TagLib__Ogg__File, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Ogg__Page[] = {  {&_swigt__p_TagLib__Ogg__Page, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Ogg__PageHeader[] = {  {&_swigt__p_TagLib__Ogg__PageHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Ogg__Speex__File[] = {  {&_swigt__p_TagLib__Ogg__Speex__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Ogg__Speex__Properties[] = {  {&_swigt__p_TagLib__Ogg__Speex__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Ogg__XiphComment[] = {  {&_swigt__p_TagLib__Ogg__XiphComment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__String[] = {  {&_swigt__p_TagLib__String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Tag[] = {  {&_swigt__p_TagLib__ID3v1__Tag, _p_TagLib__ID3v1__TagTo_p_TagLib__Tag, 0, 0},  {&_swigt__p_TagLib__ID3v2__Tag, _p_TagLib__ID3v2__TagTo_p_TagLib__Tag, 0, 0},  {&_swigt__p_TagLib__APE__Tag, _p_TagLib__APE__TagTo_p_TagLib__Tag, 0, 0},  {&_swigt__p_TagLib__Ogg__XiphComment, _p_TagLib__Ogg__XiphCommentTo_p_TagLib__Tag, 0, 0},  {&_swigt__p_TagLib__Tag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__TrueAudio__File[] = {  {&_swigt__p_TagLib__TrueAudio__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__TrueAudio__Properties[] = {  {&_swigt__p_TagLib__TrueAudio__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Vorbis__File[] = {  {&_swigt__p_TagLib__Vorbis__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__Vorbis__Properties[] = {  {&_swigt__p_TagLib__Vorbis__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__WavPack__File[] = {  {&_swigt__p_TagLib__WavPack__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TagLib__WavPack__Properties[] = {  {&_swigt__p_TagLib__WavPack__Properties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_TagLib__ID3v2__AttachedPictureFrame[] = {{&_swigt__p_p_TagLib__ID3v2__AttachedPictureFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_TagLib__ID3v2__CommentsFrame[] = {{&_swigt__p_p_TagLib__ID3v2__CommentsFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_TagLib__ID3v2__Frame[] = {  {&_swigt__p_p_TagLib__ID3v2__AttachedPictureFrame, _p_p_TagLib__ID3v2__AttachedPictureFrameTo_p_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_p_TagLib__ID3v2__CommentsFrame, _p_p_TagLib__ID3v2__CommentsFrameTo_p_p_TagLib__ID3v2__Frame, 0, 0},  {&_swigt__p_p_TagLib__ID3v2__Frame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_wchar_t_t[] = {  {&_swigt__p_std__basic_stringT_wchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_TagLib__APE__Footer,
  _swigc__p_TagLib__APE__Item,
  _swigc__p_TagLib__APE__Tag,
  _swigc__p_TagLib__AudioProperties,
  _swigc__p_TagLib__ByteVector,
  _swigc__p_TagLib__FLAC__File,
  _swigc__p_TagLib__FLAC__Properties,
  _swigc__p_TagLib__File,
  _swigc__p_TagLib__FileRef,
  _swigc__p_TagLib__ID3v1__Tag,
  _swigc__p_TagLib__ID3v2__AttachedPictureFrame,
  _swigc__p_TagLib__ID3v2__CommentsFrame,
  _swigc__p_TagLib__ID3v2__Frame,
  _swigc__p_TagLib__ID3v2__FrameFactory,
  _swigc__p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame,
  _swigc__p_TagLib__ID3v2__Header,
  _swigc__p_TagLib__ID3v2__Tag,
  _swigc__p_TagLib__ListT_Frame_p_t,
  _swigc__p_TagLib__ListT_TagLib__ByteVector_t,
  _swigc__p_TagLib__ListT_TagLib__ID3v2__Frame_p_t,
  _swigc__p_TagLib__ListT_TagLib__String_t,
  _swigc__p_TagLib__ListT_int_t,
  _swigc__p_TagLib__MPC__File,
  _swigc__p_TagLib__MPC__Properties,
  _swigc__p_TagLib__MPEG__File,
  _swigc__p_TagLib__MPEG__Header,
  _swigc__p_TagLib__MPEG__Properties,
  _swigc__p_TagLib__MPEG__XingHeader,
  _swigc__p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t,
  _swigc__p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t,
  _swigc__p_TagLib__MapT_TagLib__String_TagLib__StringList_t,
  _swigc__p_TagLib__MapT_TagLib__String_int_t,
  _swigc__p_TagLib__Ogg__FLAC__File,
  _swigc__p_TagLib__Ogg__File,
  _swigc__p_TagLib__Ogg__Page,
  _swigc__p_TagLib__Ogg__PageHeader,
  _swigc__p_TagLib__Ogg__Speex__File,
  _swigc__p_TagLib__Ogg__Speex__Properties,
  _swigc__p_TagLib__Ogg__XiphComment,
  _swigc__p_TagLib__String,
  _swigc__p_TagLib__Tag,
  _swigc__p_TagLib__TrueAudio__File,
  _swigc__p_TagLib__TrueAudio__Properties,
  _swigc__p_TagLib__Vorbis__File,
  _swigc__p_TagLib__Vorbis__Properties,
  _swigc__p_TagLib__WavPack__File,
  _swigc__p_TagLib__WavPack__Properties,
  _swigc__p_char,
  _swigc__p_p_TagLib__ID3v2__AttachedPictureFrame,
  _swigc__p_p_TagLib__ID3v2__CommentsFrame,
  _swigc__p_p_TagLib__ID3v2__Frame,
  _swigc__p_std__basic_stringT_wchar_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_TagLib(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mTagLib = rb_define_module("TagLib");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  VALUE mTagLibFLAC = rb_define_module_under(mTagLib, "FLAC");
  VALUE mTagLibAPE = rb_define_module_under(mTagLib, "APE");
  VALUE mTagLibID3v1 = rb_define_module_under(mTagLib, "ID3v1");
  VALUE mTagLibID3v2 = rb_define_module_under(mTagLib, "ID3v2");
  VALUE mTagLibMPC= rb_define_module_under(mTagLib, "MPC");
  VALUE mTagLibMPEG = rb_define_module_under(mTagLib, "MPEG");
  VALUE mTagLibOgg = rb_define_module_under(mTagLib, "Ogg");
  VALUE mTagLibOggFlac = rb_define_module_under(mTagLibOgg, "Flac");
  VALUE mTagLibOggSpeex = rb_define_module_under(mTagLibOgg, "Speex");
  VALUE mTagLibVorbis = rb_define_module_under(mTagLib, "Vorbis");
  VALUE mTagLibTrueAudio = rb_define_module_under(mTagLib, "TrueAudio");
  VALUE mTagLibWavPack = rb_define_module_under(mTagLib, "WavPack");
  
  
  cAudioProperties.klass = rb_define_class_under(mTagLib, "AudioProperties", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__AudioProperties, (void *) &cAudioProperties);
  rb_undef_alloc_func(cAudioProperties.klass);
  rb_define_const(cAudioProperties.klass, "Fast", SWIG_From_int(static_cast< int >(TagLib::AudioProperties::Fast)));
  rb_define_const(cAudioProperties.klass, "Average", SWIG_From_int(static_cast< int >(TagLib::AudioProperties::Average)));
  rb_define_const(cAudioProperties.klass, "Accurate", SWIG_From_int(static_cast< int >(TagLib::AudioProperties::Accurate)));
  rb_define_method(cAudioProperties.klass, "length", VALUEFUNC(_wrap_AudioProperties_length), -1);
  rb_define_method(cAudioProperties.klass, "bitrate", VALUEFUNC(_wrap_AudioProperties_bitrate), -1);
  rb_define_method(cAudioProperties.klass, "sampleRate", VALUEFUNC(_wrap_AudioProperties_sampleRate), -1);
  rb_define_method(cAudioProperties.klass, "channels", VALUEFUNC(_wrap_AudioProperties_channels), -1);
  cAudioProperties.mark = 0;
  cAudioProperties.trackObjects = 0;
  
  cString.klass = rb_define_class_under(mTagLib, "String", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__String, (void *) &cString);
  rb_define_alloc_func(cString.klass, _wrap_String_allocate);
  rb_define_method(cString.klass, "initialize", VALUEFUNC(_wrap_new_String), -1);
  rb_define_const(cString.klass, "Latin1", SWIG_From_int(static_cast< int >(TagLib::String::Latin1)));
  rb_define_const(cString.klass, "UTF16", SWIG_From_int(static_cast< int >(TagLib::String::UTF16)));
  rb_define_const(cString.klass, "UTF16BE", SWIG_From_int(static_cast< int >(TagLib::String::UTF16BE)));
  rb_define_const(cString.klass, "UTF8", SWIG_From_int(static_cast< int >(TagLib::String::UTF8)));
  rb_define_const(cString.klass, "UTF16LE", SWIG_From_int(static_cast< int >(TagLib::String::UTF16LE)));
  rb_define_method(cString.klass, "toCString", VALUEFUNC(_wrap_String_toCString), -1);
  cString.mark = 0;
  cString.destroy = (void (*)(void *)) free_TagLib_String;
  cString.trackObjects = 0;
  
  cTag.klass = rb_define_class_under(mTagLib, "Tag", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__Tag, (void *) &cTag);
  rb_undef_alloc_func(cTag.klass);
  rb_define_method(cTag.klass, "title", VALUEFUNC(_wrap_Tag_title), -1);
  rb_define_method(cTag.klass, "artist", VALUEFUNC(_wrap_Tag_artist), -1);
  rb_define_method(cTag.klass, "album", VALUEFUNC(_wrap_Tag_album), -1);
  rb_define_method(cTag.klass, "comment", VALUEFUNC(_wrap_Tag_comment), -1);
  rb_define_method(cTag.klass, "genre", VALUEFUNC(_wrap_Tag_genre), -1);
  rb_define_method(cTag.klass, "year", VALUEFUNC(_wrap_Tag_year), -1);
  rb_define_method(cTag.klass, "track", VALUEFUNC(_wrap_Tag_track), -1);
  rb_define_method(cTag.klass, "setTitle", VALUEFUNC(_wrap_Tag_setTitle), -1);
  rb_define_alias(cTag.klass, "title=", "setTitle");
  rb_define_method(cTag.klass, "setArtist", VALUEFUNC(_wrap_Tag_setArtist), -1);
  rb_define_alias(cTag.klass, "artist=", "setArtist");
  rb_define_method(cTag.klass, "setAlbum", VALUEFUNC(_wrap_Tag_setAlbum), -1);
  rb_define_alias(cTag.klass, "album=", "setAlbum");
  rb_define_method(cTag.klass, "setComment", VALUEFUNC(_wrap_Tag_setComment), -1);
  rb_define_alias(cTag.klass, "comment=", "setComment");
  rb_define_method(cTag.klass, "setGenre", VALUEFUNC(_wrap_Tag_setGenre), -1);
  rb_define_alias(cTag.klass, "genre=", "setGenre");
  rb_define_method(cTag.klass, "setYear", VALUEFUNC(_wrap_Tag_setYear), -1);
  rb_define_alias(cTag.klass, "year=", "setYear");
  rb_define_method(cTag.klass, "setTrack", VALUEFUNC(_wrap_Tag_setTrack), -1);
  rb_define_alias(cTag.klass, "track=", "setTrack");
  rb_define_method(cTag.klass, "isEmpty", VALUEFUNC(_wrap_Tag_isEmpty), -1);
  rb_define_alias(cTag.klass, "empty?", "isEmpty");
  cTag.mark = 0;
  cTag.destroy = (void (*)(void *)) free_TagLib_Tag;
  cTag.trackObjects = 0;
  
  cByteVector.klass = rb_define_class_under(mTagLib, "ByteVector", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ByteVector, (void *) &cByteVector);
  rb_define_alloc_func(cByteVector.klass, _wrap_ByteVector_allocate);
  rb_define_method(cByteVector.klass, "initialize", VALUEFUNC(_wrap_new_ByteVector), -1);
  rb_define_method(cByteVector.klass, "size", VALUEFUNC(_wrap_ByteVector_size), -1);
  rb_define_method(cByteVector.klass, "data", VALUEFUNC(_wrap_ByteVector_data), -1);
  rb_define_method(cByteVector.klass, "to_s", VALUEFUNC(_wrap_ByteVector___str__), -1);
  cByteVector.mark = 0;
  cByteVector.destroy = (void (*)(void *)) free_TagLib_ByteVector;
  cByteVector.trackObjects = 0;
  
  cFile.klass = rb_define_class_under(mTagLib, "File", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__File, (void *) &cFile);
  rb_undef_alloc_func(cFile.klass);
  rb_define_const(cFile.klass, "Beginning", SWIG_From_int(static_cast< int >(TagLib::File::Beginning)));
  rb_define_const(cFile.klass, "Current", SWIG_From_int(static_cast< int >(TagLib::File::Current)));
  rb_define_const(cFile.klass, "End", SWIG_From_int(static_cast< int >(TagLib::File::End)));
  rb_define_method(cFile.klass, "name", VALUEFUNC(_wrap_File_name), -1);
  rb_define_method(cFile.klass, "tag", VALUEFUNC(_wrap_File_tag), -1);
  rb_define_method(cFile.klass, "audioProperties", VALUEFUNC(_wrap_File_audioProperties), -1);
  rb_define_method(cFile.klass, "save", VALUEFUNC(_wrap_File_save), -1);
  rb_define_method(cFile.klass, "readBlock", VALUEFUNC(_wrap_File_readBlock), -1);
  rb_define_method(cFile.klass, "writeBlock", VALUEFUNC(_wrap_File_writeBlock), -1);
  rb_define_method(cFile.klass, "find1", VALUEFUNC(_wrap_File_find1), -1);
  rb_define_method(cFile.klass, "find2", VALUEFUNC(_wrap_File_find2), -1);
  rb_define_method(cFile.klass, "find3", VALUEFUNC(_wrap_File_find3), -1);
  rb_define_method(cFile.klass, "rfind", VALUEFUNC(_wrap_File_rfind), -1);
  rb_define_method(cFile.klass, "insert", VALUEFUNC(_wrap_File_insert), -1);
  rb_define_method(cFile.klass, "removeBlock", VALUEFUNC(_wrap_File_removeBlock), -1);
  rb_define_method(cFile.klass, "readOnly", VALUEFUNC(_wrap_File_readOnly), -1);
  rb_define_alias(cFile.klass, "read_only?", "readOnly");
  rb_define_method(cFile.klass, "isOpen", VALUEFUNC(_wrap_File_isOpen), -1);
  rb_define_alias(cFile.klass, "open?", "isOpen");
  rb_define_method(cFile.klass, "isValid", VALUEFUNC(_wrap_File_isValid), -1);
  rb_define_alias(cFile.klass, "valid?", "isValid");
  rb_define_method(cFile.klass, "seek", VALUEFUNC(_wrap_File_seek), -1);
  rb_define_method(cFile.klass, "clear", VALUEFUNC(_wrap_File_clear), -1);
  rb_define_method(cFile.klass, "tell", VALUEFUNC(_wrap_File_tell), -1);
  rb_define_method(cFile.klass, "length", VALUEFUNC(_wrap_File_length), -1);
  rb_define_method(cFile.klass, "isWritable", VALUEFUNC(_wrap_File_isWritable), -1);
  rb_define_alias(cFile.klass, "writable?", "isWritable");
  cFile.mark = 0;
  cFile.destroy = (void (*)(void *)) free_TagLib_File;
  cFile.trackObjects = 0;
  
  cFieldListMap.klass = rb_define_class_under(mTagLib, "FieldListMap", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__StringList_t, (void *) &cFieldListMap);
  rb_define_alloc_func(cFieldListMap.klass, _wrap_FieldListMap_allocate);
  rb_define_method(cFieldListMap.klass, "initialize", VALUEFUNC(_wrap_new_FieldListMap), -1);
  rb_define_method(cFieldListMap.klass, "insert", VALUEFUNC(_wrap_FieldListMap_insert), -1);
  rb_define_method(cFieldListMap.klass, "clear", VALUEFUNC(_wrap_FieldListMap_clear), -1);
  rb_define_method(cFieldListMap.klass, "size", VALUEFUNC(_wrap_FieldListMap_size), -1);
  rb_define_method(cFieldListMap.klass, "isEmpty", VALUEFUNC(_wrap_FieldListMap_isEmpty), -1);
  rb_define_alias(cFieldListMap.klass, "empty?", "isEmpty");
  rb_define_method(cFieldListMap.klass, "contains", VALUEFUNC(_wrap_FieldListMap_contains), -1);
  rb_define_method(cFieldListMap.klass, "length", VALUEFUNC(_wrap_FieldListMap___len__), -1);
  rb_define_method(cFieldListMap.klass, "[]", VALUEFUNC(_wrap_FieldListMap___getitem__), -1);
  rb_define_method(cFieldListMap.klass, "hash", VALUEFUNC(_wrap_FieldListMap___hash__), -1);
  cFieldListMap.mark = 0;
  cFieldListMap.destroy = (void (*)(void *)) free_TagLib_Map_Sl_TagLib_String_Sc_TagLib_StringList_Sg_;
  cFieldListMap.trackObjects = 0;
  
  cItemListMap.klass = rb_define_class_under(mTagLib, "ItemListMap", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__MapT_TagLib__String_TagLib__APE__Item_t, (void *) &cItemListMap);
  rb_define_alloc_func(cItemListMap.klass, _wrap_ItemListMap_allocate);
  rb_define_method(cItemListMap.klass, "initialize", VALUEFUNC(_wrap_new_ItemListMap), -1);
  rb_define_method(cItemListMap.klass, "insert", VALUEFUNC(_wrap_ItemListMap_insert), -1);
  rb_define_method(cItemListMap.klass, "clear", VALUEFUNC(_wrap_ItemListMap_clear), -1);
  rb_define_method(cItemListMap.klass, "size", VALUEFUNC(_wrap_ItemListMap_size), -1);
  rb_define_method(cItemListMap.klass, "isEmpty", VALUEFUNC(_wrap_ItemListMap_isEmpty), -1);
  rb_define_alias(cItemListMap.klass, "empty?", "isEmpty");
  rb_define_method(cItemListMap.klass, "contains", VALUEFUNC(_wrap_ItemListMap_contains), -1);
  rb_define_method(cItemListMap.klass, "length", VALUEFUNC(_wrap_ItemListMap___len__), -1);
  cItemListMap.mark = 0;
  cItemListMap.destroy = (void (*)(void *)) free_TagLib_Map_Sl_TagLib_String_Sc_TagLib_APE_Item_Sg_;
  cItemListMap.trackObjects = 0;
  
  cGenreMap.klass = rb_define_class_under(mTagLib, "GenreMap", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__MapT_TagLib__String_int_t, (void *) &cGenreMap);
  rb_define_alloc_func(cGenreMap.klass, _wrap_GenreMap_allocate);
  rb_define_method(cGenreMap.klass, "initialize", VALUEFUNC(_wrap_new_GenreMap), -1);
  rb_define_method(cGenreMap.klass, "insert", VALUEFUNC(_wrap_GenreMap_insert), -1);
  rb_define_method(cGenreMap.klass, "clear", VALUEFUNC(_wrap_GenreMap_clear), -1);
  rb_define_method(cGenreMap.klass, "size", VALUEFUNC(_wrap_GenreMap_size), -1);
  rb_define_method(cGenreMap.klass, "isEmpty", VALUEFUNC(_wrap_GenreMap_isEmpty), -1);
  rb_define_alias(cGenreMap.klass, "empty?", "isEmpty");
  rb_define_method(cGenreMap.klass, "contains", VALUEFUNC(_wrap_GenreMap_contains), -1);
  rb_define_method(cGenreMap.klass, "length", VALUEFUNC(_wrap_GenreMap___len__), -1);
  rb_define_method(cGenreMap.klass, "[]", VALUEFUNC(_wrap_GenreMap___getitem__), -1);
  rb_define_method(cGenreMap.klass, "hash", VALUEFUNC(_wrap_GenreMap___hash__), -1);
  cGenreMap.mark = 0;
  cGenreMap.destroy = (void (*)(void *)) free_TagLib_Map_Sl_TagLib_String_Sc_int_Sg_;
  cGenreMap.trackObjects = 0;
  
  cFrameListMap.klass = rb_define_class_under(mTagLib, "FrameListMap", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__MapT_TagLib__ByteVector_TagLib__ID3v2__FrameList_t, (void *) &cFrameListMap);
  rb_define_alloc_func(cFrameListMap.klass, _wrap_FrameListMap_allocate);
  rb_define_method(cFrameListMap.klass, "initialize", VALUEFUNC(_wrap_new_FrameListMap), -1);
  rb_define_method(cFrameListMap.klass, "insert", VALUEFUNC(_wrap_FrameListMap_insert), -1);
  rb_define_method(cFrameListMap.klass, "clear", VALUEFUNC(_wrap_FrameListMap_clear), -1);
  rb_define_method(cFrameListMap.klass, "size", VALUEFUNC(_wrap_FrameListMap_size), -1);
  rb_define_method(cFrameListMap.klass, "isEmpty", VALUEFUNC(_wrap_FrameListMap_isEmpty), -1);
  rb_define_alias(cFrameListMap.klass, "empty?", "isEmpty");
  rb_define_method(cFrameListMap.klass, "contains", VALUEFUNC(_wrap_FrameListMap_contains), -1);
  rb_define_method(cFrameListMap.klass, "length", VALUEFUNC(_wrap_FrameListMap___len__), -1);
  rb_define_method(cFrameListMap.klass, "[]", VALUEFUNC(_wrap_FrameListMap___getitem__), -1);
  rb_define_method(cFrameListMap.klass, "hash", VALUEFUNC(_wrap_FrameListMap___hash__), -1);
  cFrameListMap.mark = 0;
  cFrameListMap.destroy = (void (*)(void *)) free_TagLib_Map_Sl_TagLib_ByteVector_Sc_TagLib_ID3v2_FrameList_Sg_;
  cFrameListMap.trackObjects = 0;
  
  cStringList.klass = rb_define_class_under(mTagLib, "StringList", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ListT_TagLib__String_t, (void *) &cStringList);
  rb_define_alloc_func(cStringList.klass, _wrap_StringList_allocate);
  rb_define_method(cStringList.klass, "initialize", VALUEFUNC(_wrap_new_StringList), -1);
  rb_define_method(cStringList.klass, "size", VALUEFUNC(_wrap_StringList_size), -1);
  rb_define_method(cStringList.klass, "isEmpty", VALUEFUNC(_wrap_StringList_isEmpty), -1);
  rb_define_method(cStringList.klass, "contains", VALUEFUNC(_wrap_StringList_contains), -1);
  cStringList.mark = 0;
  cStringList.destroy = (void (*)(void *)) free_TagLib_List_Sl_TagLib_String_Sg_;
  cStringList.trackObjects = 0;
  
  cByteVectorList.klass = rb_define_class_under(mTagLib, "ByteVectorList", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ListT_TagLib__ByteVector_t, (void *) &cByteVectorList);
  rb_define_alloc_func(cByteVectorList.klass, _wrap_ByteVectorList_allocate);
  rb_define_method(cByteVectorList.klass, "initialize", VALUEFUNC(_wrap_new_ByteVectorList), -1);
  rb_define_method(cByteVectorList.klass, "size", VALUEFUNC(_wrap_ByteVectorList_size), -1);
  rb_define_method(cByteVectorList.klass, "isEmpty", VALUEFUNC(_wrap_ByteVectorList_isEmpty), -1);
  rb_define_method(cByteVectorList.klass, "contains", VALUEFUNC(_wrap_ByteVectorList_contains), -1);
  cByteVectorList.mark = 0;
  cByteVectorList.destroy = (void (*)(void *)) free_TagLib_List_Sl_TagLib_ByteVector_Sg_;
  cByteVectorList.trackObjects = 0;
  
  cFrameList.klass = rb_define_class_under(mTagLib, "FrameList", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ListT_TagLib__ID3v2__Frame_p_t, (void *) &cFrameList);
  rb_define_alloc_func(cFrameList.klass, _wrap_FrameList_allocate);
  rb_define_method(cFrameList.klass, "initialize", VALUEFUNC(_wrap_new_FrameList), -1);
  rb_define_method(cFrameList.klass, "size", VALUEFUNC(_wrap_FrameList_size), -1);
  rb_define_method(cFrameList.klass, "isEmpty", VALUEFUNC(_wrap_FrameList_isEmpty), -1);
  rb_define_method(cFrameList.klass, "contains", VALUEFUNC(_wrap_FrameList_contains), -1);
  cFrameList.mark = 0;
  cFrameList.destroy = (void (*)(void *)) free_TagLib_List_Sl_TagLib_ID3v2_Frame_Sm__Sg_;
  cFrameList.trackObjects = 0;
  
  cFileRef.klass = rb_define_class_under(mTagLib, "FileRef", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__FileRef, (void *) &cFileRef);
  rb_define_alloc_func(cFileRef.klass, _wrap_FileRef_allocate);
  rb_define_method(cFileRef.klass, "initialize", VALUEFUNC(_wrap_new_FileRef), -1);
  rb_define_singleton_method(cFileRef.klass, "defaultFileExtensions", VALUEFUNC(_wrap_FileRef_defaultFileExtensions), -1);
  rb_define_method(cFileRef.klass, "tag", VALUEFUNC(_wrap_FileRef_tag), -1);
  rb_define_method(cFileRef.klass, "audioProperties", VALUEFUNC(_wrap_FileRef_audioProperties), -1);
  rb_define_method(cFileRef.klass, "file", VALUEFUNC(_wrap_FileRef_file), -1);
  rb_define_method(cFileRef.klass, "save", VALUEFUNC(_wrap_FileRef_save), -1);
  rb_define_method(cFileRef.klass, "isNull", VALUEFUNC(_wrap_FileRef_isNull), -1);
  rb_define_alias(cFileRef.klass, "null?", "isNull");
  cFileRef.mark = 0;
  cFileRef.destroy = (void (*)(void *)) free_TagLib_FileRef;
  cFileRef.trackObjects = 0;
  
cAPE_Footer.klass = rb_define_class_under(mTagLibAPE, "Footer", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__APE__Footer, (void *) &cAPE_Footer);
  rb_define_alloc_func(cAPE_Footer.klass, _wrap_APE_Footer_allocate);
  rb_define_method(cAPE_Footer.klass, "initialize", VALUEFUNC(_wrap_new_APE_Footer), -1);
  rb_define_method(cAPE_Footer.klass, "version", VALUEFUNC(_wrap_APE_Footer_version), -1);
  rb_define_method(cAPE_Footer.klass, "headerPresent", VALUEFUNC(_wrap_APE_Footer_headerPresent), -1);
  rb_define_method(cAPE_Footer.klass, "footerPresent", VALUEFUNC(_wrap_APE_Footer_footerPresent), -1);
  rb_define_method(cAPE_Footer.klass, "isHeader", VALUEFUNC(_wrap_APE_Footer_isHeader), -1);
  rb_define_method(cAPE_Footer.klass, "setHeaderPresent", VALUEFUNC(_wrap_APE_Footer_setHeaderPresent), -1);
  rb_define_method(cAPE_Footer.klass, "itemCount", VALUEFUNC(_wrap_APE_Footer_itemCount), -1);
  rb_define_method(cAPE_Footer.klass, "setItemCount", VALUEFUNC(_wrap_APE_Footer_setItemCount), -1);
  rb_define_method(cAPE_Footer.klass, "tagSize", VALUEFUNC(_wrap_APE_Footer_tagSize), -1);
  rb_define_method(cAPE_Footer.klass, "completeTagSize", VALUEFUNC(_wrap_APE_Footer_completeTagSize), -1);
  rb_define_method(cAPE_Footer.klass, "setTagSize", VALUEFUNC(_wrap_APE_Footer_setTagSize), -1);
  rb_define_method(cAPE_Footer.klass, "setData", VALUEFUNC(_wrap_APE_Footer_setData), -1);
  rb_define_method(cAPE_Footer.klass, "renderFooter", VALUEFUNC(_wrap_APE_Footer_renderFooter), -1);
  rb_define_method(cAPE_Footer.klass, "renderHeader", VALUEFUNC(_wrap_APE_Footer_renderHeader), -1);
  cAPE_Footer.mark = 0;
  cAPE_Footer.destroy = (void (*)(void *)) free_TagLib_APE_Footer;
  cAPE_Footer.trackObjects = 0;
  
cAPE_Item.klass = rb_define_class_under(mTagLibAPE, "Item", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__APE__Item, (void *) &cAPE_Item);
  rb_define_alloc_func(cAPE_Item.klass, _wrap_APE_Item_allocate);
  rb_define_method(cAPE_Item.klass, "initialize", VALUEFUNC(_wrap_new_APE_Item), -1);
  rb_define_const(cAPE_Item.klass, "Text", SWIG_From_int(static_cast< int >(TagLib::APE::Item::Text)));
  rb_define_const(cAPE_Item.klass, "Binary", SWIG_From_int(static_cast< int >(TagLib::APE::Item::Binary)));
  rb_define_const(cAPE_Item.klass, "Locator", SWIG_From_int(static_cast< int >(TagLib::APE::Item::Locator)));
  rb_define_method(cAPE_Item.klass, "key", VALUEFUNC(_wrap_APE_Item_key), -1);
  rb_define_method(cAPE_Item.klass, "value", VALUEFUNC(_wrap_APE_Item_value), -1);
  rb_define_method(cAPE_Item.klass, "setKey", VALUEFUNC(_wrap_APE_Item_setKey), -1);
  rb_define_method(cAPE_Item.klass, "setValue", VALUEFUNC(_wrap_APE_Item_setValue), -1);
  rb_define_method(cAPE_Item.klass, "setValues", VALUEFUNC(_wrap_APE_Item_setValues), -1);
  rb_define_method(cAPE_Item.klass, "appendValue", VALUEFUNC(_wrap_APE_Item_appendValue), -1);
  rb_define_method(cAPE_Item.klass, "appendValues", VALUEFUNC(_wrap_APE_Item_appendValues), -1);
  rb_define_method(cAPE_Item.klass, "size", VALUEFUNC(_wrap_APE_Item_size), -1);
  rb_define_method(cAPE_Item.klass, "toString", VALUEFUNC(_wrap_APE_Item_toString), -1);
  rb_define_method(cAPE_Item.klass, "toStringList", VALUEFUNC(_wrap_APE_Item_toStringList), -1);
  rb_define_method(cAPE_Item.klass, "values", VALUEFUNC(_wrap_APE_Item_values), -1);
  rb_define_method(cAPE_Item.klass, "render", VALUEFUNC(_wrap_APE_Item_render), -1);
  rb_define_method(cAPE_Item.klass, "parse", VALUEFUNC(_wrap_APE_Item_parse), -1);
  rb_define_method(cAPE_Item.klass, "setReadOnly", VALUEFUNC(_wrap_APE_Item_setReadOnly), -1);
  rb_define_method(cAPE_Item.klass, "isReadOnly", VALUEFUNC(_wrap_APE_Item_isReadOnly), -1);
  rb_define_method(cAPE_Item.klass, "setType", VALUEFUNC(_wrap_APE_Item_setType), -1);
  rb_define_method(cAPE_Item.klass, "type", VALUEFUNC(_wrap_APE_Item_type), -1);
  rb_define_method(cAPE_Item.klass, "isEmpty", VALUEFUNC(_wrap_APE_Item_isEmpty), -1);
  cAPE_Item.mark = 0;
  cAPE_Item.destroy = (void (*)(void *)) free_TagLib_APE_Item;
  cAPE_Item.trackObjects = 0;
  
cAPE_Tag.klass = rb_define_class_under(mTagLibAPE, "Tag", ((swig_class *) SWIGTYPE_p_TagLib__Tag->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__APE__Tag, (void *) &cAPE_Tag);
  rb_define_alloc_func(cAPE_Tag.klass, _wrap_APE_Tag_allocate);
  rb_define_method(cAPE_Tag.klass, "initialize", VALUEFUNC(_wrap_new_APE_Tag), -1);
  rb_define_method(cAPE_Tag.klass, "render", VALUEFUNC(_wrap_APE_Tag_render), -1);
  rb_define_method(cAPE_Tag.klass, "footer", VALUEFUNC(_wrap_APE_Tag_footer), -1);
  rb_define_method(cAPE_Tag.klass, "itemListMap", VALUEFUNC(_wrap_APE_Tag_itemListMap), -1);
  rb_define_method(cAPE_Tag.klass, "removeItem", VALUEFUNC(_wrap_APE_Tag_removeItem), -1);
  rb_define_method(cAPE_Tag.klass, "addValue", VALUEFUNC(_wrap_APE_Tag_addValue), -1);
  rb_define_method(cAPE_Tag.klass, "setItem", VALUEFUNC(_wrap_APE_Tag_setItem), -1);
  cAPE_Tag.mark = 0;
  cAPE_Tag.destroy = (void (*)(void *)) free_TagLib_APE_Tag;
  cAPE_Tag.trackObjects = 0;
  
cOgg_PageHeader.klass = rb_define_class_under(mTagLibOgg, "PageHeader", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__Ogg__PageHeader, (void *) &cOgg_PageHeader);
  rb_define_alloc_func(cOgg_PageHeader.klass, _wrap_Ogg_PageHeader_allocate);
  rb_define_method(cOgg_PageHeader.klass, "initialize", VALUEFUNC(_wrap_new_Ogg_PageHeader), -1);
  rb_define_method(cOgg_PageHeader.klass, "isValid", VALUEFUNC(_wrap_Ogg_PageHeader_isValid), -1);
  rb_define_method(cOgg_PageHeader.klass, "packetSizes", VALUEFUNC(_wrap_Ogg_PageHeader_packetSizes), -1);
  rb_define_method(cOgg_PageHeader.klass, "setPacketSizes", VALUEFUNC(_wrap_Ogg_PageHeader_setPacketSizes), -1);
  rb_define_method(cOgg_PageHeader.klass, "firstPacketContinued", VALUEFUNC(_wrap_Ogg_PageHeader_firstPacketContinued), -1);
  rb_define_method(cOgg_PageHeader.klass, "setFirstPacketContinued", VALUEFUNC(_wrap_Ogg_PageHeader_setFirstPacketContinued), -1);
  rb_define_method(cOgg_PageHeader.klass, "lastPacketCompleted", VALUEFUNC(_wrap_Ogg_PageHeader_lastPacketCompleted), -1);
  rb_define_method(cOgg_PageHeader.klass, "setLastPacketCompleted", VALUEFUNC(_wrap_Ogg_PageHeader_setLastPacketCompleted), -1);
  rb_define_method(cOgg_PageHeader.klass, "firstPageOfStream", VALUEFUNC(_wrap_Ogg_PageHeader_firstPageOfStream), -1);
  rb_define_method(cOgg_PageHeader.klass, "setFirstPageOfStream", VALUEFUNC(_wrap_Ogg_PageHeader_setFirstPageOfStream), -1);
  rb_define_method(cOgg_PageHeader.klass, "lastPageOfStream", VALUEFUNC(_wrap_Ogg_PageHeader_lastPageOfStream), -1);
  rb_define_method(cOgg_PageHeader.klass, "setLastPageOfStream", VALUEFUNC(_wrap_Ogg_PageHeader_setLastPageOfStream), -1);
  rb_define_method(cOgg_PageHeader.klass, "absoluteGranularPosition", VALUEFUNC(_wrap_Ogg_PageHeader_absoluteGranularPosition), -1);
  rb_define_method(cOgg_PageHeader.klass, "setAbsoluteGranularPosition", VALUEFUNC(_wrap_Ogg_PageHeader_setAbsoluteGranularPosition), -1);
  rb_define_method(cOgg_PageHeader.klass, "streamSerialNumber", VALUEFUNC(_wrap_Ogg_PageHeader_streamSerialNumber), -1);
  rb_define_method(cOgg_PageHeader.klass, "setStreamSerialNumber", VALUEFUNC(_wrap_Ogg_PageHeader_setStreamSerialNumber), -1);
  rb_define_method(cOgg_PageHeader.klass, "pageSequenceNumber", VALUEFUNC(_wrap_Ogg_PageHeader_pageSequenceNumber), -1);
  rb_define_method(cOgg_PageHeader.klass, "setPageSequenceNumber", VALUEFUNC(_wrap_Ogg_PageHeader_setPageSequenceNumber), -1);
  rb_define_method(cOgg_PageHeader.klass, "size", VALUEFUNC(_wrap_Ogg_PageHeader_size), -1);
  rb_define_method(cOgg_PageHeader.klass, "dataSize", VALUEFUNC(_wrap_Ogg_PageHeader_dataSize), -1);
  rb_define_method(cOgg_PageHeader.klass, "render", VALUEFUNC(_wrap_Ogg_PageHeader_render), -1);
  cOgg_PageHeader.mark = 0;
  cOgg_PageHeader.destroy = (void (*)(void *)) free_TagLib_Ogg_PageHeader;
  cOgg_PageHeader.trackObjects = 0;
  
cOgg_Page.klass = rb_define_class_under(mTagLibOgg, "Page", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__Ogg__Page, (void *) &cOgg_Page);
  rb_define_alloc_func(cOgg_Page.klass, _wrap_Ogg_Page_allocate);
  rb_define_method(cOgg_Page.klass, "initialize", VALUEFUNC(_wrap_new_Ogg_Page), -1);
  rb_define_const(cOgg_Page.klass, "DoesNotContainPacket", SWIG_From_int(static_cast< int >(TagLib::Ogg::Page::DoesNotContainPacket)));
  rb_define_const(cOgg_Page.klass, "CompletePacket", SWIG_From_int(static_cast< int >(TagLib::Ogg::Page::CompletePacket)));
  rb_define_const(cOgg_Page.klass, "BeginsWithPacket", SWIG_From_int(static_cast< int >(TagLib::Ogg::Page::BeginsWithPacket)));
  rb_define_const(cOgg_Page.klass, "EndsWithPacket", SWIG_From_int(static_cast< int >(TagLib::Ogg::Page::EndsWithPacket)));
  rb_define_const(cOgg_Page.klass, "SinglePagePerGroup", SWIG_From_int(static_cast< int >(TagLib::Ogg::Page::SinglePagePerGroup)));
  rb_define_const(cOgg_Page.klass, "Repaginate", SWIG_From_int(static_cast< int >(TagLib::Ogg::Page::Repaginate)));
  rb_define_method(cOgg_Page.klass, "fileOffset", VALUEFUNC(_wrap_Ogg_Page_fileOffset), -1);
  rb_define_method(cOgg_Page.klass, "header", VALUEFUNC(_wrap_Ogg_Page_header), -1);
  rb_define_method(cOgg_Page.klass, "firstPacketIndex", VALUEFUNC(_wrap_Ogg_Page_firstPacketIndex), -1);
  rb_define_method(cOgg_Page.klass, "setFirstPacketIndex", VALUEFUNC(_wrap_Ogg_Page_setFirstPacketIndex), -1);
  rb_define_method(cOgg_Page.klass, "containsPacket", VALUEFUNC(_wrap_Ogg_Page_containsPacket), -1);
  rb_define_method(cOgg_Page.klass, "packetCount", VALUEFUNC(_wrap_Ogg_Page_packetCount), -1);
  rb_define_method(cOgg_Page.klass, "packets", VALUEFUNC(_wrap_Ogg_Page_packets), -1);
  rb_define_method(cOgg_Page.klass, "size", VALUEFUNC(_wrap_Ogg_Page_size), -1);
  rb_define_method(cOgg_Page.klass, "render", VALUEFUNC(_wrap_Ogg_Page_render), -1);
  cOgg_Page.mark = 0;
  cOgg_Page.destroy = (void (*)(void *)) free_TagLib_Ogg_Page;
  cOgg_Page.trackObjects = 0;
  
cOgg_File.klass = rb_define_class_under(mTagLibOgg, "File", ((swig_class *) SWIGTYPE_p_TagLib__File->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__Ogg__File, (void *) &cOgg_File);
  rb_undef_alloc_func(cOgg_File.klass);
  rb_define_method(cOgg_File.klass, "packet", VALUEFUNC(_wrap_Ogg_File_packet), -1);
  rb_define_method(cOgg_File.klass, "setPacket", VALUEFUNC(_wrap_Ogg_File_setPacket), -1);
  rb_define_method(cOgg_File.klass, "firstPageHeader", VALUEFUNC(_wrap_Ogg_File_firstPageHeader), -1);
  rb_define_method(cOgg_File.klass, "lastPageHeader", VALUEFUNC(_wrap_Ogg_File_lastPageHeader), -1);
  cOgg_File.mark = 0;
  cOgg_File.destroy = (void (*)(void *)) free_TagLib_Ogg_File;
  cOgg_File.trackObjects = 0;
  
cOgg_XiphComment.klass = rb_define_class_under(mTagLibOgg, "XiphComment", ((swig_class *) SWIGTYPE_p_TagLib__Tag->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__Ogg__XiphComment, (void *) &cOgg_XiphComment);
  rb_define_alloc_func(cOgg_XiphComment.klass, _wrap_Ogg_XiphComment_allocate);
  rb_define_method(cOgg_XiphComment.klass, "initialize", VALUEFUNC(_wrap_new_Ogg_XiphComment), -1);
  rb_define_method(cOgg_XiphComment.klass, "fieldCount", VALUEFUNC(_wrap_Ogg_XiphComment_fieldCount), -1);
  rb_define_method(cOgg_XiphComment.klass, "fieldListMap", VALUEFUNC(_wrap_Ogg_XiphComment_fieldListMap), -1);
  rb_define_method(cOgg_XiphComment.klass, "vendorID", VALUEFUNC(_wrap_Ogg_XiphComment_vendorID), -1);
  rb_define_method(cOgg_XiphComment.klass, "addField", VALUEFUNC(_wrap_Ogg_XiphComment_addField), -1);
  rb_define_method(cOgg_XiphComment.klass, "removeField", VALUEFUNC(_wrap_Ogg_XiphComment_removeField), -1);
  rb_define_method(cOgg_XiphComment.klass, "contains", VALUEFUNC(_wrap_Ogg_XiphComment_contains), -1);
  rb_define_method(cOgg_XiphComment.klass, "render", VALUEFUNC(_wrap_Ogg_XiphComment_render), -1);
  cOgg_XiphComment.mark = 0;
  cOgg_XiphComment.destroy = (void (*)(void *)) free_TagLib_Ogg_XiphComment;
  cOgg_XiphComment.trackObjects = 0;
  
cOgg_Flac_File.klass = rb_define_class_under(mTagLibOggFlac, "File", ((swig_class *) SWIGTYPE_p_TagLib__Ogg__File->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__Ogg__FLAC__File, (void *) &cOgg_Flac_File);
  rb_define_alloc_func(cOgg_Flac_File.klass, _wrap_Ogg_Flac_File_allocate);
  rb_define_method(cOgg_Flac_File.klass, "initialize", VALUEFUNC(_wrap_new_Ogg_Flac_File), -1);
  rb_define_method(cOgg_Flac_File.klass, "tag", VALUEFUNC(_wrap_Ogg_Flac_File_tag), -1);
  rb_define_method(cOgg_Flac_File.klass, "audioProperties", VALUEFUNC(_wrap_Ogg_Flac_File_audioProperties), -1);
  rb_define_method(cOgg_Flac_File.klass, "streamLength", VALUEFUNC(_wrap_Ogg_Flac_File_streamLength), -1);
  cOgg_Flac_File.mark = 0;
  cOgg_Flac_File.destroy = (void (*)(void *)) free_TagLib_Ogg_FLAC_File;
  cOgg_Flac_File.trackObjects = 0;
  
cOgg_Speex_Properties.klass = rb_define_class_under(mTagLibOggSpeex, "Properties", ((swig_class *) SWIGTYPE_p_TagLib__AudioProperties->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__Ogg__Speex__Properties, (void *) &cOgg_Speex_Properties);
  rb_define_alloc_func(cOgg_Speex_Properties.klass, _wrap_Ogg_Speex_Properties_allocate);
  rb_define_method(cOgg_Speex_Properties.klass, "initialize", VALUEFUNC(_wrap_new_Ogg_Speex_Properties), -1);
  rb_define_method(cOgg_Speex_Properties.klass, "speexVersion", VALUEFUNC(_wrap_Ogg_Speex_Properties_speexVersion), -1);
  cOgg_Speex_Properties.mark = 0;
  cOgg_Speex_Properties.trackObjects = 0;
  
cOgg_Speex_File.klass = rb_define_class_under(mTagLibOggSpeex, "File", ((swig_class *) SWIGTYPE_p_TagLib__Ogg__File->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__Ogg__Speex__File, (void *) &cOgg_Speex_File);
  rb_define_alloc_func(cOgg_Speex_File.klass, _wrap_Ogg_Speex_File_allocate);
  rb_define_method(cOgg_Speex_File.klass, "initialize", VALUEFUNC(_wrap_new_Ogg_Speex_File), -1);
  rb_define_method(cOgg_Speex_File.klass, "tag", VALUEFUNC(_wrap_Ogg_Speex_File_tag), -1);
  rb_define_method(cOgg_Speex_File.klass, "audioProperties", VALUEFUNC(_wrap_Ogg_Speex_File_audioProperties), -1);
  cOgg_Speex_File.mark = 0;
  cOgg_Speex_File.destroy = (void (*)(void *)) free_TagLib_Ogg_Speex_File;
  cOgg_Speex_File.trackObjects = 0;
  
cVorbis_Properties.klass = rb_define_class_under(mTagLibVorbis, "Properties", ((swig_class *) SWIGTYPE_p_TagLib__AudioProperties->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__Vorbis__Properties, (void *) &cVorbis_Properties);
  rb_define_alloc_func(cVorbis_Properties.klass, _wrap_Vorbis_Properties_allocate);
  rb_define_method(cVorbis_Properties.klass, "initialize", VALUEFUNC(_wrap_new_Vorbis_Properties), -1);
  rb_define_method(cVorbis_Properties.klass, "vorbisVersion", VALUEFUNC(_wrap_Vorbis_Properties_vorbisVersion), -1);
  rb_define_method(cVorbis_Properties.klass, "bitrateMaximum", VALUEFUNC(_wrap_Vorbis_Properties_bitrateMaximum), -1);
  rb_define_method(cVorbis_Properties.klass, "bitrateNominal", VALUEFUNC(_wrap_Vorbis_Properties_bitrateNominal), -1);
  rb_define_method(cVorbis_Properties.klass, "bitrateMinimum", VALUEFUNC(_wrap_Vorbis_Properties_bitrateMinimum), -1);
  cVorbis_Properties.mark = 0;
  cVorbis_Properties.trackObjects = 0;
  
cVorbis_File.klass = rb_define_class_under(mTagLibVorbis, "File", ((swig_class *) SWIGTYPE_p_TagLib__Ogg__File->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__Vorbis__File, (void *) &cVorbis_File);
  rb_define_alloc_func(cVorbis_File.klass, _wrap_Vorbis_File_allocate);
  rb_define_method(cVorbis_File.klass, "initialize", VALUEFUNC(_wrap_new_Vorbis_File), -1);
  rb_define_method(cVorbis_File.klass, "tag", VALUEFUNC(_wrap_Vorbis_File_tag), -1);
  rb_define_method(cVorbis_File.klass, "audioProperties", VALUEFUNC(_wrap_Vorbis_File_audioProperties), -1);
  cVorbis_File.mark = 0;
  cVorbis_File.destroy = (void (*)(void *)) free_TagLib_Vorbis_File;
  cVorbis_File.trackObjects = 0;
rb_define_module_function(mTagLibID3v1,"genre", VALUEFUNC(_wrap_ID3v1_genre),-1);
rb_define_module_function(mTagLibID3v1,"genreIndex", VALUEFUNC(_wrap_ID3v1_genreIndex),-1);
rb_define_module_function(mTagLibID3v1,"genreList", VALUEFUNC(_wrap_ID3v1_genreList),-1);
rb_define_module_function(mTagLibID3v1,"genreMap", VALUEFUNC(_wrap_ID3v1_genreMap),-1);
  
cID3v1_Tag.klass = rb_define_class_under(mTagLibID3v1, "Tag", ((swig_class *) SWIGTYPE_p_TagLib__Tag->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v1__Tag, (void *) &cID3v1_Tag);
  rb_define_alloc_func(cID3v1_Tag.klass, _wrap_ID3v1_Tag_allocate);
  rb_define_method(cID3v1_Tag.klass, "initialize", VALUEFUNC(_wrap_new_ID3v1_Tag), -1);
  rb_define_method(cID3v1_Tag.klass, "render", VALUEFUNC(_wrap_ID3v1_Tag_render), -1);
  cID3v1_Tag.mark = 0;
  cID3v1_Tag.destroy = (void (*)(void *)) free_TagLib_ID3v1_Tag;
  cID3v1_Tag.trackObjects = 0;
  
cID3v2_Header.klass = rb_define_class_under(mTagLibID3v2, "Header", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__Header, (void *) &cID3v2_Header);
  rb_undef_alloc_func(cID3v2_Header.klass);
  cID3v2_Header.mark = 0;
  cID3v2_Header.destroy = (void (*)(void *)) free_TagLib_ID3v2_Header;
  cID3v2_Header.trackObjects = 0;
  
cID3v2_Frame.klass = rb_define_class_under(mTagLibID3v2, "Frame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Header->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__Frame, (void *) &cID3v2_Frame);
  rb_undef_alloc_func(cID3v2_Frame.klass);
  rb_define_method(cID3v2_Frame.klass, "frameID", VALUEFUNC(_wrap_ID3v2_Frame_frameID), -1);
  rb_define_method(cID3v2_Frame.klass, "size", VALUEFUNC(_wrap_ID3v2_Frame_size), -1);
  rb_define_method(cID3v2_Frame.klass, "to_s", VALUEFUNC(_wrap_ID3v2_Frame___str__), -1);
  cID3v2_Frame.mark = 0;
  cID3v2_Frame.destroy = (void (*)(void *)) free_TagLib_ID3v2_Frame;
  cID3v2_Frame.trackObjects = 0;
  
cID3v2_AttachedPictureFrame.klass = rb_define_class_under(mTagLibID3v2, "AttachedPictureFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__AttachedPictureFrame, (void *) &cID3v2_AttachedPictureFrame);
  rb_define_alloc_func(cID3v2_AttachedPictureFrame.klass, _wrap_ID3v2_AttachedPictureFrame_allocate);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "initialize", VALUEFUNC(_wrap_new_ID3v2_AttachedPictureFrame), -1);
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "Other", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Other)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "FileIcon", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::FileIcon)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "OtherFileIcon", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::OtherFileIcon)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "FrontCover", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::FrontCover)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "BackCover", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::BackCover)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "LeafletPage", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::LeafletPage)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "Media", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Media)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "LeadArtist", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::LeadArtist)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "Artist", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Artist)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "Conductor", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Conductor)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "Band", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Band)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "Composer", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Composer)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "Lyricist", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Lyricist)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "RecordingLocation", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::RecordingLocation)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "DuringRecording", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::DuringRecording)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "DuringPerformance", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::DuringPerformance)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "MovieScreenCapture", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::MovieScreenCapture)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "ColouredFish", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::ColouredFish)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "Illustration", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::Illustration)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "BandLogo", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::BandLogo)));
  rb_define_const(cID3v2_AttachedPictureFrame.klass, "PublisherLogo", SWIG_From_int(static_cast< int >(TagLib::ID3v2::AttachedPictureFrame::PublisherLogo)));
  rb_define_singleton_method(cID3v2_AttachedPictureFrame.klass, "new2", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_new2), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "toString", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_toString), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "textEncoding", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_textEncoding), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "setTextEncoding", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_setTextEncoding), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "mimeType", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_mimeType), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "setMimeType", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_setMimeType), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "type", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_type), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "setType", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_setType), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "description", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_description), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "setDescription", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_setDescription), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "picture", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_picture), -1);
  rb_define_method(cID3v2_AttachedPictureFrame.klass, "setPicture", VALUEFUNC(_wrap_ID3v2_AttachedPictureFrame_setPicture), -1);
  cID3v2_AttachedPictureFrame.mark = 0;
  cID3v2_AttachedPictureFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_AttachedPictureFrame;
  cID3v2_AttachedPictureFrame.trackObjects = 0;
  
cID3v2_CommentsFrame.klass = rb_define_class_under(mTagLibID3v2, "CommentsFrame", ((swig_class *) SWIGTYPE_p_TagLib__ID3v2__Frame->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__CommentsFrame, (void *) &cID3v2_CommentsFrame);
  rb_define_alloc_func(cID3v2_CommentsFrame.klass, _wrap_ID3v2_CommentsFrame_allocate);
  rb_define_method(cID3v2_CommentsFrame.klass, "initialize", VALUEFUNC(_wrap_new_ID3v2_CommentsFrame), -1);
  rb_define_method(cID3v2_CommentsFrame.klass, "toString", VALUEFUNC(_wrap_ID3v2_CommentsFrame_toString), -1);
  rb_define_method(cID3v2_CommentsFrame.klass, "language", VALUEFUNC(_wrap_ID3v2_CommentsFrame_language), -1);
  rb_define_method(cID3v2_CommentsFrame.klass, "description", VALUEFUNC(_wrap_ID3v2_CommentsFrame_description), -1);
  rb_define_method(cID3v2_CommentsFrame.klass, "text", VALUEFUNC(_wrap_ID3v2_CommentsFrame_text), -1);
  rb_define_method(cID3v2_CommentsFrame.klass, "setLanguage", VALUEFUNC(_wrap_ID3v2_CommentsFrame_setLanguage), -1);
  rb_define_method(cID3v2_CommentsFrame.klass, "setDescription", VALUEFUNC(_wrap_ID3v2_CommentsFrame_setDescription), -1);
  rb_define_method(cID3v2_CommentsFrame.klass, "setText", VALUEFUNC(_wrap_ID3v2_CommentsFrame_setText), -1);
  rb_define_method(cID3v2_CommentsFrame.klass, "textEncoding", VALUEFUNC(_wrap_ID3v2_CommentsFrame_textEncoding), -1);
  rb_define_method(cID3v2_CommentsFrame.klass, "setTextEncoding", VALUEFUNC(_wrap_ID3v2_CommentsFrame_setTextEncoding), -1);
  cID3v2_CommentsFrame.mark = 0;
  cID3v2_CommentsFrame.destroy = (void (*)(void *)) free_TagLib_ID3v2_CommentsFrame;
  cID3v2_CommentsFrame.trackObjects = 0;
  
cID3v2_GeneralEncapsulatedObjectFrame.klass = rb_define_class_under(mTagLibID3v2, "GeneralEncapsulatedObjectFrame", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__GeneralEncapsulatedObjectFrame, (void *) &cID3v2_GeneralEncapsulatedObjectFrame);
  rb_undef_alloc_func(cID3v2_GeneralEncapsulatedObjectFrame.klass);
  cID3v2_GeneralEncapsulatedObjectFrame.mark = 0;
  cID3v2_GeneralEncapsulatedObjectFrame.trackObjects = 0;
  
cID3v2_FrameFactory.klass = rb_define_class_under(mTagLibID3v2, "FrameFactory", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__FrameFactory, (void *) &cID3v2_FrameFactory);
  rb_undef_alloc_func(cID3v2_FrameFactory.klass);
  cID3v2_FrameFactory.mark = 0;
  cID3v2_FrameFactory.trackObjects = 0;
  
cID3v2_Tag.klass = rb_define_class_under(mTagLibID3v2, "Tag", ((swig_class *) SWIGTYPE_p_TagLib__Tag->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__ID3v2__Tag, (void *) &cID3v2_Tag);
  rb_define_alloc_func(cID3v2_Tag.klass, _wrap_ID3v2_Tag_allocate);
  rb_define_method(cID3v2_Tag.klass, "initialize", VALUEFUNC(_wrap_new_ID3v2_Tag), -1);
  rb_define_method(cID3v2_Tag.klass, "header", VALUEFUNC(_wrap_ID3v2_Tag_header), -1);
  rb_define_method(cID3v2_Tag.klass, "addFrame", VALUEFUNC(_wrap_ID3v2_Tag_addFrame), -1);
  rb_define_method(cID3v2_Tag.klass, "frameListMap", VALUEFUNC(_wrap_ID3v2_Tag_frameListMap), -1);
  rb_define_method(cID3v2_Tag.klass, "frameList", VALUEFUNC(_wrap_ID3v2_Tag_frameList), -1);
  rb_define_method(cID3v2_Tag.klass, "removeFrame", VALUEFUNC(_wrap_ID3v2_Tag_removeFrame), -1);
  cID3v2_Tag.mark = 0;
  cID3v2_Tag.destroy = (void (*)(void *)) free_TagLib_ID3v2_Tag;
  cID3v2_Tag.trackObjects = 0;
  
cFLAC_Properties.klass = rb_define_class_under(mTagLibFLAC, "Properties", ((swig_class *) SWIGTYPE_p_TagLib__AudioProperties->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__FLAC__Properties, (void *) &cFLAC_Properties);
  rb_define_alloc_func(cFLAC_Properties.klass, _wrap_FLAC_Properties_allocate);
  rb_define_method(cFLAC_Properties.klass, "initialize", VALUEFUNC(_wrap_new_FLAC_Properties), -1);
  rb_define_method(cFLAC_Properties.klass, "sampleWidth", VALUEFUNC(_wrap_FLAC_Properties_sampleWidth), -1);
  cFLAC_Properties.mark = 0;
  cFLAC_Properties.destroy = (void (*)(void *)) free_TagLib_FLAC_Properties;
  cFLAC_Properties.trackObjects = 0;
  
cFLAC_File.klass = rb_define_class_under(mTagLibFLAC, "File", ((swig_class *) SWIGTYPE_p_TagLib__File->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__FLAC__File, (void *) &cFLAC_File);
  rb_define_alloc_func(cFLAC_File.klass, _wrap_FLAC_File_allocate);
  rb_define_method(cFLAC_File.klass, "initialize", VALUEFUNC(_wrap_new_FLAC_File), -1);
  rb_define_method(cFLAC_File.klass, "audioProperties", VALUEFUNC(_wrap_FLAC_File_audioProperties), -1);
  rb_define_method(cFLAC_File.klass, "ID3v2Tag", VALUEFUNC(_wrap_FLAC_File_ID3v2Tag), -1);
  rb_define_method(cFLAC_File.klass, "ID3v1Tag", VALUEFUNC(_wrap_FLAC_File_ID3v1Tag), -1);
  rb_define_method(cFLAC_File.klass, "xiphComment", VALUEFUNC(_wrap_FLAC_File_xiphComment), -1);
  rb_define_method(cFLAC_File.klass, "setID3v2FrameFactory", VALUEFUNC(_wrap_FLAC_File_setID3v2FrameFactory), -1);
  rb_define_method(cFLAC_File.klass, "streamInfoData", VALUEFUNC(_wrap_FLAC_File_streamInfoData), -1);
  rb_define_method(cFLAC_File.klass, "streamLength", VALUEFUNC(_wrap_FLAC_File_streamLength), -1);
  cFLAC_File.mark = 0;
  cFLAC_File.destroy = (void (*)(void *)) free_TagLib_FLAC_File;
  cFLAC_File.trackObjects = 0;
  
cMPC_Properties.klass = rb_define_class_under(mTagLibMPC, "Properties", ((swig_class *) SWIGTYPE_p_TagLib__AudioProperties->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__MPC__Properties, (void *) &cMPC_Properties);
  rb_define_alloc_func(cMPC_Properties.klass, _wrap_MPC_Properties_allocate);
  rb_define_method(cMPC_Properties.klass, "initialize", VALUEFUNC(_wrap_new_MPC_Properties), -1);
  rb_define_method(cMPC_Properties.klass, "mpcVersion", VALUEFUNC(_wrap_MPC_Properties_mpcVersion), -1);
  cMPC_Properties.mark = 0;
  cMPC_Properties.trackObjects = 0;
  
cMPC_File.klass = rb_define_class_under(mTagLibMPC, "File", ((swig_class *) SWIGTYPE_p_TagLib__File->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__MPC__File, (void *) &cMPC_File);
  rb_define_alloc_func(cMPC_File.klass, _wrap_MPC_File_allocate);
  rb_define_method(cMPC_File.klass, "initialize", VALUEFUNC(_wrap_new_MPC_File), -1);
  rb_define_const(cMPC_File.klass, "NoTags", SWIG_From_int(static_cast< int >(TagLib::MPC::File::NoTags)));
  rb_define_const(cMPC_File.klass, "ID3v1", SWIG_From_int(static_cast< int >(TagLib::MPC::File::ID3v1)));
  rb_define_const(cMPC_File.klass, "ID3v2", SWIG_From_int(static_cast< int >(TagLib::MPC::File::ID3v2)));
  rb_define_const(cMPC_File.klass, "APE", SWIG_From_int(static_cast< int >(TagLib::MPC::File::APE)));
  rb_define_const(cMPC_File.klass, "AllTags", SWIG_From_int(static_cast< int >(TagLib::MPC::File::AllTags)));
  rb_define_method(cMPC_File.klass, "audioProperties", VALUEFUNC(_wrap_MPC_File_audioProperties), -1);
  rb_define_method(cMPC_File.klass, "ID3v1Tag", VALUEFUNC(_wrap_MPC_File_ID3v1Tag), -1);
  rb_define_method(cMPC_File.klass, "APETag", VALUEFUNC(_wrap_MPC_File_APETag), -1);
  rb_define_method(cMPC_File.klass, "strip", VALUEFUNC(_wrap_MPC_File_strip), -1);
  rb_define_method(cMPC_File.klass, "remove", VALUEFUNC(_wrap_MPC_File_remove), -1);
  cMPC_File.mark = 0;
  cMPC_File.destroy = (void (*)(void *)) free_TagLib_MPC_File;
  cMPC_File.trackObjects = 0;
  
cTrueAudio_Properties.klass = rb_define_class_under(mTagLibTrueAudio, "Properties", ((swig_class *) SWIGTYPE_p_TagLib__AudioProperties->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__TrueAudio__Properties, (void *) &cTrueAudio_Properties);
  rb_define_alloc_func(cTrueAudio_Properties.klass, _wrap_TrueAudio_Properties_allocate);
  rb_define_method(cTrueAudio_Properties.klass, "initialize", VALUEFUNC(_wrap_new_TrueAudio_Properties), -1);
  rb_define_method(cTrueAudio_Properties.klass, "bitsPerSample", VALUEFUNC(_wrap_TrueAudio_Properties_bitsPerSample), -1);
  rb_define_method(cTrueAudio_Properties.klass, "ttaVersion", VALUEFUNC(_wrap_TrueAudio_Properties_ttaVersion), -1);
  cTrueAudio_Properties.mark = 0;
  cTrueAudio_Properties.trackObjects = 0;
  
cTrueAudio_File.klass = rb_define_class_under(mTagLibTrueAudio, "File", ((swig_class *) SWIGTYPE_p_TagLib__File->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__TrueAudio__File, (void *) &cTrueAudio_File);
  rb_define_alloc_func(cTrueAudio_File.klass, _wrap_TrueAudio_File_allocate);
  rb_define_method(cTrueAudio_File.klass, "initialize", VALUEFUNC(_wrap_new_TrueAudio_File), -1);
  rb_define_const(cTrueAudio_File.klass, "NoTags", SWIG_From_int(static_cast< int >(TagLib::TrueAudio::File::NoTags)));
  rb_define_const(cTrueAudio_File.klass, "ID3v1", SWIG_From_int(static_cast< int >(TagLib::TrueAudio::File::ID3v1)));
  rb_define_const(cTrueAudio_File.klass, "ID3v2", SWIG_From_int(static_cast< int >(TagLib::TrueAudio::File::ID3v2)));
  rb_define_const(cTrueAudio_File.klass, "AllTags", SWIG_From_int(static_cast< int >(TagLib::TrueAudio::File::AllTags)));
  rb_define_method(cTrueAudio_File.klass, "audioProperties", VALUEFUNC(_wrap_TrueAudio_File_audioProperties), -1);
  rb_define_method(cTrueAudio_File.klass, "setID3v2FrameFactory", VALUEFUNC(_wrap_TrueAudio_File_setID3v2FrameFactory), -1);
  rb_define_method(cTrueAudio_File.klass, "ID3v1Tag", VALUEFUNC(_wrap_TrueAudio_File_ID3v1Tag), -1);
  rb_define_method(cTrueAudio_File.klass, "ID3v2Tag", VALUEFUNC(_wrap_TrueAudio_File_ID3v2Tag), -1);
  rb_define_method(cTrueAudio_File.klass, "strip", VALUEFUNC(_wrap_TrueAudio_File_strip), -1);
  cTrueAudio_File.mark = 0;
  cTrueAudio_File.destroy = (void (*)(void *)) free_TagLib_TrueAudio_File;
  cTrueAudio_File.trackObjects = 0;
  
cWavPack_Properties.klass = rb_define_class_under(mTagLibWavPack, "Properties", ((swig_class *) SWIGTYPE_p_TagLib__AudioProperties->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__WavPack__Properties, (void *) &cWavPack_Properties);
  rb_define_alloc_func(cWavPack_Properties.klass, _wrap_WavPack_Properties_allocate);
  rb_define_method(cWavPack_Properties.klass, "initialize", VALUEFUNC(_wrap_new_WavPack_Properties), -1);
  rb_define_method(cWavPack_Properties.klass, "bitsPerSample", VALUEFUNC(_wrap_WavPack_Properties_bitsPerSample), -1);
  rb_define_method(cWavPack_Properties.klass, "version", VALUEFUNC(_wrap_WavPack_Properties_version), -1);
  cWavPack_Properties.mark = 0;
  cWavPack_Properties.trackObjects = 0;
  
cWavPack_File.klass = rb_define_class_under(mTagLibWavPack, "File", ((swig_class *) SWIGTYPE_p_TagLib__File->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__WavPack__File, (void *) &cWavPack_File);
  rb_define_alloc_func(cWavPack_File.klass, _wrap_WavPack_File_allocate);
  rb_define_method(cWavPack_File.klass, "initialize", VALUEFUNC(_wrap_new_WavPack_File), -1);
  rb_define_const(cWavPack_File.klass, "NoTags", SWIG_From_int(static_cast< int >(TagLib::WavPack::File::NoTags)));
  rb_define_const(cWavPack_File.klass, "ID3v1", SWIG_From_int(static_cast< int >(TagLib::WavPack::File::ID3v1)));
  rb_define_const(cWavPack_File.klass, "APE", SWIG_From_int(static_cast< int >(TagLib::WavPack::File::APE)));
  rb_define_const(cWavPack_File.klass, "AllTags", SWIG_From_int(static_cast< int >(TagLib::WavPack::File::AllTags)));
  rb_define_method(cWavPack_File.klass, "audioProperties", VALUEFUNC(_wrap_WavPack_File_audioProperties), -1);
  rb_define_method(cWavPack_File.klass, "ID3v1Tag", VALUEFUNC(_wrap_WavPack_File_ID3v1Tag), -1);
  rb_define_method(cWavPack_File.klass, "APETag", VALUEFUNC(_wrap_WavPack_File_APETag), -1);
  rb_define_method(cWavPack_File.klass, "strip", VALUEFUNC(_wrap_WavPack_File_strip), -1);
  cWavPack_File.mark = 0;
  cWavPack_File.destroy = (void (*)(void *)) free_TagLib_WavPack_File;
  cWavPack_File.trackObjects = 0;
  
cMPEG_Header.klass = rb_define_class_under(mTagLibMPEG, "Header", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__MPEG__Header, (void *) &cMPEG_Header);
  rb_define_alloc_func(cMPEG_Header.klass, _wrap_MPEG_Header_allocate);
  rb_define_method(cMPEG_Header.klass, "initialize", VALUEFUNC(_wrap_new_MPEG_Header), -1);
  rb_define_const(cMPEG_Header.klass, "Version1", SWIG_From_int(static_cast< int >(TagLib::MPEG::Header::Version1)));
  rb_define_const(cMPEG_Header.klass, "Version2", SWIG_From_int(static_cast< int >(TagLib::MPEG::Header::Version2)));
  rb_define_const(cMPEG_Header.klass, "Version2_5", SWIG_From_int(static_cast< int >(TagLib::MPEG::Header::Version2_5)));
  rb_define_const(cMPEG_Header.klass, "Stereo", SWIG_From_int(static_cast< int >(TagLib::MPEG::Header::Stereo)));
  rb_define_const(cMPEG_Header.klass, "JointStereo", SWIG_From_int(static_cast< int >(TagLib::MPEG::Header::JointStereo)));
  rb_define_const(cMPEG_Header.klass, "DualChannel", SWIG_From_int(static_cast< int >(TagLib::MPEG::Header::DualChannel)));
  rb_define_const(cMPEG_Header.klass, "SingleChannel", SWIG_From_int(static_cast< int >(TagLib::MPEG::Header::SingleChannel)));
  rb_define_method(cMPEG_Header.klass, "isValid", VALUEFUNC(_wrap_MPEG_Header_isValid), -1);
  rb_define_method(cMPEG_Header.klass, "version", VALUEFUNC(_wrap_MPEG_Header_version), -1);
  rb_define_method(cMPEG_Header.klass, "layer", VALUEFUNC(_wrap_MPEG_Header_layer), -1);
  rb_define_method(cMPEG_Header.klass, "protectionEnabled", VALUEFUNC(_wrap_MPEG_Header_protectionEnabled), -1);
  rb_define_method(cMPEG_Header.klass, "bitrate", VALUEFUNC(_wrap_MPEG_Header_bitrate), -1);
  rb_define_method(cMPEG_Header.klass, "sampleRate", VALUEFUNC(_wrap_MPEG_Header_sampleRate), -1);
  rb_define_method(cMPEG_Header.klass, "isPadded", VALUEFUNC(_wrap_MPEG_Header_isPadded), -1);
  rb_define_method(cMPEG_Header.klass, "channelMode", VALUEFUNC(_wrap_MPEG_Header_channelMode), -1);
  rb_define_method(cMPEG_Header.klass, "isCopyrighted", VALUEFUNC(_wrap_MPEG_Header_isCopyrighted), -1);
  rb_define_method(cMPEG_Header.klass, "isOriginal", VALUEFUNC(_wrap_MPEG_Header_isOriginal), -1);
  rb_define_method(cMPEG_Header.klass, "frameLength", VALUEFUNC(_wrap_MPEG_Header_frameLength), -1);
  rb_define_method(cMPEG_Header.klass, "samplesPerFrame", VALUEFUNC(_wrap_MPEG_Header_samplesPerFrame), -1);
  cMPEG_Header.mark = 0;
  cMPEG_Header.destroy = (void (*)(void *)) free_TagLib_MPEG_Header;
  cMPEG_Header.trackObjects = 0;
  
cMPEG_XingHeader.klass = rb_define_class_under(mTagLibMPEG, "XingHeader", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__MPEG__XingHeader, (void *) &cMPEG_XingHeader);
  rb_define_alloc_func(cMPEG_XingHeader.klass, _wrap_MPEG_XingHeader_allocate);
  rb_define_method(cMPEG_XingHeader.klass, "initialize", VALUEFUNC(_wrap_new_MPEG_XingHeader), -1);
  rb_define_method(cMPEG_XingHeader.klass, "isValid", VALUEFUNC(_wrap_MPEG_XingHeader_isValid), -1);
  rb_define_method(cMPEG_XingHeader.klass, "totalFrames", VALUEFUNC(_wrap_MPEG_XingHeader_totalFrames), -1);
  rb_define_method(cMPEG_XingHeader.klass, "totalSize", VALUEFUNC(_wrap_MPEG_XingHeader_totalSize), -1);
  cMPEG_XingHeader.mark = 0;
  cMPEG_XingHeader.destroy = (void (*)(void *)) free_TagLib_MPEG_XingHeader;
  cMPEG_XingHeader.trackObjects = 0;
  
cMPEG_Properties.klass = rb_define_class_under(mTagLibMPEG, "Properties", ((swig_class *) SWIGTYPE_p_TagLib__AudioProperties->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__MPEG__Properties, (void *) &cMPEG_Properties);
  rb_define_alloc_func(cMPEG_Properties.klass, _wrap_MPEG_Properties_allocate);
  rb_define_method(cMPEG_Properties.klass, "initialize", VALUEFUNC(_wrap_new_MPEG_Properties), -1);
  rb_define_method(cMPEG_Properties.klass, "xingHeader", VALUEFUNC(_wrap_MPEG_Properties_xingHeader), -1);
  rb_define_method(cMPEG_Properties.klass, "version", VALUEFUNC(_wrap_MPEG_Properties_version), -1);
  rb_define_method(cMPEG_Properties.klass, "layer", VALUEFUNC(_wrap_MPEG_Properties_layer), -1);
  rb_define_method(cMPEG_Properties.klass, "protectionEnabled", VALUEFUNC(_wrap_MPEG_Properties_protectionEnabled), -1);
  rb_define_method(cMPEG_Properties.klass, "channelMode", VALUEFUNC(_wrap_MPEG_Properties_channelMode), -1);
  rb_define_method(cMPEG_Properties.klass, "isCopyrighted", VALUEFUNC(_wrap_MPEG_Properties_isCopyrighted), -1);
  rb_define_method(cMPEG_Properties.klass, "isOriginal", VALUEFUNC(_wrap_MPEG_Properties_isOriginal), -1);
  cMPEG_Properties.mark = 0;
  cMPEG_Properties.trackObjects = 0;
  
cMPEG_File.klass = rb_define_class_under(mTagLibMPEG, "File", ((swig_class *) SWIGTYPE_p_TagLib__File->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_TagLib__MPEG__File, (void *) &cMPEG_File);
  rb_define_alloc_func(cMPEG_File.klass, _wrap_MPEG_File_allocate);
  rb_define_method(cMPEG_File.klass, "initialize", VALUEFUNC(_wrap_new_MPEG_File), -1);
  rb_define_const(cMPEG_File.klass, "NoTags", SWIG_From_int(static_cast< int >(TagLib::MPEG::File::NoTags)));
  rb_define_const(cMPEG_File.klass, "ID3v1", SWIG_From_int(static_cast< int >(TagLib::MPEG::File::ID3v1)));
  rb_define_const(cMPEG_File.klass, "ID3v2", SWIG_From_int(static_cast< int >(TagLib::MPEG::File::ID3v2)));
  rb_define_const(cMPEG_File.klass, "APE", SWIG_From_int(static_cast< int >(TagLib::MPEG::File::APE)));
  rb_define_const(cMPEG_File.klass, "AllTags", SWIG_From_int(static_cast< int >(TagLib::MPEG::File::AllTags)));
  rb_define_method(cMPEG_File.klass, "audioProperties", VALUEFUNC(_wrap_MPEG_File_audioProperties), -1);
  rb_define_method(cMPEG_File.klass, "save", VALUEFUNC(_wrap_MPEG_File_save), -1);
  rb_define_method(cMPEG_File.klass, "ID3v2Tag", VALUEFUNC(_wrap_MPEG_File_ID3v2Tag), -1);
  rb_define_method(cMPEG_File.klass, "ID3v1Tag", VALUEFUNC(_wrap_MPEG_File_ID3v1Tag), -1);
  rb_define_method(cMPEG_File.klass, "APETag", VALUEFUNC(_wrap_MPEG_File_APETag), -1);
  rb_define_method(cMPEG_File.klass, "strip", VALUEFUNC(_wrap_MPEG_File_strip), -1);
  rb_define_method(cMPEG_File.klass, "setID3v2FrameFactory", VALUEFUNC(_wrap_MPEG_File_setID3v2FrameFactory), -1);
  rb_define_method(cMPEG_File.klass, "firstFrameOffset", VALUEFUNC(_wrap_MPEG_File_firstFrameOffset), -1);
  rb_define_method(cMPEG_File.klass, "nextFrameOffset", VALUEFUNC(_wrap_MPEG_File_nextFrameOffset), -1);
  rb_define_method(cMPEG_File.klass, "previousFrameOffset", VALUEFUNC(_wrap_MPEG_File_previousFrameOffset), -1);
  rb_define_method(cMPEG_File.klass, "lastFrameOffset", VALUEFUNC(_wrap_MPEG_File_lastFrameOffset), -1);
  cMPEG_File.mark = 0;
  cMPEG_File.destroy = (void (*)(void *)) free_TagLib_MPEG_File;
  cMPEG_File.trackObjects = 0;
}

